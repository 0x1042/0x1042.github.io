{"startSite": "", "filingNum": "", "onePageListNum": 15, "commentLabelColor": "#006b75", "yearColorList": ["#bc4c00", "#0969da", "#1f883d", "#A333D0"], "i18n": "CN", "dayTheme": "light", "nightTheme": "dark_colorblind", "urlMode": "pinyin", "script": "", "style": "", "title": "Daily", "displayTitle": "Daily", "subTitle": "\u6211\u81ea\u503e\u6000\uff0c\u541b\u4e14\u968f\u610f\u3002", "homeUrl": "http://0x1042.github.io", "avatarUrl": "https://raw.githubusercontent.com/0x1042/0x1042.github.io/master/synthwave_option_4.png", "faviconUrl": "https://raw.githubusercontent.com/0x1042/0x1042.github.io/master/synthwave_option_4.ico", "singlePage": ["link", "about"], "GMEEK_VERSION": "main", "postListJson": {"P1": {"htmlDir": "docs/post/c++-zhong-shi-xian-golang-zhong-de-defer-gong-neng.html", "label": "\u57fa\u7840", "labelColor": "#33BE7E", "postTitle": "c++\u4e2d\u5b9e\u73b0golang\u4e2d\u7684defer\u529f\u80fd", "postUrl": "post/c%2B%2B-zhong-shi-xian-golang-zhong-de-defer-gong-neng.html", "postSourceUrl": "https://github.com/0x1042/0x1042.github.io/issues/1", "commentNum": 0, "description": "# \u4f7f\u7528`folly`\r\n\r\n```c++\r\n#include <folly/ScopeGuard.h>\r\n\r\nauto main() -> int {\r\n    std::string msg = \"exit...\";\r\n\r\n    auto guard1 = folly::makeGuard([&] { std::cerr << \"from folly::makeGuard:\" << msg << '\\n'; });\r\n\r\n    std::cout << \"Hello, World!\" << '\\n';\r\n    return 0;\r\n}\r\n\r\n```\r\n\r\n# \u81ea\u5b9a\u4e49\u5b9e\u73b0\r\n\r\n```c++\r\ntemplate <typename Lambda> \r\nstruct Defer : Lambda {\r\n    ~Defer() { Lambda::operator()(); }\r\n};\r\n\r\ntemplate <typename Lambda> \r\nDefer(Lambda) -> Defer<Lambda>;\r\n\r\nauto main() -> int {\r\n    std::string msg = \"exit...\";\r\n\r\n    Defer guard{[&] { std::cerr << msg << '\\n'; }};\r\n\r\n    std::cout << \"Hello, World!\" << '\\n';\r\n    return 0;\r\n}\r\n```\r\n\u3002", "top": 0, "createdAt": 1698249441, "style": "", "script": "", "createdDate": "2023-10-25", "dateLabelColor": "#A333D0"}, "P2": {"htmlDir": "docs/post/golang-zhong-protobuf -fan-xu-lie-hua-xing-neng-you-hua.html", "label": "go", "labelColor": "#7B7AB9", "postTitle": "golang\u4e2dprotobuf \u53cd\u5e8f\u5217\u5316\u6027\u80fd\u4f18\u5316", "postUrl": "post/golang-zhong-protobuf%20-fan-xu-lie-hua-xing-neng-you-hua.html", "postSourceUrl": "https://github.com/0x1042/0x1042.github.io/issues/2", "commentNum": 0, "description": "# \u80cc\u666f\r\n\r\n\u7ebf\u4e0a\u6709\u4e00\u4e9b\u516c\u5171\u4f7f\u7528\u7684\u8d85\u5927`protobuf`\uff0c\u90e8\u5206\u5355**message\u7684field\u5927\u4e8e10000**\u3002", "top": 0, "createdAt": 1698484079, "style": "", "script": "", "createdDate": "2023-10-28", "dateLabelColor": "#A333D0"}, "P3": {"htmlDir": "docs/post/struct -shi-yong-sheng-ming-zhou-qi-biao-zhu.html", "label": "rust", "labelColor": "#6EF5AE", "postTitle": "struct \u4f7f\u7528\u751f\u547d\u5468\u671f\u6807\u6ce8", "postUrl": "post/struct%20-shi-yong-sheng-ming-zhou-qi-biao-zhu.html", "postSourceUrl": "https://github.com/0x1042/0x1042.github.io/issues/3", "commentNum": 0, "description": "```rust\r\n#[derive(Debug)]\r\nstruct Sheep<'c, 'd> {\r\n    age: &'c u32,\r\n    name: &'d str,\r\n}\r\n\r\nimpl<'c, 'd> Sheep<'c, 'd> {\r\n    /// Returns the get age of this [`Sheep`].\r\n    pub fn get_age(&self) -> u32 {\r\n        *self.age\r\n    }\r\n\r\n    /// Returns the get name of this [`Sheep`].\r\n    pub fn get_name(&self) -> String {\r\n        self.name.to_owned()\r\n    }\r\n}\r\n\r\n#[cfg(test)]\r\nmod tests {\r\n    use super::Sheep;\r\n    #[test]\r\n    fn test_lt() {\r\n        let age = 5;\r\n        let name = \"dollor\";\r\n\r\n        let sheep = Sheep {\r\n            age: &age,\r\n            name: name,\r\n        };\r\n\r\n        println!(\"name is {:?}\", sheep.get_name());\r\n        println!(\"age is {:?}\", sheep.get_age());\r\n\r\n        println!(\"sheep :{:?}\", sheep);\r\n    }\r\n}\r\n```\u3002", "top": 0, "createdAt": 1698857748, "style": "", "script": "", "createdDate": "2023-11-01", "dateLabelColor": "#A333D0"}, "P4": {"htmlDir": "docs/post/yi-\u3001c++-zhong-de-zhi-lei-xing.html", "label": "c++", "labelColor": "#BE8008", "postTitle": "\u4e00\u3001c++\u4e2d\u7684\u503c\u7c7b\u578b", "postUrl": "post/yi-%E3%80%81c%2B%2B-zhong-de-zhi-lei-xing.html", "postSourceUrl": "https://github.com/0x1042/0x1042.github.io/issues/4", "commentNum": 0, "description": "# \u503c\u7c7b\u522b \r\n\r\n- [\u503c\u7c7b\u522b](#\u503c\u7c7b\u522b)\r\n  - [\u5982\u4f55\u533a\u5206\u5de6\u503c\u548c\u53f3\u503c](#\u5982\u4f55\u533a\u5206\u5de6\u503c\u548c\u53f3\u503c)\r\n  - [\u51fd\u6570\u53c2\u6570\u5339\u914d](#\u51fd\u6570\u53c2\u6570\u5339\u914d)\r\n  - [\u503c\u7c7b\u578b](#\u503c\u7c7b\u578b)\r\n  - [\u4e07\u80fd\u5f15\u7528 **universal reference**](#\u4e07\u80fd\u5f15\u7528-universal-reference)\r\n  - [\u5f15\u7528\u6298\u53e0 **reference collapsing**](#\u5f15\u7528\u6298\u53e0-reference-collapsing)\r\n  - [\u5b8c\u7f8e\u8f6c\u53d1 **perfect forward**](#\u5b8c\u7f8e\u8f6c\u53d1-perfect-forward)\r\n\r\n## \u5982\u4f55\u533a\u5206\u5de6\u503c\u548c\u53f3\u503c\r\n\r\n```c++\r\nvoid log(std::string_view message, std::source_location location) {\r\n    std::clog << \"file: \" << location.file_name() << '(' << location.line() << ':' << location.column() << \") `\" << location.function_name()\r\n              << \"`: \" << message << '\\n';\r\n}\r\n\r\nvoid foo(int & /*val*/) {\r\n    log(\"foo1\");\r\n}\r\n\r\nvoid foo(int && /*val*/) {\r\n    log(\"foo2\");\r\n}\r\n```\r\n\r\n```cpp\r\nint && value = 1024;\r\nfoo(value); // \u8c03\u7528\u7684\u662f void foo(int &)\r\n```\r\n\r\n- \u533f\u540d\u7684\u4e34\u65f6\u5bf9\u8c61\u662f\u53f3\u503c\uff0c\u5177\u540d\u7684\u53f3\u503c\u5f15\u7528\u5bf9\u8c61\u662f\u5de6\u503c \r\n- \u5982\u679c\u8868\u8fbe\u5f0f\u53ef\u4ee5\u53d6\u5730\u5740\uff0c\u5219\u4e3a\u5de6\u503c\u8868\u8fbe\u5f0f\uff0c\u5426\u5219\uff0c\u4e3a\u53f3\u503c\u8868\u8fbe\u5f0f\r\n- \u8868\u8fbe\u5f0f value \u662f\u5177\u540d\u7684\u53f3\u503c\u5f15\u7528\u5bf9\u8c61\uff0cvalue \u4e5f\u53ef\u4ee5\u53d6\u5730\u5740\uff0c\u6240\u4ee5 \u8868\u8fbe\u5f0fvalue \u662f\u4e00\u4e2a\u5de6\u503c\uff0c\u5339\u914d\u7b2c\u4e00\u4e2a\u51fd\u6570\r\n\r\n## \u51fd\u6570\u53c2\u6570\u5339\u914d\r\n\r\n| \u53c2\u6570\u7c7b\u578b      | \u8bf4\u660e                                     |\r\n| ------------- | ---------------------------------------- |\r\n| Value&        | \u53ea\u80fd\u5339\u914d\u5de6\u503c\u8868\u8fbe\u5f0f                       |\r\n| Value&&       | \u53ea\u80fd\u7ed1\u5b9a\u53f3\u503c\u8868\u8fbe\u5f0f\uff08\u6a21\u677f\u51fd\u6570\u4e0b\u5355\u72ec\u8ba8\u8bba\uff09 |\r\n| const Value&  | \u53ef\u4ee5\u5339\u914d\u5de6\u503c\u548c\u53f3\u503c\u8868\u8fbe\u5f0f                 |\r\n| const Value&& | \u5b9e\u9645\u4e0d\u4f7f\u7528                               |\r\n\r\n\r\n## \u503c\u7c7b\u578b \r\n\r\n- \u6cdb\u5de6\u503c\uff1a \u5de6\u503c \u548c \u5c06\u4ea1\u503c\r\n- \u53f3\u503c\uff1a\u7eaf\u53f3\u503c \u548c \u5c06\u4ea1\u503c\r\n- `static_cast<Value&&>(value)` \u662f\u5c06\u4ea1\u503c\uff0c\u5e38\u89c1\u7684\u5c06\u4ea1\u503c\u662f \u51fd\u6570\u7684\u8fd4\u56de\u503c \r\n![types](https://github.com/0x1042/0x1042.github.io/assets/7525242/0fae6f7f-bce8-41b6-ad2d-45cc312ec7b4)\r\n\r\n\r\n## \u4e07\u80fd\u5f15\u7528 **universal reference** \r\n\r\n> \u5982\u4f55\u533a\u5206 Arg&& \u662f\u53f3\u503c\u5f15\u7528\u8fd8\u662f\u4e07\u80fd\u5f15\u7528\uff1f\r\n\r\n- **\u5982\u679c Arg&& \u662f\u6a21\u677f\u53c2\u6570\u6216\u8005 auto\uff0c\u5219\u662f\u4e07\u80fd\u5f15\u7528\uff0c\u300c\u65e2\u53ef\u4ee5\u63a5\u53d7\u5de6\u503c\uff0c\u4e5f\u53ef\u4ee5\u63a5\u53d7\u53f3\u503c\u300d\uff0c\u5426\u5219\u4e3a\u53f3\u503c\u5f15\u7528**\r\n- **\u4e07\u80fd\u5f15\u7528\u5728\u7c7b\u578b\u63a8\u5bfc\u8bed\u5883\u4e0b\uff0c\u53ef\u4ee5\u4fdd\u7559\u7c7b\u578b\u7684cv\u9650\u5b9a\u7b26\u300cconst\u548cvolatile\u300d\u548c\u503c\u7c7b\u522b**\r\n\r\n## \u5f15\u7528\u6298\u53e0 **reference collapsing**\r\n\r\n> \u4e3a\u4e86\u89e3\u51b3 reference to reference \u7684\u95ee\u9898\r\n\r\nc++ \u4e2d\u4e0d\u5141\u8bb8\u6307\u5411\u5f15\u7528\u7684\u5f15\u7528\uff0c\u5bf9\u4e8e\u6307\u5411\u5f15\u7528\u7684\u5f15\u7528\u4f1a\u88ab\u7b80\u5316\uff0c\u63a8\u5bfc\u89c4\u5219\u5982\u4e0b \r\n\r\n```cpp\r\ntemplate <typename T>\r\nvoid Example(T && input) {}\r\n```\r\n\r\n- \u51fd\u6570\u5f62\u53c2\u662f\u5de6\u503c\uff0cT&\uff0c\u4f20\u5165\u7684\u5b9e\u53c2\u662f\u5de6\u503c\uff0c\u5373input \u662f `T& &`\r\n- \u51fd\u6570\u5f62\u53c2\u662f\u5de6\u503c\uff0cT&\uff0c\u4f20\u5165\u7684\u5b9e\u53c2\u662f\u53f3\u503c\uff0c\u5373input \u662f `T& &&`\r\n- \u51fd\u6570\u5f62\u53c2\u662f\u53f3\u503c\uff0cT&&\uff0c\u4f20\u5165\u7684\u5b9e\u53c2\u662f\u5de6\u503c\uff0c\u5373input \u662f `T&& &`\r\n- \u51fd\u6570\u5f62\u53c2\u662f\u53f3\u503c\uff0cT&&\uff0c\u4f20\u5165\u7684\u5b9e\u53c2\u662f\u53f3\u503c\uff0c\u5373input \u662f `T&& &&`\r\n\r\n\u63a8\u5bfc\u89c4\u5219\u662f\uff1a **\u4ec5\u5f53\u4e24\u4e2a\u90fd\u662f\u53f3\u503c\u5f15\u7528\u65f6\uff0c\u63a8\u5bfc\u4e3a\u53f3\u503c\uff0c\u5176\u4f59\u60c5\u51b5\u4e3a\u5de6\u503c**\uff0c\u4e5f\u5c31\u662f `T&& &&`\u4e3a\u53f3\u503c\uff0c\u5176\u4ed6\u60c5\u51b5\u4e3a\u5de6\u503c \r\n\r\n\r\n## \u5b8c\u7f8e\u8f6c\u53d1 **perfect forward** \r\n\r\n> \u5728\u4f20\u53c2\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4fdd\u7559\u53c2\u6570\u7684\u539f\u59cb\u7c7b\u578b \r\n\r\n```cpp\r\nvoid foo(int & val);\r\nvoid foo(int && val);\r\n\r\ntemplate <typename T> void call_foo(T && t) {\r\n    foo(std::forward<T>(t));\r\n}\r\n```\r\n\r\n\u5982\u4f55\u5b9e\u73b0\u7684\uff1f\r\n\r\n```cpp\r\ntemplate <class _Tp>\r\n_LIBCPP_NODISCARD_EXT inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR _Tp&&\r\nforward(_LIBCPP_LIFETIMEBOUND __libcpp_remove_reference_t<_Tp>& __t) _NOEXCEPT {\r\n  return static_cast<_Tp&&>(__t);\r\n}\r\n\r\ntemplate <class _Tp>\r\n_LIBCPP_NODISCARD_EXT inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR _Tp&&\r\nforward(_LIBCPP_LIFETIMEBOUND __libcpp_remove_reference_t<_Tp>&& __t) _NOEXCEPT {\r\n  static_assert(!is_lvalue_reference<_Tp>::value, \"cannot forward an rvalue as an lvalue\");\r\n  return static_cast<_Tp&&>(__t);\r\n}\r\n```\r\n\r\n- Tp \u662f\u5de6\u503c\uff0c `static_cast<_Tp&&>(__t)` \u540e\u662f T& &&\uff0c\u6309\u7167\u5f15\u7528\u6298\u53e0\u89c4\u5219\uff0c`T& && -> T&`, Tp\u662f\u5de6\u503c \r\n- Tp \u662f\u53f3\u503c\uff0c `static_cast<_Tp&&>(__t)` \u540e\u662f T&& &&\uff0c\u6309\u7167\u5f15\u7528\u6298\u53e0\u89c4\u5219\uff0c`T&& && -> T&&`, Tp\u662f\u53f3\u503c \u3002", "top": 0, "createdAt": 1699692495, "style": "", "script": "", "createdDate": "2023-11-11", "dateLabelColor": "#A333D0"}, "P5": {"htmlDir": "docs/post/er-\u3001c++-zhong-de-lei-xing-tui-dao.html", "label": "c++", "labelColor": "#BE8008", "postTitle": "\u4e8c\u3001c++\u4e2d\u7684\u7c7b\u578b\u63a8\u5bfc", "postUrl": "post/er-%E3%80%81c%2B%2B-zhong-de-lei-xing-tui-dao.html", "postSourceUrl": "https://github.com/0x1042/0x1042.github.io/issues/5", "commentNum": 0, "description": "- [\u7c7b\u578b\u63a8\u5bfc](#\u7c7b\u578b\u63a8\u5bfc)\r\n- [`auto`](#auto)\r\n- [`decltype`](#decltype)\r\n  - [\u4e0d\u5e26\u62ec\u53f7(\u83b7\u53d6\u7684\u662f\u6807\u8bc6\u7b26 \u5b9a\u4e49\u65f6\u7684\u7c7b\u578b)](#\u4e0d\u5e26\u62ec\u53f7\u83b7\u53d6\u7684\u662f\u6807\u8bc6\u7b26-\u5b9a\u4e49\u65f6\u7684\u7c7b\u578b)\r\n  - [\u5e26\u62ec\u53f7 \u83b7\u53d6\u8868\u8fbe\u5f0f\u7684\u503c\u7c7b\u522b](#\u5e26\u62ec\u53f7-\u83b7\u53d6\u8868\u8fbe\u5f0f\u7684\u503c\u7c7b\u522b)\r\n- [`decltype(auto)`](#decltypeauto)\r\n- [`CTAD` \u7c7b\u6a21\u677f\u53c2\u6570\u63a8\u5bfc](#ctad-\u7c7b\u6a21\u677f\u53c2\u6570\u63a8\u5bfc)\r\n\r\n# \u7c7b\u578b\u63a8\u5bfc \r\n\r\n# `auto`\r\n\r\n**auto \u662f\u503c\u8bed\u4e49\uff0c\u5373\u901a\u8fc7\u79fb\u52a8/\u62f7\u8d1d\u6784\u9020\uff0c\u4e0d\u4f1a\u4fdd\u7559cv\u5c5e\u6027\uff0c\u5982\u679c\u9700\u8981\u4fdd\u7559cv\u5c5e\u6027\uff0c\u9700\u8981\u663e\u5f0f\u6307\u5b9a**\r\n\r\n```cpp\r\nclass Cat {};\r\n\r\nauto get_cat() -> Cat *;\r\n\r\nauto get_const_cat() -> const Cat *;\r\n\r\n\r\nCat cat{};\r\nCat * cat1 = &cat;\r\nconst Cat * cat2 = &cat;\r\n\r\nCat & lr_cat = cat;\r\nconst Cat & ltc_cat = cat;\r\nCat&& rr_cat = Cat{};\r\n```\r\n\r\n| \u8868\u8fbe\u5f0f                         | auto\u63a8\u5bfc\u7684\u7c7b\u578b |\r\n| ------------------------------ | -------------- |\r\n| `auto ccat1 = cat`             | `Cat`          |\r\n| `auto ccat2 = cat1`            | `Cat*`         |\r\n| `auto ccat3 = cat2`            | `const Cat*`   |\r\n| `auto ccat4 = get_cat()`       | `Cat*`         |\r\n| `auto ccat5 = get_const_cat()` | `const Cat*`   |\r\n| `auto ccat6 = lr_cat`          | `Cat`          |\r\n| `auto ccat7 = ltc_cat`         | `Cat`          |\r\n| `auto ccat8 = rr_cat`          | `Cat`          |\r\n| `auto & ccat9 = lr_cat`        | `Cat&`         |\r\n| `const auto & ccat10 = lr_cat` | `const Cat&`   |\r\n| `auto & ccat11 = ltc_cat`      | `const Cat&`   |\r\n| `auto && ccat12 = cat`         | `Cat&`         |\r\n| `auto && ccat13 = Cat{}`       | `Cat&&`        |\r\n\r\n\r\n# `decltype`\r\n\r\n> \u4f5c\u7528\uff1a\u83b7\u53d6 \u6807\u8bc6\u7b26\u88ab\u5b9a\u4e49\u65f6\u7684\u7c7b\u578b\u6216\u8005 \u6574\u4f53\u4f5c\u4e3a \u8868\u8fbe\u5f0f \u65f6\u7684\u503c\u7c7b\u522b\r\n\r\n- \u53c2\u6570\u5e26\u62ec\u53f7 decltype((T))\uff0c\u83b7\u53d6\u4f5c\u4e3a\u8868\u8fbe\u5f0f\u65f6\u7684 \u503c\u7c7b\u522b\r\n- \u53c2\u6570\u4e0d\u5e26\u62ec\u53f7 decltype(T), \u83b7\u53d6\u6807\u8bc6\u7b26 \u5b9a\u4e49\u65f6\u7684\u7c7b\u578b \r\n\r\n```cpp\r\nclass Student {\r\npublic:\r\n    uint32_t id{0};\r\n    std::string name;\r\n};\r\n\r\ninline void test_decltype() {\r\n    Student student;\r\n    Student * st_ptr = &student;\r\n    const Student * st_cptr = &student;\r\n    Student & st_ref = student;\r\n    Student && st_tmp = {};\r\n}\r\n```\r\n\r\n## \u4e0d\u5e26\u62ec\u53f7(\u83b7\u53d6\u7684\u662f\u6807\u8bc6\u7b26 \u5b9a\u4e49\u65f6\u7684\u7c7b\u578b)\r\n\r\n| \u8868\u8fbe\u5f0f                                            | \u7c7b\u578b             |\r\n| ------------------------------------------------- | ---------------- |\r\n| `using T1 = decltype(student)`                    | `Student`        |\r\n| `using T2 = decltype(st_ptr)`                     | `Student*`       |\r\n| `using T3 = decltype(st_cptr)`                    | `const Student*` |\r\n| `using T4 = decltype(st_ref)`                     | `Student&`       |\r\n| `using T5 = decltype(st_tmp)`                     | `Student&&`      |\r\n| `using T6 = decltype(student.id)`                 | `uint32_t`       |\r\n| `using T7 = decltype(Student{1024, \"\u5f20\u4e09\"}.name)` | `std::string`    |\r\n\r\n## \u5e26\u62ec\u53f7 \u83b7\u53d6\u8868\u8fbe\u5f0f\u7684\u503c\u7c7b\u522b\r\n\r\n| \u8868\u8fbe\u5f0f                                              | \u7c7b\u578b               |\r\n| --------------------------------------------------- | ------------------ |\r\n| `using T1 = decltype((student))`                    | `Student&`         |\r\n| `using T2 = decltype((st_ptr))`                     | `Student* &`       |\r\n| `using T3 = decltype((st_cptr))`                    | `const Student* &` |\r\n| `using T4 = decltype((st_ref))`                     | `Student&`         |\r\n| `using T5 = decltype((st_tmp))`                     | `Student&`         |\r\n| `using T6 = decltype((student.id))`                 | `uint32_t&`        |\r\n| `using T7 = decltype((Student{1024, \"\u5f20\u4e09\"}))`      | `Student`          |\r\n| `using T8 = decltype((Student{1024, \"\u5f20\u4e09\"}.name))` | `std::string&&`    |\r\n| `using T9 = decltype((++student.id))`               | `uint32_t&`        |\r\n| `using T10 = decltype((student.id++))`              | `uint32_t`         |\r\n\r\n- \u5982\u679c\u8868\u8fbe\u5f0f\u662f\u5de6\u503c\uff0c\u90a3\u4e48 `decltype((exp))` \u5c31\u662f\u5de6\u503c\u5f15\u7528\uff08T1->T6\uff09\r\n- `st_tmp`\u7684\u7c7b\u578b\u662f \u53f3\u503c\u5f15\u7528\uff0c\u4f46\u662f\u4f5c\u4e3a\u8868\u8fbe\u5f0f\uff0c\u53ef\u4ee5\u88ab\u53d6\u5730\u5740\uff0c\u6240\u4ee5\u662f\u5de6\u503c\u5f15\u7528\r\n- `T7` \u539f\u59cb\u8868\u8fbe\u5f0f\u662f\u4e00\u4e2a\u7eaf\u53f3\u503c\uff0c`decltype((exp))` \u662f\u53f3\u503c\uff08\u4e0d\u5e26\u5f15\u7528\uff09\r\n- `T8` \u662f\u4e00\u4e2a\u5c06\u4ea1\u503c\r\n- `T9` ++x\u4f5c\u4e3a\u8868\u8fbe\u5f0f\u662f\u5de6\u503c\r\n- `T10` x++\u4f5c\u4e3a\u8868\u8fbe\u5f0f\u662f\u53f3\u503c\r\n\r\n# `decltype(auto)`\r\n\r\n> \u9ed8\u8ba4\u4f7f\u7528`auto`\u65f6\uff0c\u4e22\u5931\u4e86\u5f15\u7528\u6027\u548c`cv`\u5c5e\u6027\uff0c\u82e5\u6307\u660e\u4e86 `const`\u5c5e\u6027\uff0c\u5219\u5bfc\u81f4\u7ed3\u679c\u59cb\u7ec8\u4e3a`const`\uff0c\u82e5\u91c7\u7528\u5f15\u7528\uff0c\u5219\u9700\u8981\u663e\u793a\u6307\u5b9a`auto&` \u6216\u8005 `auto&&`,\u8fd9\u53c8\u4f1a\u5bfc\u81f4\u53ea\u80fd\u8868\u73b0\u4e3a \u5f15\u7528\u8bed\u4e49\u3002", "top": 0, "createdAt": 1699714088, "style": "", "script": "", "createdDate": "2023-11-11", "dateLabelColor": "#A333D0"}, "P6": {"htmlDir": "docs/post/san-\u3001-bian-yi-shi-duo-tai.html", "label": "c++", "labelColor": "#BE8008", "postTitle": "\u4e09\u3001\u7f16\u8bd1\u65f6\u591a\u6001", "postUrl": "post/san-%E3%80%81-bian-yi-shi-duo-tai.html", "postSourceUrl": "https://github.com/0x1042/0x1042.github.io/issues/6", "commentNum": 0, "description": "# \u7f16\u8bd1\u65f6\u591a\u6001\r\n\r\n- [\u7f16\u8bd1\u65f6\u591a\u6001](#\u7f16\u8bd1\u65f6\u591a\u6001)\r\n- [type traits \u7c7b\u578b\u8403\u53d6](#type-traits-\u7c7b\u578b\u8403\u53d6)\r\n  - [\u83b7\u53d6\u7c7b\u578b\u5c5e\u6027](#\u83b7\u53d6\u7c7b\u578b\u5c5e\u6027)\r\n  - [\u7c7b\u578b\u53d8\u6362](#\u7c7b\u578b\u53d8\u6362)\r\n  - [\u6807\u7b7e\u5206\u53d1](#\u6807\u7b7e\u5206\u53d1)\r\n  - [\u8fed\u4ee3\u5668](#\u8fed\u4ee3\u5668)\r\n  - [`if constexpr`](#if-constexpr)\r\n  - [`void_t` \u5143\u51fd\u6570](#void_t-\u5143\u51fd\u6570)\r\n- [CTRTP \u5947\u5f02\u9012\u5f52\u6a21\u7248\u6a21\u5f0f](#ctrtp-\u5947\u5f02\u9012\u5f52\u6a21\u7248\u6a21\u5f0f)\r\n  - [\u4ee3\u7801\u590d\u7528](#\u4ee3\u7801\u590d\u7528)\r\n  - [\u9759\u6001\u7ed1\u5b9a](#\u9759\u6001\u7ed1\u5b9a)\r\n  - [`enable_shared_from_this`](#enable_shared_from_this)\r\n\r\n\r\n# type traits \u7c7b\u578b\u8403\u53d6\r\n\r\n> c++ \u901a\u8fc7\u6a21\u7248\u5b9e\u73b0\u6cdb\u578b\u7f16\u7a0b\uff0c\u4ece\u800c\u51cf\u8f7b\u8fd0\u884c\u65f6\u5f00\u9500\u3002", "top": 0, "createdAt": 1699778402, "style": "", "script": "", "createdDate": "2023-11-12", "dateLabelColor": "#A333D0"}, "P7": {"htmlDir": "docs/post/GDB -shi-yong- .html", "label": "c++", "labelColor": "#BE8008", "postTitle": "GDB \u4f7f\u7528 ", "postUrl": "post/GDB%20-shi-yong-%20.html", "postSourceUrl": "https://github.com/0x1042/0x1042.github.io/issues/7", "commentNum": 0, "description": "\r\n- [GDB \u4f7f\u7528](#gdb-\u4f7f\u7528)\r\n  - [\u80cc\u666f](#\u80cc\u666f)\r\n  - [GDB dump\u7ebf\u7a0b\u6808](#gdb-dump\u7ebf\u7a0b\u6808)\r\n  - [\u627e\u5230\u8d1f\u8f7d\u9ad8\u7684\u7ebf\u7a0b](#\u627e\u5230\u8d1f\u8f7d\u9ad8\u7684\u7ebf\u7a0b)\r\n  - [\u5bfb\u627e\u5bf9\u5e94\u7684\u884c\u53f7](#\u5bfb\u627e\u5bf9\u5e94\u7684\u884c\u53f7)\r\n\r\n\r\n## \u80cc\u666f\r\n\r\n> \u7ebf\u4e0a\u6d41\u91cf\u6ca1\u53d8\uff0c\u4f46\u662f\u51fa\u73b0\u77ac\u65f6\u8d1f\u8f7d\u5448\u76f4\u7ebf\u4e0a\u6da8\uff0c1\uff5e2\u5206\u949f\u6574\u4e2a\u670d\u52a1\u4e0d\u53ef\u7528\u3002", "top": 0, "createdAt": 1700225851, "style": "", "script": "", "createdDate": "2023-11-17", "dateLabelColor": "#A333D0"}, "P8": {"htmlDir": "docs/post/xu-ni-ji-shi-yong-su-zhu-ji-dai-li.html", "label": "\u65e5\u5e38", "labelColor": "#F0A3E9", "postTitle": "\u865a\u62df\u673a\u4f7f\u7528\u5bbf\u4e3b\u673a\u4ee3\u7406", "postUrl": "post/xu-ni-ji-shi-yong-su-zhu-ji-dai-li.html", "postSourceUrl": "https://github.com/0x1042/0x1042.github.io/issues/8", "commentNum": 0, "description": "# mac \u865a\u62df\u673a\u4f7f\u7528\u4ee3\u7406 \r\n\r\n- [mac \u865a\u62df\u673a\u4f7f\u7528\u4ee3\u7406](#mac-\u865a\u62df\u673a\u4f7f\u7528\u4ee3\u7406)\r\n  - [\u5b89\u88c5`gost`](#\u5b89\u88c5gost)\r\n  - [\u6267\u884cgost](#\u6267\u884cgost)\r\n  - [\u865a\u62df\u673a\u914d\u7f6e](#\u865a\u62df\u673a\u914d\u7f6e)\r\n\r\n## \u5b89\u88c5`gost`\r\n\r\n```shell\r\n# \u5b89\u88c5gost \r\n\r\ngit clone https://github.com/go-gost/gost.git\r\ncd gost/cmd/gost\r\ngo build\r\n```\r\n\r\n## \u6267\u884cgost\r\n\r\n```shell\r\n# \u5bbf\u4e3b\u673a\u4fa7\u57288080\u7aef\u53e3\u7684HTTP\u4ee3\u7406\u670d\u52a1\uff0c\u4f7f\u7528\u672c\u5730\u76841087\u7aef\u53e3\u505a\u4e3a\u4e0a\u7ea7\u4ee3\u7406\u8fdb\u884c\u8f6c\u53d1\r\n./gost -L http://:8080 -F http://127.0.0.1:1087\r\n```\r\n\r\n## \u865a\u62df\u673a\u914d\u7f6e\r\n\r\n```shell\r\n\r\n# shell\r\nexport https_proxy=http://10.0.0.67:8080 http_proxy=http://10.0.0.67:8080\r\n# git \r\ngit config --global http.proxy 'http://10.0.0.67:8080'\r\n```\u3002", "top": 0, "createdAt": 1700297184, "style": "", "script": "", "createdDate": "2023-11-18", "dateLabelColor": "#A333D0"}, "P9": {"htmlDir": "docs/post/si-\u3001concept.html", "label": "c++", "labelColor": "#BE8008", "postTitle": "\u56db\u3001concept", "postUrl": "post/si-%E3%80%81concept.html", "postSourceUrl": "https://github.com/0x1042/0x1042.github.io/issues/9", "commentNum": 0, "description": "# concept\r\n\r\n- [concept](#concept)\r\n  - [\u57fa\u672c\u5b9a\u4e49\u548c\u4f7f\u7528](#\u57fa\u672c\u5b9a\u4e49\u548c\u4f7f\u7528)\r\n  - [\u7ea6\u675f\u8868\u8fbe\u5f0f](#\u7ea6\u675f\u8868\u8fbe\u5f0f)\r\n  - [`requires` \u8868\u8fbe\u5f0f](#requires-\u8868\u8fbe\u5f0f)\r\n  - [`requires` \u5b50\u53e5](#requires-\u5b50\u53e5)\r\n  - [`concepts` header](#concepts-header)\r\n\r\n## \u57fa\u672c\u5b9a\u4e49\u548c\u4f7f\u7528\r\n\r\n- \u57fa\u672c\u5b9a\u4e49\r\n```cpp\r\n// \u8bed\u6cd5\u683c\u5f0f\r\n// template<typename T>\r\n// concept concept_name = constraint-expression(\u7ea6\u675f\u8868\u8fbe\u5f0f);\r\n\r\ntemplate <typename T>\r\nconcept integral = std::is_integral_v<T>;\r\n\r\ntemplate <typename T>\r\nconcept floating_point = std::is_floating_point_v<T>;\r\n\r\ntemplate <typename T>\r\nconcept C = std::is_integral_v<T> || (sizeof(T) > 1);\r\n\r\ntemplate <typename T, typename U>\r\nconcept Derived = std::is_base_of_v<U, T>;\r\n\r\n```\r\n\r\n- \u57fa\u672c\u4f7f\u7528 **\u4f7f\u7528`concept_name` \u66ff\u6362 `typename`**\r\n\r\n```cpp\r\n\r\n// \u5b9a\u4e49 \r\nclass Base {\r\npublic:\r\n    [[nodiscard]] auto getValue() const -> int32_t { return value; }\r\n\r\n    explicit Base(const int32_t value)\r\n        : value(value) {\r\n    }\r\n\r\nprivate:\r\n    int32_t value;\r\n};\r\n\r\ntemplate <typename T>\r\nconcept DerivedBase = std::is_base_of_v<Base, T>;\r\n\r\n// \u4f7f\u7528concept_name \u66ff\u6362 typename\r\ntemplate <DerivedBase T>\r\nauto doGetValue(const T & t) -> int32_t {\r\n    return t.getValue();\r\n}\r\n\r\nclass DerivedClass : public Base {\r\npublic:\r\n    explicit DerivedClass(int32_t value)\r\n        : Base(value) {\r\n    }\r\n\r\n    [[nodiscard]] auto getValue() const -> int32_t { return 1024; }\r\n};\r\n```\r\n\r\n## \u7ea6\u675f\u8868\u8fbe\u5f0f\r\n\r\n- \u5408\u53d6\u5f0f conjunctions\uff0c\u903b\u8f91\u4e0e \r\n```cpp\r\ntemplate <typename T>\r\nconcept integral = std::is_integral_v<T>;\r\n\r\ntemplate <typename T>\r\nconcept signed_int = integral<T> && std::is_signed_v<T>;\r\n\r\n```\r\n- \u6790\u53d6\u5f0f disjunctions\uff0c\u903b\u8f91\u6216\r\n\r\n```cpp\r\ntemplate <typename T>\r\nconcept integral = std::is_integral_v<T>;\r\n\r\ntemplate <typename T>\r\nconcept floating_point = std::is_floating_point_v<T>;\r\n\r\ntemplate <typename T>\r\nconcept number = integral<T> || floating_point<T>;\r\n\r\n```\r\n- \u539f\u5b50\u7ea6\u675f atomic constraints \r\n\r\n```cpp\r\n```\r\n\r\n## `requires` \u8868\u8fbe\u5f0f\r\n\r\n> \u9664\u4e86\u4f7f\u7528`type traits` \u5b9a\u4e49\u6982\u5ff5\u4e4b\u5916\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 `requires` \u8868\u8fbe\u5f0f\u6765\u8868\u8fbe\u5bf9\u6a21\u677f\u53c2\u6570\u53ca\u5176\u5bf9\u8c61\u7684\u7279\u5f81\u8981\u6c42\r\n> \u6210\u5458\u51fd\u6570\u3001\u81ea\u7531\u51fd\u6570\u3001\u5173\u8054\u7c7b\u578b\u7b49\r\n\r\n- \u57fa\u672c\u8bed\u6cd5 \r\n\r\n```cpp\r\n\r\nrequires(\u53ef\u9009\u53c2\u6570\u5217\u8868) {\r\n    \u8868\u8fbe\u5f0f1\r\n    \u8868\u8fbe\u5f0f2\r\n}\r\n\r\n```\r\n\r\n- \u57fa\u672c\u7ea6\u675f \r\n```cpp\r\ntemplate <typename T>\r\nconcept Machine = requires(T t)\r\n{\r\n    // \u8981\u6c42\u5b58\u5728\u540c\u540d\u7684\u6210\u5458\u51fd\u6570\r\n    t.powerup();\r\n\r\n    t.powerDown();\r\n    // \u8981\u6c42\u5b58\u5728\u6210\u5458\u53d8\u91cfname\r\n    t.name;\r\n    // \u8981\u6c42\u5b58\u5728\u9759\u6001\u6210\u5458count\r\n    T::count;\r\n};\r\n\r\ntemplate <typename T>\r\nconcept Animal = requires(T t1, T t2, T t3)\r\n{\r\n    // \u8981\u6c42\u5b58\u5728 name \u6210\u5458\u53d8\u91cf\r\n    t1.name;\r\n\r\n    // \u8981\u6c42\u80fd\u591f\u8fdb\u884c\u5224\u7b49\u64cd\u4f5c\r\n    t1 == t2;\r\n\r\n    // \u8981\u6c42\u80fd\u591f\u8fdb\u884c \u52a0\u3001\u4e58\u64cd\u4f5c\r\n    t1 + t2 * t3;\r\n};\r\n\r\n```\r\n\r\n- \u7c7b\u578b\u7ea6\u675f \r\n```cpp\r\ntemplate <typename T>\r\nconcept C2 = requires\r\n{\r\n    // \u8981\u6c42\u5b58\u5728\u7c7b\u578b\u6210\u5458 type\r\n    typename T::type;\r\n\r\n    // \u8981\u6c42\u80fd\u591f\u4e0evector \u7ec4\u5408\uff0c\u5b9e\u73b0\u6a21\u677f\u5b9e\u4f8b\u5316\r\n    typename std::vector<T>;\r\n};\r\n```\r\n\r\n- \u7ec4\u5408\u7ea6\u675f **\u9700\u8981\u5927\u62ec\u53f7\u62ec\u8d77\u6765**\r\n```cpp\r\ntemplate <typename T>\r\nconcept C3 = requires(T t1, T t2) {\r\n    // \u8868\u8fbe\u5f0f\u4e0d\u80fd\u6709\u5f02\u5e38\r\n    { t1 = std::move(t2) } noexcept;\r\n\r\n    // \u8981\u6c42\u63a5\u53e3\u8fd4\u56de\u7c7b\u578b\u4e0eT\u4e00\u81f4\r\n    { t1.get_info() } -> std::same_as<T>;\r\n\r\n    // \u8981\u6c42\u63a5\u53e3\u8fd4\u56de\u7c7b\u578b\u80fd\u591f\u8f6c\u6362\u6210float\r\n    { t1.get_unit() } -> std::convertible_to<float>;\r\n};\r\n\r\n```\r\n\r\n- \u5d4c\u5957\u7ea6\u675f \r\n```cpp\r\ntemplate <typename T>\r\nconcept C3 = requires {\r\n    requires sizeof(T) > 4;\r\n};\r\n```\r\n\r\n## `requires` \u5b50\u53e5\r\n\r\n> \u7528\u4e8e\u5224\u65ad\u6240\u7ea6\u675f\u7684\u7c7b\u578b\u5728\u4e0a\u4e0b\u6587\u4e2d \u662f\u5426\u53ef\u884c\r\n\r\n**\u4e0a\u4e0b\u6587** \u611f\u89c9\u662f\u5e9f\u8bdd\uff0cconcept \u4e0d\u5c31\u662f\u4e3a\u4e86\u7b80\u5316\u6a21\u677f\u7f16\u7a0b\u4e48\uff0c\u80af\u5b9a\u53ea\u80fd\u5728\u6a21\u677f\u7f16\u7a0b\u4e2d\u5b58\u5728 \r\n\r\n1. \u51fd\u6570\u6a21\u677f\r\n2. \u6a21\u677f\u7c7b \r\n3. \u6a21\u677f\u7c7b\u7684\u6210\u5458\u51fd\u6570 \r\n\r\n```cpp\r\n// \u8fd9\u91cc\u662f require \u5b50\u53e5(\u533a\u522b\u4e0erequire \u8868\u8fbe\u5f0f)\r\ntemplate <typename T>\r\n    requires std::is_integral_v<T>\r\nauto add(T t1, T t2) -> T {\r\n    return t1 + t2;\r\n}\r\n\r\n// \u7f16\u8bd1\u6210\u529f\r\nadd(1, 2);\r\n//  note: candidate template ignored: constraints not satisfied [with T = double]\r\n//  note: because 'std::is_integral_v<double>' evaluated to false\r\n// add(1.2, 2.2);\r\n```\r\n\r\n## `concepts` header\r\n\r\n```cpp\r\n\r\n// \u60f3\u540c\u7c7b\r\ntemplate <typename T, typename U>\r\nconcept same_as = std::is_same_v<T, U>;\r\n\r\n// \u662f\u5426\u662f\u6d3e\u751f\u5173\u7cfb \r\ntemplate <typename Base, typename Derived>\r\nconcept derived_from = std::is_base_of_v<Base, Derived> && std::is_convertible_v<std::add_cv_t<Derived *>, std::add_cv_t<Base *>>;\r\n\r\n// \u662f\u5426\u53ef\u8f6c\u6362\r\ntemplate <typename F, typename T>\r\nconcept convertible_to = std::is_convertible_v<F, T> && requires(std::add_rvalue_reference_t<F> (&f)()) { static_cast<T>(f()); };\r\n\r\n```\u3002", "top": 0, "createdAt": 1700308307, "style": "", "script": "", "createdDate": "2023-11-18", "dateLabelColor": "#A333D0"}, "P10": {"htmlDir": "docs/post/wu-\u3001-xie-cheng-ji-ben-shi-yong.html", "label": "c++", "labelColor": "#BE8008", "postTitle": "\u4e94\u3001\u534f\u7a0b\u57fa\u672c\u4f7f\u7528", "postUrl": "post/wu-%E3%80%81-xie-cheng-ji-ben-shi-yong.html", "postSourceUrl": "https://github.com/0x1042/0x1042.github.io/issues/10", "commentNum": 0, "description": "# \u534f\u7a0b ~~\u5165\u95e8~~\r\n\r\n- [\u534f\u7a0b ~~\u5165\u95e8~~](#\u534f\u7a0b-\u5165\u95e8)\r\n  - [\u5b9a\u4e49](#\u5b9a\u4e49)\r\n  - [\u57fa\u672c\u539f\u7406](#\u57fa\u672c\u539f\u7406)\r\n    - [\u4e00\u3001\u534f\u7a0b\u6808\u5e27(\u7f16\u8bd1\u5668\u751f\u6210)](#\u4e00\u534f\u7a0b\u6808\u5e27\u7f16\u8bd1\u5668\u751f\u6210)\r\n    - [\u4e8c\u3001\u521b\u5efa\u534f\u7a0b](#\u4e8c\u521b\u5efa\u534f\u7a0b)\r\n    - [\u4e09\u3001\u534f\u7a0b\u6062\u590d(\\_\\_fibonacciResume)](#\u4e09\u534f\u7a0b\u6062\u590d__fibonacciresume)\r\n    - [\u56db\u3001\u9500\u6bc1](#\u56db\u9500\u6bc1)\r\n- [\u5b9e\u73b0\u4e00\u4e2a\u534f\u7a0b](#\u5b9e\u73b0\u4e00\u4e2a\u534f\u7a0b)\r\n  - [\u5b9a\u4e49 `Generator`](#\u5b9a\u4e49-generator)\r\n  - [\u5b9a\u4e49 `promise_type`](#\u5b9a\u4e49-promise_type)\r\n  - [\u5b9a\u4e49\u534f\u7a0b\u51fd\u6570](#\u5b9a\u4e49\u534f\u7a0b\u51fd\u6570)\r\n- [\u53c2\u8003](#\u53c2\u8003)\r\n\r\n\r\n## \u5b9a\u4e49 \r\n\r\nc++20\u7684\u534f\u7a0b\u5b9a\u4e49\u662f\u4e00\u4e2a**\u53ef\u6682\u505c\u3001\u53ef\u6062\u590d**\u7684\u51fd\u6570\uff0c\u5177\u4f53\u5230\u5b9e\u73b0\u4e0a\uff0c\u5982\u679c\u51fd\u6570\u5305\u542b`co_await\u3001co_yield\u3001co_return` \u5173\u952e\u5b57\u4e4b\u4e00\uff0c\u5c31\u4f1a\u88ab\u8ba4\u4e3a\u662f\u534f\u7a0b\r\n\r\n![coroutine](https://github.com/0x1042/0x1042.github.io/assets/7525242/c2954b77-82a6-4a8f-b3a8-740adb8a9852)\r\n\r\n\r\n- \u6682\u505c\uff0c\u5373\u610f\u5473\u7740\u9700\u8981\u4fdd\u5b58\u51fd\u6570\u6267\u884c\u8fc7\u7a0b\u4e2d\u4ea7\u751f\u7684\u4e0a\u4e0b\u6587\r\n- \u6062\u590d\uff0c\u8c03\u7528\u65b9\u53ef\u4ee5\u83b7\u53d6\u5230\u8fd9\u4e2a\u534f\u7a0b\u5728\u5806\u4e0a\u7684\u63a7\u5236\u5165\u53e3\r\n\r\n| \u5173\u952e\u5b57      | \u8bf4\u660e         |\r\n| ----------- | ------------ |\r\n| `co_await`  | \u6302\u8d77         |\r\n| `co_yield`  | \u6302\u8d77\u5e76\u8fd4\u56de\u503c |\r\n| `co_return` | \u7ed3\u675f\u534f\u7a0b     |\r\n\r\n## \u57fa\u672c\u539f\u7406 \r\n\r\n\u53c2\u8003 [C++20 Coroutine][1],[C++20\u534f\u7a0b][2].  \u6838\u5fc3\u662f\u6709\u7f16\u8bd1\u5668\u9488\u5bf9\u534f\u7a0b\u51fd\u6570\u505apatch\uff0c\u751f\u6210\u65b0\u7684\u4ee3\u7801\uff0c\u533a\u522b\u4e8e\u6709\u6808\u534f\u7a0b\uff0c\u9700\u8981\u6709\u5bf9\u5e94\u7684runtime\u6765\u8c03\u5ea6.\r\n\r\n\u53ef\u4ee5\u5728 [cppinsights.io](https://cppinsights.io) \u4e0a\u6253\u5f00 `Show coroutine transformation` \u9009\u9879\uff0c\u67e5\u770b\u8be6\u7ec6\u7684\u7ec6\u8282\uff0c\u751f\u6210\u7684\u7ed3\u679c\u4e2d\u6709\u6ce8\u91ca\uff0c\u662f\u4e00\u4e2a\u8fd1\u4f3c\u7684\u7ed3\u679c\r\n\r\n### \u4e00\u3001\u534f\u7a0b\u6808\u5e27(\u7f16\u8bd1\u5668\u751f\u6210)\r\n\r\n```cpp\r\nstruct __fibonacciFrame\r\n{\r\n  void (*resume_fn)(__fibonacciFrame *);  // \u534f\u7a0b\u6062\u590d\u51fd\u6570 \r\n  void (*destroy_fn)(__fibonacciFrame *); // \u534f\u7a0b\u9500\u6bc1\u51fd\u6570 \r\n  std::coroutine_traits<std::coroutine_handle<promise>, int>::promise_type __promise; // \u534f\u7a0b\u7684promise_type\r\n  int __suspend_index;\r\n  bool __initial_await_suspend_called;\r\n  int a;\r\n  int i;\r\n  int j;\r\n  std::suspend_never __suspend_47_27;\r\n  std::suspend_always __suspend_51_9;\r\n  std::suspend_always __suspend_47_27_1;\r\n};\r\n```\r\n\r\n### \u4e8c\u3001\u521b\u5efa\u534f\u7a0b\r\n\r\n> \u8c03\u7528\u65b9\u8c03\u7528\u534f\u7a0b\u51fd\u6570\u65f6(`fibonacci()`)\uff0c\u7f16\u8bd1\u5668\u4f1a\u751f\u6210\u7c7b\u4f3c\u4e0b\u9762\u7684\u4ee3\u7801, \u8fd9\u4e2a\u51fd\u6570\u7684\u8fd4\u56de\u503c\u65f6 `std::coroutine_handle<promise>`,\u4e5f\u5c31\u662f\u4e0a\u9762\u8bf4\u7684 \u534f\u7a0b\u7684\u63a7\u5236\u70b9(\u53e5\u67c4)\r\n> \u800c\u8fd9\u4e2a\u8fd4\u56de\u503c\u662f\u901a\u8fc7 \u534f\u7a0b\u7684 promise_type \u5bf9\u5e94\u7684 get_return_object \u51fd\u6570\u83b7\u53d6\r\n\r\n```cpp\r\nstd::coroutine_handle<promise> fibonacci(int a)\r\n{\r\n  /* Allocate the frame including the promise */\r\n  /* Note: The actual parameter new is __builtin_coro_size */\r\n  __fibonacciFrame * __f = reinterpret_cast<__fibonacciFrame *>(operator new(sizeof(__fibonacciFrame)));\r\n  __f->__suspend_index = 0;\r\n  __f->__initial_await_suspend_called = false;\r\n  __f->a = std::forward<int>(a);\r\n  \r\n  /* Construct the promise. */\r\n  new (&__f->__promise)std::coroutine_traits<std::coroutine_handle<promise>, int>::promise_type{__f->a};\r\n  \r\n  /* Forward declare the resume and destroy function. */\r\n  void __fibonacciResume(__fibonacciFrame * __f);\r\n  void __fibonacciDestroy(__fibonacciFrame * __f);\r\n  \r\n  /* Assign the resume and destroy function pointers. */\r\n  __f->resume_fn = &__fibonacciResume;\r\n  __f->destroy_fn = &__fibonacciDestroy;\r\n  \r\n  /* Call the made up function with the coroutine body for initial suspend.\r\n     This function will be called subsequently by coroutine_handle<>::resume()\r\n     which calls __builtin_coro_resume(__handle_) */\r\n  __fibonacciResume(__f);\r\n  \r\n  \r\n  return __f->__promise.get_return_object();\r\n}\r\n```\r\n\r\n\r\n### \u4e09\u3001\u534f\u7a0b\u6062\u590d(__fibonacciResume)\r\n\r\n> \u8fd9\u4e2a\u662f\u534f\u7a0b\u7684\u6838\u5fc3\u6267\u884c\u903b\u8f91\uff0c\u4e5f\u5c31\u662f\u7f16\u8bd1\u5668patch\u540e\u7684\u7ed3\u679c \r\n> \u6838\u5fc3\u662f \u8c03\u7528\u534f\u7a0b\u7684promise_type\u76f8\u5173\u7684\u65b9\u6cd5  \r\n\r\n```cpp\r\n/* This function invoked by coroutine_handle<>::resume() */\r\nvoid __fibonacciResume(__fibonacciFrame * __f)\r\n{\r\n  try \r\n  {\r\n    /* Create a switch to get to the correct resume point */\r\n    switch(__f->__suspend_index) {\r\n      case 0: break;\r\n      case 1: goto __resume_fibonacci_1;\r\n      case 2: goto __resume_fibonacci_2;\r\n    }\r\n    \r\n    /* co_await insights.cpp:47 */\r\n    __f->__suspend_47_27 = __f->__promise.initial_suspend();\r\n    if(!__f->__suspend_47_27.await_ready()) {\r\n      __f->__suspend_47_27.await_suspend(std::coroutine_handle<promise>::from_address(static_cast<void *>(__f)).operator std::coroutine_handle<void>());\r\n      __f->__suspend_index = 1;\r\n      __f->__initial_await_suspend_called = true;\r\n      return;\r\n    } \r\n    \r\n    __resume_fibonacci_1:\r\n    __f->__suspend_47_27.await_resume();\r\n    __f->i = 1;\r\n    __f->j = __f->a;\r\n    while(1) {\r\n      std::tie(__f->i, __f->j).operator=(std::make_pair(__f->j, __f->i + __f->j));\r\n      \r\n      /* co_yield insights.cpp:51 */\r\n      __f->__suspend_51_9 = __f->__promise.yield_value(__f->j);\r\n      if(!__f->__suspend_51_9.await_ready()) {\r\n        __f->__suspend_51_9.await_suspend(std::coroutine_handle<promise>::from_address(static_cast<void *>(__f)).operator std::coroutine_handle<void>());\r\n        __f->__suspend_index = 2;\r\n        return;\r\n      } \r\n      \r\n      __resume_fibonacci_2:\r\n      __f->__suspend_51_9.await_resume();\r\n    }\r\n    \r\n    goto __final_suspend;\r\n  } catch(...) {\r\n    if(!__f->__initial_await_suspend_called) {\r\n      throw ;\r\n    } \r\n    \r\n    __f->__promise.unhandled_exception();\r\n  }\r\n  \r\n  __final_suspend:\r\n  \r\n  /* co_await insights.cpp:47 */\r\n  __f->__suspend_47_27_1 = __f->__promise.final_suspend();\r\n  if(!__f->__suspend_47_27_1.await_ready()) {\r\n    __f->__suspend_47_27_1.await_suspend(std::coroutine_handle<promise>::from_address(static_cast<void *>(__f)).operator std::coroutine_handle<void>());\r\n  } \r\n  \r\n  ;\r\n}\r\n```\r\n\r\n### \u56db\u3001\u9500\u6bc1 \r\n\r\n```cpp\r\n/* This function invoked by coroutine_handle<>::destroy() */\r\nvoid __fibonacciDestroy(__fibonacciFrame * __f)\r\n{\r\n  /* destroy all variables with dtors */\r\n  __f->~__fibonacciFrame();\r\n  /* Deallocating the coroutine frame */\r\n  /* Note: The actual argument to delete is __builtin_coro_frame with the promise as parameter */\r\n  operator delete(static_cast<void *>(__f));\r\n}\r\n```\r\n\r\n**\u4ece\u7f16\u8bd1\u5668\u751f\u6210\u7684\u4ee3\u7801\u770b\uff0c\u5982\u679c\u8981\u81ea\u5df1\u5b9e\u73b0\u534f\u7a0b\uff0c\u5c31\u9700\u8981\u81ea\u5b9a\u4e49\u8fd9\u4e2a\u534f\u7a0b\u7684promise_type**\r\n\r\n`promise_type \u5fc5\u987b\u5305\u542b\u4e00\u4e0b\u6210\u5458\u51fd\u6570`\r\n\r\n```cpp\r\nSOME_TYPE get_return_object();//\u7528\u4e8e\u5f97\u5230\u534f\u7a0b\u51fd\u6570\u5f00\u59cb\u6267\u884c\u7684\u8fd4\u56de\u503c\r\nSOME_TYPE initial_suspend();//\u7528\u4e8e\u534f\u7a0b\u51fd\u6570\u5f00\u59cb\u6267\u884c\u65f6\u6267\u884c\u6682\u505c\u64cd\u4f5c\r\nvoid return_void();//\u534f\u7a0b\u51fd\u6570\u5185\u90e8co_return\u7ec8\u6b62\u8fd4\u56devoid\u65f6\u6267\u884c\u7684\u64cd\u4f5c\uff08\u548c\u4e0b\u9762return_value\u540c\u65f6\u53ea\u80fd\u6709\u4e00\u4e2a\u5b58\u5728\uff09\r\nvoid return_value(SOME_TYPE);//\u534f\u7a0b\u51fd\u6570\u5185\u90e8co_return\u7ec8\u6b62\u8fd4\u56de\u975evoid\u503c\u65f6\u6267\u884c\u7684\u64cd\u4f5c\r\nSOME_TYPE final_suspend()noexcept;//\u7528\u4e8e\u534f\u7a0b\u51fd\u6570\u7ed3\u675f\u6267\u884c\u65f6\u6267\u884c\u6682\u505c\u64cd\u4f5c\r\nvoid unhandled_exception();//\u7528\u4e8e\u534f\u7a0b\u51fd\u6570\u5185\u90e8\u6709\u672a\u63a5\u4f4f\u7684\u5f02\u5e38\u65f6\u6267\u884c\r\nauto ield_value();\r\n```\r\n\r\n\r\n# \u5b9e\u73b0\u4e00\u4e2a\u534f\u7a0b \r\n\r\n## \u5b9a\u4e49 `Generator`\r\n\r\n**\u7ea6\u675f\u8303\u578b\u7684\u7c7b\u578b\u7ea6\u675f\u662f\u65e0\u7b26\u53f7\u6574\u6570**\r\n\r\n```cpp\r\ntemplate <typename T>\r\nconcept integral = std::is_integral_v<T> && !std::is_signed_v<T>;\r\n\r\ntemplate <integral T>\r\nstruct FibPromise;\r\n\r\ntemplate <integral T>\r\nstruct FibGenerator {\r\n    using promise_type = FibPromise<T>;\r\n\r\n    std::coroutine_handle<promise_type> handler;\r\n\r\n    auto next() -> int {\r\n        handler.resume();\r\n        return handler.promise().value;\r\n    }\r\n\r\n    explicit FibGenerator(promise_type * p)\r\n        : handler{std::coroutine_handle<promise_type>::from_promise(*p)} {\r\n    }\r\n\r\n    ~FibGenerator() {\r\n        handler.destroy();\r\n    }\r\n};\r\n```\r\n\r\n## \u5b9a\u4e49 `promise_type`\r\n\r\n```cpp\r\ntemplate <integral T>\r\nstruct FibPromise {\r\n    std::exception_ptr exception;\r\n\r\n    FibPromise() = default;\r\n\r\n    FibPromise(T val)\r\n        : value(val) {\r\n    }\r\n\r\n    FibGenerator<T> get_return_object() { return FibGenerator{this}; }\r\n\r\n    auto initial_suspend() noexcept -> std::suspend_always { return {}; }\r\n\r\n    auto final_suspend() noexcept -> std::suspend_always { return {}; }\r\n\r\n    auto yield_value(T val) -> std::suspend_always {\r\n        value = val;\r\n        return {};\r\n    }\r\n\r\n    auto return_value(T val) -> std::suspend_always {\r\n        value = val;\r\n        return {};\r\n    }\r\n    // void return_void() {}\r\n\r\n    void unhandled_exception() { exception = std::current_exception(); }\r\n\r\n    T value;\r\n};\r\n```\r\n\r\n## \u5b9a\u4e49\u534f\u7a0b\u51fd\u6570\r\n\r\n```cpp\r\ninline FibGenerator<uint32_t> fib(uint32_t n) {\r\n    uint32_t first = 0;\r\n    uint32_t second = 1;\r\n    while (n--) {\r\n        co_yield second;\r\n        const auto tmp = first;\r\n        first = second;\r\n        second += tmp;\r\n    }\r\n}\r\n\r\n\r\n// \u6d4b\u8bd5 \r\nvoid test_fib() {\r\n    auto gen = fib(10);\r\n    for (int i = 0; i < 10; i++) {\r\n        std::clog << gen.next() << '\\n';\r\n    }\r\n}\r\n```\r\n\r\n# \u53c2\u8003 \r\n\r\n[1]: https://owent.net/2019/1904.html  \"C++20 Coroutine\"\r\n[2]: https://z3475.work/post/c20-xie-cheng-mai-xiang-yi-bu-part1-zui-jian-dan-de-xie-cheng/  \"[C++20\u534f\u7a0b]\u8fc8\u5411\u5f02\u6b65 Part1-\u6700\u7b80\u5355\u7684\u534f\u7a0b\"\r\n\r\n\r\n\u3002", "top": 0, "createdAt": 1700317207, "style": "", "script": "", "createdDate": "2023-11-18", "dateLabelColor": "#A333D0"}, "P11": {"htmlDir": "docs/post/liu-\u3001-xie-cheng-shi-xian-xi-jie.html", "label": "c++", "labelColor": "#BE8008", "postTitle": "\u516d\u3001\u534f\u7a0b\u5b9e\u73b0\u7ec6\u8282", "postUrl": "post/liu-%E3%80%81-xie-cheng-shi-xian-xi-jie.html", "postSourceUrl": "https://github.com/0x1042/0x1042.github.io/issues/11", "commentNum": 0, "description": "# \u534f\u7a0b\u5b9e\u73b0\u7ec6\u8282\r\n\r\n- [\u534f\u7a0b\u5b9e\u73b0\u7ec6\u8282](#\u534f\u7a0b\u5b9e\u73b0\u7ec6\u8282)\r\n- [\u534f\u7a0b\u7684\u751f\u547d\u5468\u671f](#\u534f\u7a0b\u7684\u751f\u547d\u5468\u671f)\r\n  - [`promise_type`](#promise_type)\r\n  - [\u534f\u7a0b\u7c7b](#\u534f\u7a0b\u7c7b)\r\n  - [`coroutine_handle`](#coroutine_handle)\r\n- [\u534f\u7a0b\u7684\u8c03\u5ea6](#\u534f\u7a0b\u7684\u8c03\u5ea6)\r\n  - [`co_await`](#co_await)\r\n  - [`co_yield`](#co_yield)\r\n\r\n\r\n# \u534f\u7a0b\u7684\u751f\u547d\u5468\u671f \r\n\r\n![call_routine](https://github.com/0x1042/0x1042.github.io/assets/7525242/f155fdff-fff4-49eb-88cb-500b55bd63ea)\r\n\r\n\r\n1. \u8c03\u7528\u51fd\u6570\u5728**\u5806**\u4e0a\uff0c\u521b\u5efa\u534f\u7a0b\u5e27(`coroutine_frame`)\uff0c\u91cc\u9762\u5305\u542b\u4e86\u534f\u7a0b\u7684`promise_type`,\u534f\u7a0b\u7684\u5b9e\u53c2\uff0c\u5f53\u524d\u4fdd\u5b58\u7684\u5c40\u90e8\u53d8\u91cf\uff0c\u534f\u7a0b\u5185\u90e8\u72b6\u6001\u5982\u6302\u8d77\u70b9. \u7531\u7f16\u8bd1\u5668\u5b9e\u73b0\r\n2. \u521b\u5efa\u534f\u7a0b\u5e27\u4e4b\u540e\uff0c\u4f1a\u8fd4\u56de\u7ed9\u8c03\u7528\u8005`coroutine_handle`,\u4e5f\u53eb\u534f\u7a0b\u53e5\u67c4\uff0c\u662f\u63a7\u5236\u534f\u7a0b\u7684\u552f\u4e00\u5165\u53e3\uff0c\u53ef\u4ee5\u88ab\u4f20\u9012\u5230\u5176\u4ed6\u5730\u65b9\r\n3. \u8c03\u7528\u88ab\u8c03\u7528\u534f\u7a0b\uff0c\u534f\u7a0b\u5f00\u59cb\u6267\u884c\r\n4. \u88ab\u8c03\u7528\u534f\u7a0b\u6267\u884c\u5230\u67d0\u4e2a\u7279\u5b9a\u70b9\uff0c\u901a\u8fc7`co_await/co_yield` \u5c06\u5f53\u524d\u534f\u7a0b\u4f11\u7720\uff0c\u8c03\u7528\u8005\u6062\u590d\u539f\u672c\u7684\u6267\u884c\u6d41\u7a0b\u7ee7\u7eed\u6267\u884c\u5269\u4f59\u4ee3\u7801\r\n5. \u534f\u7a0b\u6062\u590d\u8005\uff08\u6bd4\u5982\u53e6\u4e00\u4e2a\u7ebf\u7a0b\uff09\u901a\u8fc7`coroutine_handle`\u7684\u6062\u590d\u51fd\u6570`resume` \u6062\u590d\u534f\u7a0b\u6267\u884c\r\n6. \u534f\u7a0b\u5728\u6062\u590d\u8005\u4e0a\u7ee7\u7eed\u6267\u884c\uff0c\u7ed3\u675f\u540e\u901a\u8fc7 `coroutine_handle` \u9500\u6bc1\u534f\u7a0b\u5e27\u3002", "top": 0, "createdAt": 1700334194, "style": "", "script": "", "createdDate": "2023-11-18", "dateLabelColor": "#A333D0"}, "P12": {"htmlDir": "docs/post/qi-\u3001`constexpr` .html", "label": "c++", "labelColor": "#BE8008", "postTitle": "\u4e03\u3001`constexpr` ", "postUrl": "post/qi-%E3%80%81%60constexpr%60%20.html", "postSourceUrl": "https://github.com/0x1042/0x1042.github.io/issues/12", "commentNum": 0, "description": "# constexpr \u5143\u7f16\u7a0b\r\n\r\n- [constexpr \u5143\u7f16\u7a0b](#constexpr-\u5143\u7f16\u7a0b)\r\n  - [`constexpr` \u53d8\u91cf](#constexpr-\u53d8\u91cf)\r\n  - [`constinit` \u521d\u59cb\u5316](#constinit-\u521d\u59cb\u5316)\r\n  - [`constexpr` \u51fd\u6570](#constexpr-\u51fd\u6570)\r\n  - [`consteval` \u51fd\u6570](#consteval-\u51fd\u6570)\r\n- [`if constexpr`](#if-constexpr)\r\n- [\u6298\u53e0\u8868\u8fbe\u5f0f](#\u6298\u53e0\u8868\u8fbe\u5f0f)\r\n  - [\u53f3\u6298\u53e0](#\u53f3\u6298\u53e0)\r\n  - [\u5de6\u6298\u53e0](#\u5de6\u6298\u53e0)\r\n- [\u4ee4\u4eba\u5934\u5927\u7684`const`](#\u4ee4\u4eba\u5934\u5927\u7684const)\r\n  - [`int const* ptr`](#int-const-ptr)\r\n  - [`int * const ptr`](#int--const-ptr)\r\n  - [\u7ec8\u6781CASE](#\u7ec8\u6781case)\r\n\r\n## `constexpr` \u53d8\u91cf\r\n\r\n**\u4e0e`const`\u53d8\u91cf\u7684\u533a\u522b\uff1f**\r\n\r\n- `constexpr` \u9700\u8981\u4fdd\u8bc1\u8868\u8fbe\u5f0f\u53ef\u5728\u7f16\u8bd1\u65f6\u6c42\u503c\uff0c\u5426\u5219\u4f1a\u51fa\u73b0\u7f16\u8bd1\u9519\u8bef \r\n- `const` \u8868\u8fbe\u5f0f\u62e5\u6709\u5e38\u91cf\u6027\u3002", "top": 0, "createdAt": 1700995469, "style": "", "script": "", "createdDate": "2023-11-26", "dateLabelColor": "#A333D0"}, "P13": {"htmlDir": "docs/post/c++-zhong-huo-qu-lei-ding-yi-de-wan-zheng-ming-zi.html", "label": "c++", "labelColor": "#BE8008", "postTitle": "c++\u4e2d\u83b7\u53d6\u7c7b\u5b9a\u4e49\u7684\u5b8c\u6574\u540d\u5b57", "postUrl": "post/c%2B%2B-zhong-huo-qu-lei-ding-yi-de-wan-zheng-ming-zi.html", "postSourceUrl": "https://github.com/0x1042/0x1042.github.io/issues/13", "commentNum": 0, "description": "# \u8bf4\u660e\r\n\r\n> \u4ec5\u9650\u4e8e\u8bfb\u53d6\u7c7b\u5b9a\u4e49\r\n\r\n```cpp\r\n\r\n#include <memory>\r\n#include <string>\r\n\r\n#include <cxxabi.h>\r\n\r\ntemplate <typename T>\r\nstruct Name {\r\n    Name() {\r\n        std::unique_ptr<char, decltype(free) *> real_name(abi::__cxa_demangle(typeid(T).name(), nullptr, nullptr, nullptr), free);\r\n        this->name = std::string(real_name.get());\r\n    }\r\n\r\n    std::string name{};\r\n};\r\n\r\n```\r\n\r\n\u6d4b\u8bd5 \r\n\r\n```cpp\r\nnamespace tests {\r\n\r\nnamespace a::b::c {\r\n    class A {};\r\n} // namespace a::b::c\r\n\r\nnamespace na {\r\n    class B {};\r\n} // namespace na\r\n\r\nnamespace a::b::d {\r\n    struct C {};\r\n} // namespace a::b::d\r\n\r\nTEST_CASE(\"test name\", \"[name]\") {\r\n    // tests::a::b::c::A\r\n    LOG(INFO) << \"infra::Name<a::b::c::A>().name:\" << infra::Name<a::b::c::A>().name;\r\n    // tests::na::B\r\n    LOG(INFO) << \"infra::Name<na::B>().name:\" << infra::Name<na::B>().name;\r\n    // tests::a::b::d::C\r\n    LOG(INFO) << \"infra::Name<a::b::d::C>().name:\" << infra::Name<a::b::d::C>().name;\r\n}\r\n} // namespace tests\r\n```\r\n\u3002", "top": 0, "createdAt": 1701098900, "style": "", "script": "", "createdDate": "2023-11-27", "dateLabelColor": "#A333D0"}, "P14": {"htmlDir": "docs/post/zhi-neng-zhi-zhen-yi-ji-new.html", "label": "c++", "labelColor": "#BE8008", "postTitle": "\u667a\u80fd\u6307\u9488\u4ee5\u53canew", "postUrl": "post/zhi-neng-zhi-zhen-yi-ji-new.html", "postSourceUrl": "https://github.com/0x1042/0x1042.github.io/issues/14", "commentNum": 0, "description": "# \u667a\u80fd\u6307\u9488\u81ea\u5b9a\u4e49deleter\r\n\r\n- [\u667a\u80fd\u6307\u9488\u81ea\u5b9a\u4e49deleter](#\u667a\u80fd\u6307\u9488\u81ea\u5b9a\u4e49deleter)\r\n  - [\u51fd\u6570\u6307\u9488](#\u51fd\u6570\u6307\u9488)\r\n  - [\u51fd\u6570\u5bf9\u8c61](#\u51fd\u6570\u5bf9\u8c61)\r\n  - [`lambda`\u51fd\u6570](#lambda\u51fd\u6570)\r\n- [\u5bf9\u8c61\u6c60](#\u5bf9\u8c61\u6c60)\r\n- [`new`](#new)\r\n  - [`new operator` \u662f\u5173\u952e\u5b57](#new-operator-\u662f\u5173\u952e\u5b57)\r\n  - [`operator new` \u662f\u4e00\u4e2a\u51fd\u6570](#operator-new-\u662f\u4e00\u4e2a\u51fd\u6570)\r\n  - [`placement new` \u662f`operator new`\u7684\u91cd\u8f7d](#placement-new-\u662foperator-new\u7684\u91cd\u8f7d)\r\n\r\n## \u51fd\u6570\u6307\u9488 \r\n\r\n```cpp\r\nvoid deleteVec(int * ptr) {\r\n    delete[] ptr;\r\n}\r\n\r\nTEST_CASE(\"test deleter\", \"[fb_pointer]\") {\r\n    std::unique_ptr<int, decltype(&deleteVec)> my_ptr(new int[5], deleteVec);\r\n}\r\n```\r\n## \u51fd\u6570\u5bf9\u8c61 \r\n\r\n```cpp\r\ntemplate <typename T>\r\nstruct CustomDeleter {\r\n    void operator()(T * t) const {\r\n        delete t;\r\n        std::clog << \"CustomDeleter run... delete type is \" << infra::Name<T>().name << '\\n';\r\n    }\r\n};\r\n\r\nTEST_CASE(\"test deleter\", \"[fb_obj]\") {\r\n    std::unique_ptr<int, CustomDeleter<int>> int_ptr(new int);\r\n    std::unique_ptr<double, CustomDeleter<double>> double_ptr(new double);\r\n}\r\n```\r\n\r\n## `lambda`\u51fd\u6570\r\n\r\n```cpp\r\nTEST_CASE(\"test deleter\", \"[lambda]\") {\r\n    auto deleter = [](int * ptr) {\r\n        delete[] ptr;\r\n        std::clog << \" delete by lambda ...\" << '\\n';\r\n    };\r\n    std::unique_ptr<int, decltype(deleter)> arr(new int[5], deleter);\r\n}\r\n```\r\n\r\n# \u5bf9\u8c61\u6c60\r\n\r\n\r\n- \u8981\u7f13\u5b58\u7684\u5bf9\u8c61\r\n\r\n```cpp\r\nclass Object {\r\npublic:\r\n    Object(const Object &) = default;\r\n    Object(Object &&) = delete;\r\n    auto operator=(const Object &) -> Object & = default;\r\n    auto operator=(Object &&) -> Object & = delete;\r\n    explicit Object(int id) : id(id) { std::clog << \"Object \" << id << \" is created.\\n\"; }\r\n\r\n    ~Object() { std::cout << \"Object \" << id << \" is destroyed.\\n\"; }\r\n\r\n    void doSomething() const;\r\n\r\n    [[nodiscard]] auto getId() const -> int;\r\n    void setId(int id_);\r\n\r\nprivate:\r\n    int id;\r\n};\r\n```\r\n\r\n- \u5b9a\u4e49\u5bf9\u8c61\u6c60 \r\n\r\n```cpp\r\n\r\n// pool.h \r\nclass ObjectPool {\r\npublic:\r\n    struct ObjectDeleter {\r\n        void operator()(Object * obj) {\r\n            std::clog << \"fake delete \" << obj->getId() << '\\n';\r\n            obj->setId(0);\r\n            pool.push_back(obj);\r\n        }\r\n    };\r\n\r\n    static auto acquire() -> std::unique_ptr<Object, ObjectDeleter>;\r\n\r\n    static auto size() -> size_t;\r\n\r\nprivate:\r\n    inline static std::vector<Object *> pool; // \u5bf9\u8c61\u6c60\r\n};\r\n\r\n// pool.cpp\r\nauto ObjectPool::acquire() -> std::unique_ptr<Object, ObjectDeleter> {\r\n    if (pool.empty()) {\r\n        // return std::unique_ptr<Object, ObjectDeleter>(new Object(0), ObjectDeleter());\r\n        return {new Object(0), ObjectDeleter()};\r\n    }\r\n    Object * obj = pool.back();\r\n    pool.pop_back();\r\n    // return std::unique_ptr<Object, ObjectDeleter>(obj, ObjectDeleter());\r\n    return {obj, ObjectDeleter()};\r\n}\r\n\r\nauto ObjectPool::size() -> size_t {\r\n    return pool.size();\r\n}\r\n```\r\n\r\n\r\n# `new`\r\n\r\n## `new operator` \u662f\u5173\u952e\u5b57 \r\n\r\n\u5c31\u662f`new` \u5173\u952e\u5b57 `T *t = new T();` \u80cc\u540e\u5305\u542b\u4e24\u4e2a\u52a8\u4f5c\r\n\r\n1. \u8c03\u7528 `operator new` \u5206\u914d\u5185\u5b58 ,\u5e76\u8fd4\u56de\u6307\u5411\u8be5\u5bf9\u8c61\u7684\u6307\u9488 \r\n2. \u8c03\u7528`T`\u7684\u6784\u9020\u51fd\u6570 \r\n3. \u4e0d\u53ef\u88ab\u91cd\u8f7d \r\n\r\n\r\n## `operator new` \u662f\u4e00\u4e2a\u51fd\u6570 \r\n\r\n\u662f\u4e00\u4e2a\u52a8\u6001\u5185\u5b58\u5206\u914d\u7684\u51fd\u6570 \r\n\r\n```cpp\r\nvoid* operator new(std::size_t size);\r\n```\r\n\r\n- \u53ea\u5206\u914d\u6240\u8981\u6c42\u7684\u7a7a\u95f4\uff0c\u4e0d\u8c03\u7528\u76f8\u5173\u5bf9\u8c61\u7684\u6784\u9020\u51fd\u6570\r\n- \u5f53\u65e0\u6cd5\u6ee1\u8db3\u6240\u8981\u6c42\u5206\u914d\u7684\u7a7a\u95f4\u65f6\r\n  - \u5982\u679c\u6709`new_handler`\uff0c\u5219\u8c03\u7528`new_handler`\r\n  - \u5426\u5219\u5982\u679c\u6ca1\u8981\u6c42\u4e0d\u629b\u51fa\u5f02\u5e38\uff08\u4ee5nothrow\u53c2\u6570\u8868\u8fbe\uff09\uff0c\u5219\u6267\u884cbad_alloc\u5f02\u5e38\uff0c\u5426\u5219\r\n  - \u5426\u5219\u8fd4\u56de0\r\n- \u53ef\u4ee5\u88ab\u91cd\u8f7d\uff0c\u91cd\u8f7d\u65f6\uff0c\u8fd4\u56de\u7c7b\u578b\u5fc5\u987b\u58f0\u660e\u4e3a`void*`\r\n- \u7b2c\u4e00\u4e2a\u53c2\u6570\u7c7b\u578b\u5fc5\u987b\u4e3a\u8868\u8fbe\u8981\u6c42\u5206\u914d\u7a7a\u95f4\u7684\u5927\u5c0f\uff08\u5b57\u8282\uff09\uff0c\u7c7b\u578b\u4e3asize_t,\u53ef\u4ee5\u6709\u5176\u4ed6\u53c2\u6570\r\n\r\n\r\n## `placement new` \u662f`operator new`\u7684\u91cd\u8f7d\r\n\r\n> \u539f\u578b\r\n\r\n```cpp\r\nvoid *operator new( size_t, void * p ) throw() { return p; }\r\n```\r\n\r\n1. \u662f\u91cd\u8f7d`operator new`\u7684\u4e00\u4e2a\u6807\u51c6\u3001\u5168\u5c40\u7684\u7248\u672c\uff0c\u5b83\u4e0d\u80fd\u591f\u88ab\u81ea\u5b9a\u4e49\u7684\u7248\u672c\u4ee3\u66ff(\u4e0d\u50cf\u666e\u901a\u7248\u672c\u7684operator new\u548coperator delete\u80fd\u591f\u88ab\u66ff\u6362)\r\n2. \u6267\u884c\u5ffd\u7565`size_t`\u53c2\u6570\uff0c\u53ea\u8fd4\u56de\u7b2c\u4e8c\u4e2a\u53c2\u6570\u3002", "top": 0, "createdAt": 1701442561, "style": "", "script": "", "createdDate": "2023-12-01", "dateLabelColor": "#A333D0"}, "P15": {"htmlDir": "docs/post/ML hello world.html", "label": "ml", "labelColor": "#D4055A", "postTitle": "ML hello world", "postUrl": "post/ML%20hello%20world.html", "postSourceUrl": "https://github.com/0x1042/0x1042.github.io/issues/15", "commentNum": 0, "description": "# \u795e\u7ecf\u7f51\u7edc\u7b80\u4ecb\r\n\r\n- [\u795e\u7ecf\u7f51\u7edc\u7b80\u4ecb](#\u795e\u7ecf\u7f51\u7edc\u7b80\u4ecb)\r\n  - [\u8bad\u7ec3\u8fc7\u7a0b](#\u8bad\u7ec3\u8fc7\u7a0b)\r\n  - [\u4f20\u64ad](#\u4f20\u64ad)\r\n  - [\u5982\u4f55\u8ba1\u7b97\u635f\u5931](#\u5982\u4f55\u8ba1\u7b97\u635f\u5931)\r\n  - [\u5982\u4f55\u4f18\u5316](#\u5982\u4f55\u4f18\u5316)\r\n  - [\u68af\u5ea6\u4e0b\u964d](#\u68af\u5ea6\u4e0b\u964d)\r\n  - [\u5b66\u4e60\u7387](#\u5b66\u4e60\u7387)\r\n  - [\u6fc0\u6d3b\u51fd\u6570](#\u6fc0\u6d3b\u51fd\u6570)\r\n  - [tensor](#tensor)\r\n- [\u64cd\u4f5c\u8fc7\u7a0b](#\u64cd\u4f5c\u8fc7\u7a0b)\r\n- [\u5355\u53d8\u91cf\u7ebf\u6027\u56de\u5f52](#\u5355\u53d8\u91cf\u7ebf\u6027\u56de\u5f52)\r\n  - [\u6784\u5efa\u6a21\u578b](#\u6784\u5efa\u6a21\u578b)\r\n  - [\u8bad\u7ec3](#\u8bad\u7ec3)\r\n  - [\u6d4b\u8bd5](#\u6d4b\u8bd5)\r\n  - [\u591a\u53d8\u91cf\u7ebf\u6027\u56de\u5f52\u6a21\u578b](#\u591a\u53d8\u91cf\u7ebf\u6027\u56de\u5f52\u6a21\u578b)\r\n    - [\u6a21\u578b\u8bad\u7ec3](#\u6a21\u578b\u8bad\u7ec3)\r\n    - [\u9a8c\u8bc1](#\u9a8c\u8bc1)\r\n- [\u53c2\u8003](#\u53c2\u8003)\r\n\r\n![\u795e\u7ecf\u7f51\u7edc](https://github.com/0x1042/0x1042.github.io/assets/7525242/86419435-239d-424d-afd2-021096a0c932)\r\n\r\n\r\n\u7ed9\u5b9a1000\u4e2a\u76f8\u4eb2\u5bf9\u8c61\u7684\u6570\u636e**\u7279\u5f81**(**feature**),\u548c\u5bf9\u5e94\u7684\u6ee1\u610f\u7a0b\u5ea6**\u6807\u7b7e**(**label**)\uff0c\u8bad\u7ec3\u5b8c\u6210\u540e\uff0c\u7ed9\u5b9a\u65b0\u7684\u76f8\u4eb2\u5bf9\u8c61\u6570\u636e\u6765\u9884\u6d4b\u6ee1\u610f\u7a0b\u5ea6\uff0c\u5373\u9884\u4f30(**predict**)\r\n\r\n## \u8bad\u7ec3\u8fc7\u7a0b \r\n\r\n> \u8bad\u7ec3\u6a21\u578b\u7684\u76ee\u6807\u662f\u4ece\u6240\u6709\u6837\u672c\u4e2d\u627e\u5230\u4e00\u7ec4\u5e73\u5747\u635f\u5931\u201c\u8f83\u5c0f\u201d\u7684\u6743\u91cd\uff08w\uff09\u548c\u504f\u5dee\uff08b\uff09\u3002", "top": 0, "createdAt": 1702217707, "style": "", "script": "", "createdDate": "2023-12-10", "dateLabelColor": "#A333D0"}, "P16": {"htmlDir": "docs/post/C++-da-yin-huan-jing-bian-liang.html", "label": "c++", "labelColor": "#BE8008", "postTitle": "C++\u6253\u5370\u73af\u5883\u53d8\u91cf", "postUrl": "post/C%2B%2B-da-yin-huan-jing-bian-liang.html", "postSourceUrl": "https://github.com/0x1042/0x1042.github.io/issues/16", "commentNum": 0, "description": "# \u83b7\u53d6\u6240\u6709\u7684\u73af\u5883\u53d8\u91cf \r\n\r\n- [\u83b7\u53d6\u6240\u6709\u7684\u73af\u5883\u53d8\u91cf](#\u83b7\u53d6\u6240\u6709\u7684\u73af\u5883\u53d8\u91cf)\r\n  - [`main` \u51fd\u6570\u65b9\u5f0f\u83b7\u53d6](#main-\u51fd\u6570\u65b9\u5f0f\u83b7\u53d6)\r\n  - [`environ`\u8bfb\u53d6](#environ\u8bfb\u53d6)\r\n\r\n## `main` \u51fd\u6570\u65b9\u5f0f\u83b7\u53d6 \r\n\r\n```cpp\r\n\r\nauto main(int argc, char ** argv, char ** envp) -> int {\r\n    logEnv(envp);\r\n}\r\n\r\nvoid logEnv(char ** envp) {\r\n    LOG(INFO) << \"current pid is \" << getpid();\r\n    for (char ** this_env = envp; *this_env != nullptr; ++this_env) {\r\n        LOG(INFO) << \"env:\" << std::string(*this_env);\r\n    }\r\n}\r\n```\r\n\r\n\r\n## `environ`\u8bfb\u53d6 \r\n\r\n> \u7b49\u540c `cat /proc/${PID}/environ | tr '\\0' '\\n'`\r\n\r\n```cpp\r\n\r\nauto main() -> int {\r\n    logEnv2();\r\n}\r\n\r\nvoid logEnv2() {\r\n    pid_t pid = getpid();\r\n    std::clog << \"current pid is \" << pid << '\\n';\r\n    std::string envfile = \"/proc/\" + std::to_string(pid) + \"/environ\";\r\n\r\n    std::ifstream input(envfile);\r\n\r\n    std::string envkv;\r\n    while (!input.eof()) {\r\n        std::getline(input, envkv, '\\0');\r\n        std::clog << envkv << '\\n';\r\n    }\r\n\r\n    input.close();\r\n}\r\n```\r\n\u3002", "top": 0, "createdAt": 1702825893, "style": "", "script": "", "createdDate": "2023-12-17", "dateLabelColor": "#A333D0"}}, "singeListJson": {}, "prevUrl": "/index.html", "nextUrl": "disabled"}