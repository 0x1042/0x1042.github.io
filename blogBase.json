{"singlePage": ["link", "about"], "startSite": "10/25/2023", "filingNum": "", "onePageListNum": 15, "commentLabelColor": "#006b75", "yearColorList": ["#bc4c00", "#0969da", "#1f883d", "#A333D0"], "i18n": "CN", "themeMode": "manual", "dayTheme": "light", "nightTheme": "dark", "urlMode": "issue", "script": "<script src='https://blog.meekdai.com/Gmeek/plugins/GmeekTOC.js'></script><script src='https://blog.meekdai.com/Gmeek/plugins/lightbox.js'></script>", "style": "", "head": "", "indexScript": "", "indexStyle": "", "bottomText": "", "showPostSource": 1, "iconList": {}, "UTC": 8, "rssSplit": "sentence", "exlink": {}, "needComment": 1, "allHead": "<script src='https://blog.meekdai.com/Gmeek/plugins/GmeekVercount.js'></script>", "title": "Daily", "displayTitle": "Daily", "subTitle": "\u6211\u81ea\u503e\u6000\uff0c\u541b\u4e14\u968f\u610f\u3002", "homeUrl": "https://0x1042.github.io/", "avatarUrl": "https://raw.githubusercontent.com/0x1042/0x1042.github.io/master/synthwave_option_4.png", "faviconUrl": "https://raw.githubusercontent.com/0x1042/0x1042.github.io/master/synthwave_option_4.ico", "GMEEK_VERSION": "main", "postListJson": {"P1": {"htmlDir": "docs/post/1.html", "labels": ["infra"], "postTitle": "c++\u4e2d\u5b9e\u73b0golang\u4e2d\u7684defer\u529f\u80fd", "postUrl": "post/1.html", "postSourceUrl": "https://github.com/0x1042/0x1042.github.io/issues/1", "commentNum": 0, "wordCount": 648, "description": "# \u4f7f\u7528`folly`\r\n\r\n```c++\r\n#include <folly/ScopeGuard.h>\r\n\r\nauto main() -> int {\r\n    std::string msg = 'exit...';\r\n\r\n    auto guard1 = folly::makeGuard([&] { std::cerr << 'from folly::makeGuard:' << msg << '\\n'; });\r\n\r\n    std::cout << 'Hello, World!' << '\\n';\r\n    return 0;\r\n}\r\n\r\n```\r\n\r\n# \u81ea\u5b9a\u4e49\u5b9e\u73b0\r\n\r\n```c++\r\ntemplate <typename Lambda> \r\nstruct Defer : Lambda {\r\n    ~Defer() { Lambda::operator()(); }\r\n};\r\n\r\ntemplate <typename Lambda> \r\nDefer(Lambda) -> Defer<Lambda>;\r\n\r\nauto main() -> int {\r\n    std::string msg = 'exit...';\r\n\r\n    Defer guard{[&] { std::cerr << msg << '\\n'; }};\r\n\r\n    std::cout << 'Hello, World!' << '\\n';\r\n    return 0;\r\n}\r\n```\r\n\u3002", "top": 0, "createdAt": 1698249441, "style": "", "script": "<script src='https://blog.meekdai.com/Gmeek/plugins/GmeekTOC.js'></script><script src='https://blog.meekdai.com/Gmeek/plugins/lightbox.js'></script>", "head": "", "ogImage": "https://raw.githubusercontent.com/0x1042/0x1042.github.io/master/synthwave_option_4.png", "createdDate": "2023-10-25", "dateLabelColor": "#A333D0"}, "P2": {"htmlDir": "docs/post/2.html", "labels": ["go", "protobuf"], "postTitle": "golang\u4e2dprotobuf \u53cd\u5e8f\u5217\u5316\u6027\u80fd\u4f18\u5316", "postUrl": "post/2.html", "postSourceUrl": "https://github.com/0x1042/0x1042.github.io/issues/2", "commentNum": 0, "wordCount": 2342, "description": "# \u80cc\u666f\r\n\r\n\u7ebf\u4e0a\u6709\u4e00\u4e9b\u516c\u5171\u4f7f\u7528\u7684\u8d85\u5927`protobuf`\uff0c\u90e8\u5206\u5355**message\u7684field\u5927\u4e8e10000**\u3002", "top": 0, "createdAt": 1698484079, "style": "", "script": "<script src='https://blog.meekdai.com/Gmeek/plugins/GmeekTOC.js'></script><script src='https://blog.meekdai.com/Gmeek/plugins/lightbox.js'></script>", "head": "", "ogImage": "https://raw.githubusercontent.com/0x1042/0x1042.github.io/master/synthwave_option_4.png", "createdDate": "2023-10-28", "dateLabelColor": "#A333D0"}, "P3": {"htmlDir": "docs/post/3.html", "labels": ["rust"], "postTitle": "struct \u4f7f\u7528\u751f\u547d\u5468\u671f\u6807\u6ce8", "postUrl": "post/3.html", "postSourceUrl": "https://github.com/0x1042/0x1042.github.io/issues/3", "commentNum": 0, "wordCount": 757, "description": "```rust\r\n#[derive(Debug)]\r\nstruct Sheep<'c, 'd> {\r\n    age: &'c u32,\r\n    name: &'d str,\r\n}\r\n\r\nimpl<'c, 'd> Sheep<'c, 'd> {\r\n    /// Returns the get age of this [`Sheep`].\r\n    pub fn get_age(&self) -> u32 {\r\n        *self.age\r\n    }\r\n\r\n    /// Returns the get name of this [`Sheep`].\r\n    pub fn get_name(&self) -> String {\r\n        self.name.to_owned()\r\n    }\r\n}\r\n\r\n#[cfg(test)]\r\nmod tests {\r\n    use super::Sheep;\r\n    #[test]\r\n    fn test_lt() {\r\n        let age = 5;\r\n        let name = 'dollor';\r\n\r\n        let sheep = Sheep {\r\n            age: &age,\r\n            name: name,\r\n        };\r\n\r\n        println!('name is {:?}', sheep.get_name());\r\n        println!('age is {:?}', sheep.get_age());\r\n\r\n        println!('sheep :{:?}', sheep);\r\n    }\r\n}\r\n```\u3002", "top": 0, "createdAt": 1698857748, "style": "", "script": "<script src='https://blog.meekdai.com/Gmeek/plugins/GmeekTOC.js'></script><script src='https://blog.meekdai.com/Gmeek/plugins/lightbox.js'></script>", "head": "", "ogImage": "https://raw.githubusercontent.com/0x1042/0x1042.github.io/master/synthwave_option_4.png", "createdDate": "2023-11-02", "dateLabelColor": "#A333D0"}, "P4": {"htmlDir": "docs/post/4.html", "labels": ["c++"], "postTitle": "\u4e00\u3001c++\u4e2d\u7684\u503c\u7c7b\u578b", "postUrl": "post/4.html", "postSourceUrl": "https://github.com/0x1042/0x1042.github.io/issues/4", "commentNum": 0, "wordCount": 2917, "description": "# \u503c\u7c7b\u522b \r\n\r\n- [\u503c\u7c7b\u522b](#\u503c\u7c7b\u522b)\r\n  - [\u5982\u4f55\u533a\u5206\u5de6\u503c\u548c\u53f3\u503c](#\u5982\u4f55\u533a\u5206\u5de6\u503c\u548c\u53f3\u503c)\r\n  - [\u51fd\u6570\u53c2\u6570\u5339\u914d](#\u51fd\u6570\u53c2\u6570\u5339\u914d)\r\n  - [\u503c\u7c7b\u578b](#\u503c\u7c7b\u578b)\r\n  - [\u4e07\u80fd\u5f15\u7528 **universal reference**](#\u4e07\u80fd\u5f15\u7528-universal-reference)\r\n  - [\u5f15\u7528\u6298\u53e0 **reference collapsing**](#\u5f15\u7528\u6298\u53e0-reference-collapsing)\r\n  - [\u5b8c\u7f8e\u8f6c\u53d1 **perfect forward**](#\u5b8c\u7f8e\u8f6c\u53d1-perfect-forward)\r\n\r\n## \u5982\u4f55\u533a\u5206\u5de6\u503c\u548c\u53f3\u503c\r\n\r\n```c++\r\nvoid log(std::string_view message, std::source_location location) {\r\n    std::clog << 'file: ' << location.file_name() << '(' << location.line() << ':' << location.column() << ') `' << location.function_name()\r\n              << '`: ' << message << '\\n';\r\n}\r\n\r\nvoid foo(int & /*val*/) {\r\n    log('foo1');\r\n}\r\n\r\nvoid foo(int && /*val*/) {\r\n    log('foo2');\r\n}\r\n```\r\n\r\n```cpp\r\nint && value = 1024;\r\nfoo(value); // \u8c03\u7528\u7684\u662f void foo(int &)\r\n```\r\n\r\n- \u533f\u540d\u7684\u4e34\u65f6\u5bf9\u8c61\u662f\u53f3\u503c\uff0c\u5177\u540d\u7684\u53f3\u503c\u5f15\u7528\u5bf9\u8c61\u662f\u5de6\u503c \r\n- \u5982\u679c\u8868\u8fbe\u5f0f\u53ef\u4ee5\u53d6\u5730\u5740\uff0c\u5219\u4e3a\u5de6\u503c\u8868\u8fbe\u5f0f\uff0c\u5426\u5219\uff0c\u4e3a\u53f3\u503c\u8868\u8fbe\u5f0f\r\n- \u8868\u8fbe\u5f0f value \u662f\u5177\u540d\u7684\u53f3\u503c\u5f15\u7528\u5bf9\u8c61\uff0cvalue \u4e5f\u53ef\u4ee5\u53d6\u5730\u5740\uff0c\u6240\u4ee5 \u8868\u8fbe\u5f0fvalue \u662f\u4e00\u4e2a\u5de6\u503c\uff0c\u5339\u914d\u7b2c\u4e00\u4e2a\u51fd\u6570\r\n\r\n## \u51fd\u6570\u53c2\u6570\u5339\u914d\r\n\r\n| \u53c2\u6570\u7c7b\u578b      | \u8bf4\u660e                                     |\r\n| ------------- | ---------------------------------------- |\r\n| Value&        | \u53ea\u80fd\u5339\u914d\u5de6\u503c\u8868\u8fbe\u5f0f                       |\r\n| Value&&       | \u53ea\u80fd\u7ed1\u5b9a\u53f3\u503c\u8868\u8fbe\u5f0f\uff08\u6a21\u677f\u51fd\u6570\u4e0b\u5355\u72ec\u8ba8\u8bba\uff09 |\r\n| const Value&  | \u53ef\u4ee5\u5339\u914d\u5de6\u503c\u548c\u53f3\u503c\u8868\u8fbe\u5f0f                 |\r\n| const Value&& | \u5b9e\u9645\u4e0d\u4f7f\u7528                               |\r\n\r\n\r\n## \u503c\u7c7b\u578b \r\n\r\n- \u6cdb\u5de6\u503c\uff1a \u5de6\u503c \u548c \u5c06\u4ea1\u503c\r\n- \u53f3\u503c\uff1a\u7eaf\u53f3\u503c \u548c \u5c06\u4ea1\u503c\r\n- `static_cast<Value&&>(value)` \u662f\u5c06\u4ea1\u503c\uff0c\u5e38\u89c1\u7684\u5c06\u4ea1\u503c\u662f \u51fd\u6570\u7684\u8fd4\u56de\u503c \r\n![types](https://github.com/0x1042/0x1042.github.io/assets/7525242/0fae6f7f-bce8-41b6-ad2d-45cc312ec7b4)\r\n\r\n\r\n## \u4e07\u80fd\u5f15\u7528 **universal reference** \r\n\r\n> \u5982\u4f55\u533a\u5206 Arg&& \u662f\u53f3\u503c\u5f15\u7528\u8fd8\u662f\u4e07\u80fd\u5f15\u7528\uff1f\r\n\r\n- **\u5982\u679c Arg&& \u662f\u6a21\u677f\u53c2\u6570\u6216\u8005 auto\uff0c\u5219\u662f\u4e07\u80fd\u5f15\u7528\uff0c\u300c\u65e2\u53ef\u4ee5\u63a5\u53d7\u5de6\u503c\uff0c\u4e5f\u53ef\u4ee5\u63a5\u53d7\u53f3\u503c\u300d\uff0c\u5426\u5219\u4e3a\u53f3\u503c\u5f15\u7528**\r\n- **\u4e07\u80fd\u5f15\u7528\u5728\u7c7b\u578b\u63a8\u5bfc\u8bed\u5883\u4e0b\uff0c\u53ef\u4ee5\u4fdd\u7559\u7c7b\u578b\u7684cv\u9650\u5b9a\u7b26\u300cconst\u548cvolatile\u300d\u548c\u503c\u7c7b\u522b**\r\n\r\n## \u5f15\u7528\u6298\u53e0 **reference collapsing**\r\n\r\n> \u4e3a\u4e86\u89e3\u51b3 reference to reference \u7684\u95ee\u9898\r\n\r\nc++ \u4e2d\u4e0d\u5141\u8bb8\u6307\u5411\u5f15\u7528\u7684\u5f15\u7528\uff0c\u5bf9\u4e8e\u6307\u5411\u5f15\u7528\u7684\u5f15\u7528\u4f1a\u88ab\u7b80\u5316\uff0c\u63a8\u5bfc\u89c4\u5219\u5982\u4e0b \r\n\r\n```cpp\r\ntemplate <typename T>\r\nvoid Example(T && input) {}\r\n```\r\n\r\n- \u51fd\u6570\u5f62\u53c2\u662f\u5de6\u503c\uff0cT&\uff0c\u4f20\u5165\u7684\u5b9e\u53c2\u662f\u5de6\u503c\uff0c\u5373input \u662f `T& &`\r\n- \u51fd\u6570\u5f62\u53c2\u662f\u5de6\u503c\uff0cT&\uff0c\u4f20\u5165\u7684\u5b9e\u53c2\u662f\u53f3\u503c\uff0c\u5373input \u662f `T& &&`\r\n- \u51fd\u6570\u5f62\u53c2\u662f\u53f3\u503c\uff0cT&&\uff0c\u4f20\u5165\u7684\u5b9e\u53c2\u662f\u5de6\u503c\uff0c\u5373input \u662f `T&& &`\r\n- \u51fd\u6570\u5f62\u53c2\u662f\u53f3\u503c\uff0cT&&\uff0c\u4f20\u5165\u7684\u5b9e\u53c2\u662f\u53f3\u503c\uff0c\u5373input \u662f `T&& &&`\r\n\r\n\u63a8\u5bfc\u89c4\u5219\u662f\uff1a **\u4ec5\u5f53\u4e24\u4e2a\u90fd\u662f\u53f3\u503c\u5f15\u7528\u65f6\uff0c\u63a8\u5bfc\u4e3a\u53f3\u503c\uff0c\u5176\u4f59\u60c5\u51b5\u4e3a\u5de6\u503c**\uff0c\u4e5f\u5c31\u662f `T&& &&`\u4e3a\u53f3\u503c\uff0c\u5176\u4ed6\u60c5\u51b5\u4e3a\u5de6\u503c \r\n\r\n\r\n## \u5b8c\u7f8e\u8f6c\u53d1 **perfect forward** \r\n\r\n> \u5728\u4f20\u53c2\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4fdd\u7559\u53c2\u6570\u7684\u539f\u59cb\u7c7b\u578b \r\n\r\n```cpp\r\nvoid foo(int & val);\r\nvoid foo(int && val);\r\n\r\ntemplate <typename T> void call_foo(T && t) {\r\n    foo(std::forward<T>(t));\r\n}\r\n```\r\n\r\n\u5982\u4f55\u5b9e\u73b0\u7684\uff1f\r\n\r\n```cpp\r\ntemplate <class _Tp>\r\n_LIBCPP_NODISCARD_EXT inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR _Tp&&\r\nforward(_LIBCPP_LIFETIMEBOUND __libcpp_remove_reference_t<_Tp>& __t) _NOEXCEPT {\r\n  return static_cast<_Tp&&>(__t);\r\n}\r\n\r\ntemplate <class _Tp>\r\n_LIBCPP_NODISCARD_EXT inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR _Tp&&\r\nforward(_LIBCPP_LIFETIMEBOUND __libcpp_remove_reference_t<_Tp>&& __t) _NOEXCEPT {\r\n  static_assert(!is_lvalue_reference<_Tp>::value, 'cannot forward an rvalue as an lvalue');\r\n  return static_cast<_Tp&&>(__t);\r\n}\r\n```\r\n\r\n- Tp \u662f\u5de6\u503c\uff0c `static_cast<_Tp&&>(__t)` \u540e\u662f T& &&\uff0c\u6309\u7167\u5f15\u7528\u6298\u53e0\u89c4\u5219\uff0c`T& && -> T&`, Tp\u662f\u5de6\u503c \r\n- Tp \u662f\u53f3\u503c\uff0c `static_cast<_Tp&&>(__t)` \u540e\u662f T&& &&\uff0c\u6309\u7167\u5f15\u7528\u6298\u53e0\u89c4\u5219\uff0c`T&& && -> T&&`, Tp\u662f\u53f3\u503c \u3002", "top": 0, "createdAt": 1699692495, "style": "", "script": "<script src='https://blog.meekdai.com/Gmeek/plugins/GmeekTOC.js'></script><script src='https://blog.meekdai.com/Gmeek/plugins/lightbox.js'></script>", "head": "", "ogImage": "https://raw.githubusercontent.com/0x1042/0x1042.github.io/master/synthwave_option_4.png", "createdDate": "2023-11-11", "dateLabelColor": "#A333D0"}, "P5": {"htmlDir": "docs/post/5.html", "labels": ["c++"], "postTitle": "\u4e8c\u3001c++\u4e2d\u7684\u7c7b\u578b\u63a8\u5bfc", "postUrl": "post/5.html", "postSourceUrl": "https://github.com/0x1042/0x1042.github.io/issues/5", "commentNum": 0, "wordCount": 5991, "description": "- [\u7c7b\u578b\u63a8\u5bfc](#\u7c7b\u578b\u63a8\u5bfc)\r\n- [`auto`](#auto)\r\n- [`decltype`](#decltype)\r\n  - [\u4e0d\u5e26\u62ec\u53f7(\u83b7\u53d6\u7684\u662f\u6807\u8bc6\u7b26 \u5b9a\u4e49\u65f6\u7684\u7c7b\u578b)](#\u4e0d\u5e26\u62ec\u53f7\u83b7\u53d6\u7684\u662f\u6807\u8bc6\u7b26-\u5b9a\u4e49\u65f6\u7684\u7c7b\u578b)\r\n  - [\u5e26\u62ec\u53f7 \u83b7\u53d6\u8868\u8fbe\u5f0f\u7684\u503c\u7c7b\u522b](#\u5e26\u62ec\u53f7-\u83b7\u53d6\u8868\u8fbe\u5f0f\u7684\u503c\u7c7b\u522b)\r\n- [`decltype(auto)`](#decltypeauto)\r\n- [`CTAD` \u7c7b\u6a21\u677f\u53c2\u6570\u63a8\u5bfc](#ctad-\u7c7b\u6a21\u677f\u53c2\u6570\u63a8\u5bfc)\r\n\r\n# \u7c7b\u578b\u63a8\u5bfc \r\n\r\n# `auto`\r\n\r\n**auto \u662f\u503c\u8bed\u4e49\uff0c\u5373\u901a\u8fc7\u79fb\u52a8/\u62f7\u8d1d\u6784\u9020\uff0c\u4e0d\u4f1a\u4fdd\u7559cv\u5c5e\u6027\uff0c\u5982\u679c\u9700\u8981\u4fdd\u7559cv\u5c5e\u6027\uff0c\u9700\u8981\u663e\u5f0f\u6307\u5b9a**\r\n\r\n```cpp\r\nclass Cat {};\r\n\r\nauto get_cat() -> Cat *;\r\n\r\nauto get_const_cat() -> const Cat *;\r\n\r\n\r\nCat cat{};\r\nCat * cat1 = &cat;\r\nconst Cat * cat2 = &cat;\r\n\r\nCat & lr_cat = cat;\r\nconst Cat & ltc_cat = cat;\r\nCat&& rr_cat = Cat{};\r\n```\r\n\r\n| \u8868\u8fbe\u5f0f                         | auto\u63a8\u5bfc\u7684\u7c7b\u578b |\r\n| ------------------------------ | -------------- |\r\n| `auto ccat1 = cat`             | `Cat`          |\r\n| `auto ccat2 = cat1`            | `Cat*`         |\r\n| `auto ccat3 = cat2`            | `const Cat*`   |\r\n| `auto ccat4 = get_cat()`       | `Cat*`         |\r\n| `auto ccat5 = get_const_cat()` | `const Cat*`   |\r\n| `auto ccat6 = lr_cat`          | `Cat`          |\r\n| `auto ccat7 = ltc_cat`         | `Cat`          |\r\n| `auto ccat8 = rr_cat`          | `Cat`          |\r\n| `auto & ccat9 = lr_cat`        | `Cat&`         |\r\n| `const auto & ccat10 = lr_cat` | `const Cat&`   |\r\n| `auto & ccat11 = ltc_cat`      | `const Cat&`   |\r\n| `auto && ccat12 = cat`         | `Cat&`         |\r\n| `auto && ccat13 = Cat{}`       | `Cat&&`        |\r\n\r\n\r\n# `decltype`\r\n\r\n> \u4f5c\u7528\uff1a\u83b7\u53d6 \u6807\u8bc6\u7b26\u88ab\u5b9a\u4e49\u65f6\u7684\u7c7b\u578b\u6216\u8005 \u6574\u4f53\u4f5c\u4e3a \u8868\u8fbe\u5f0f \u65f6\u7684\u503c\u7c7b\u522b\r\n\r\n- \u53c2\u6570\u5e26\u62ec\u53f7 decltype((T))\uff0c\u83b7\u53d6\u4f5c\u4e3a\u8868\u8fbe\u5f0f\u65f6\u7684 \u503c\u7c7b\u522b\r\n- \u53c2\u6570\u4e0d\u5e26\u62ec\u53f7 decltype(T), \u83b7\u53d6\u6807\u8bc6\u7b26 \u5b9a\u4e49\u65f6\u7684\u7c7b\u578b \r\n\r\n```cpp\r\nclass Student {\r\npublic:\r\n    uint32_t id{0};\r\n    std::string name;\r\n};\r\n\r\ninline void test_decltype() {\r\n    Student student;\r\n    Student * st_ptr = &student;\r\n    const Student * st_cptr = &student;\r\n    Student & st_ref = student;\r\n    Student && st_tmp = {};\r\n}\r\n```\r\n\r\n## \u4e0d\u5e26\u62ec\u53f7(\u83b7\u53d6\u7684\u662f\u6807\u8bc6\u7b26 \u5b9a\u4e49\u65f6\u7684\u7c7b\u578b)\r\n\r\n| \u8868\u8fbe\u5f0f                                            | \u7c7b\u578b             |\r\n| ------------------------------------------------- | ---------------- |\r\n| `using T1 = decltype(student)`                    | `Student`        |\r\n| `using T2 = decltype(st_ptr)`                     | `Student*`       |\r\n| `using T3 = decltype(st_cptr)`                    | `const Student*` |\r\n| `using T4 = decltype(st_ref)`                     | `Student&`       |\r\n| `using T5 = decltype(st_tmp)`                     | `Student&&`      |\r\n| `using T6 = decltype(student.id)`                 | `uint32_t`       |\r\n| `using T7 = decltype(Student{1024, '\u5f20\u4e09'}.name)` | `std::string`    |\r\n\r\n## \u5e26\u62ec\u53f7 \u83b7\u53d6\u8868\u8fbe\u5f0f\u7684\u503c\u7c7b\u522b\r\n\r\n| \u8868\u8fbe\u5f0f                                              | \u7c7b\u578b               |\r\n| --------------------------------------------------- | ------------------ |\r\n| `using T1 = decltype((student))`                    | `Student&`         |\r\n| `using T2 = decltype((st_ptr))`                     | `Student* &`       |\r\n| `using T3 = decltype((st_cptr))`                    | `const Student* &` |\r\n| `using T4 = decltype((st_ref))`                     | `Student&`         |\r\n| `using T5 = decltype((st_tmp))`                     | `Student&`         |\r\n| `using T6 = decltype((student.id))`                 | `uint32_t&`        |\r\n| `using T7 = decltype((Student{1024, '\u5f20\u4e09'}))`      | `Student`          |\r\n| `using T8 = decltype((Student{1024, '\u5f20\u4e09'}.name))` | `std::string&&`    |\r\n| `using T9 = decltype((++student.id))`               | `uint32_t&`        |\r\n| `using T10 = decltype((student.id++))`              | `uint32_t`         |\r\n\r\n- \u5982\u679c\u8868\u8fbe\u5f0f\u662f\u5de6\u503c\uff0c\u90a3\u4e48 `decltype((exp))` \u5c31\u662f\u5de6\u503c\u5f15\u7528\uff08T1->T6\uff09\r\n- `st_tmp`\u7684\u7c7b\u578b\u662f \u53f3\u503c\u5f15\u7528\uff0c\u4f46\u662f\u4f5c\u4e3a\u8868\u8fbe\u5f0f\uff0c\u53ef\u4ee5\u88ab\u53d6\u5730\u5740\uff0c\u6240\u4ee5\u662f\u5de6\u503c\u5f15\u7528\r\n- `T7` \u539f\u59cb\u8868\u8fbe\u5f0f\u662f\u4e00\u4e2a\u7eaf\u53f3\u503c\uff0c`decltype((exp))` \u662f\u53f3\u503c\uff08\u4e0d\u5e26\u5f15\u7528\uff09\r\n- `T8` \u662f\u4e00\u4e2a\u5c06\u4ea1\u503c\r\n- `T9` ++x\u4f5c\u4e3a\u8868\u8fbe\u5f0f\u662f\u5de6\u503c\r\n- `T10` x++\u4f5c\u4e3a\u8868\u8fbe\u5f0f\u662f\u53f3\u503c\r\n\r\n# `decltype(auto)`\r\n\r\n> \u9ed8\u8ba4\u4f7f\u7528`auto`\u65f6\uff0c\u4e22\u5931\u4e86\u5f15\u7528\u6027\u548c`cv`\u5c5e\u6027\uff0c\u82e5\u6307\u660e\u4e86 `const`\u5c5e\u6027\uff0c\u5219\u5bfc\u81f4\u7ed3\u679c\u59cb\u7ec8\u4e3a`const`\uff0c\u82e5\u91c7\u7528\u5f15\u7528\uff0c\u5219\u9700\u8981\u663e\u793a\u6307\u5b9a`auto&` \u6216\u8005 `auto&&`,\u8fd9\u53c8\u4f1a\u5bfc\u81f4\u53ea\u80fd\u8868\u73b0\u4e3a \u5f15\u7528\u8bed\u4e49\u3002", "top": 0, "createdAt": 1699714088, "style": "", "script": "<script src='https://blog.meekdai.com/Gmeek/plugins/GmeekTOC.js'></script><script src='https://blog.meekdai.com/Gmeek/plugins/lightbox.js'></script>", "head": "", "ogImage": "https://raw.githubusercontent.com/0x1042/0x1042.github.io/master/synthwave_option_4.png", "createdDate": "2023-11-11", "dateLabelColor": "#A333D0"}, "P6": {"htmlDir": "docs/post/6.html", "labels": ["c++"], "postTitle": "\u4e09\u3001\u7f16\u8bd1\u65f6\u591a\u6001", "postUrl": "post/6.html", "postSourceUrl": "https://github.com/0x1042/0x1042.github.io/issues/6", "commentNum": 0, "wordCount": 5608, "description": "# \u7f16\u8bd1\u65f6\u591a\u6001\r\n\r\n- [\u7f16\u8bd1\u65f6\u591a\u6001](#\u7f16\u8bd1\u65f6\u591a\u6001)\r\n- [type traits \u7c7b\u578b\u8403\u53d6](#type-traits-\u7c7b\u578b\u8403\u53d6)\r\n  - [\u83b7\u53d6\u7c7b\u578b\u5c5e\u6027](#\u83b7\u53d6\u7c7b\u578b\u5c5e\u6027)\r\n  - [\u7c7b\u578b\u53d8\u6362](#\u7c7b\u578b\u53d8\u6362)\r\n  - [\u6807\u7b7e\u5206\u53d1](#\u6807\u7b7e\u5206\u53d1)\r\n  - [\u8fed\u4ee3\u5668](#\u8fed\u4ee3\u5668)\r\n  - [`if constexpr`](#if-constexpr)\r\n  - [`void_t` \u5143\u51fd\u6570](#void_t-\u5143\u51fd\u6570)\r\n- [CTRTP \u5947\u5f02\u9012\u5f52\u6a21\u7248\u6a21\u5f0f](#ctrtp-\u5947\u5f02\u9012\u5f52\u6a21\u7248\u6a21\u5f0f)\r\n  - [\u4ee3\u7801\u590d\u7528](#\u4ee3\u7801\u590d\u7528)\r\n  - [\u9759\u6001\u7ed1\u5b9a](#\u9759\u6001\u7ed1\u5b9a)\r\n  - [`enable_shared_from_this`](#enable_shared_from_this)\r\n\r\n\r\n# type traits \u7c7b\u578b\u8403\u53d6\r\n\r\n> c++ \u901a\u8fc7\u6a21\u7248\u5b9e\u73b0\u6cdb\u578b\u7f16\u7a0b\uff0c\u4ece\u800c\u51cf\u8f7b\u8fd0\u884c\u65f6\u5f00\u9500\u3002", "top": 0, "createdAt": 1699778402, "style": "", "script": "<script src='https://blog.meekdai.com/Gmeek/plugins/GmeekTOC.js'></script><script src='https://blog.meekdai.com/Gmeek/plugins/lightbox.js'></script>", "head": "", "ogImage": "https://raw.githubusercontent.com/0x1042/0x1042.github.io/master/synthwave_option_4.png", "createdDate": "2023-11-12", "dateLabelColor": "#A333D0"}, "P7": {"htmlDir": "docs/post/7.html", "labels": ["c++"], "postTitle": "GDB \u4f7f\u7528 ", "postUrl": "post/7.html", "postSourceUrl": "https://github.com/0x1042/0x1042.github.io/issues/7", "commentNum": 0, "wordCount": 1498, "description": "\r\n- [GDB \u4f7f\u7528](#gdb-\u4f7f\u7528)\r\n  - [\u80cc\u666f](#\u80cc\u666f)\r\n  - [GDB dump\u7ebf\u7a0b\u6808](#gdb-dump\u7ebf\u7a0b\u6808)\r\n  - [\u627e\u5230\u8d1f\u8f7d\u9ad8\u7684\u7ebf\u7a0b](#\u627e\u5230\u8d1f\u8f7d\u9ad8\u7684\u7ebf\u7a0b)\r\n  - [\u5bfb\u627e\u5bf9\u5e94\u7684\u884c\u53f7](#\u5bfb\u627e\u5bf9\u5e94\u7684\u884c\u53f7)\r\n\r\n\r\n## \u80cc\u666f\r\n\r\n> \u7ebf\u4e0a\u6d41\u91cf\u6ca1\u53d8\uff0c\u4f46\u662f\u51fa\u73b0\u77ac\u65f6\u8d1f\u8f7d\u5448\u76f4\u7ebf\u4e0a\u6da8\uff0c1\uff5e2\u5206\u949f\u6574\u4e2a\u670d\u52a1\u4e0d\u53ef\u7528\u3002", "top": 0, "createdAt": 1700225851, "style": "", "script": "<script src='https://blog.meekdai.com/Gmeek/plugins/GmeekTOC.js'></script><script src='https://blog.meekdai.com/Gmeek/plugins/lightbox.js'></script>", "head": "", "ogImage": "https://raw.githubusercontent.com/0x1042/0x1042.github.io/master/synthwave_option_4.png", "createdDate": "2023-11-17", "dateLabelColor": "#A333D0"}, "P8": {"htmlDir": "docs/post/8.html", "labels": ["misc"], "postTitle": "\u865a\u62df\u673a\u4f7f\u7528\u5bbf\u4e3b\u673a\u4ee3\u7406", "postUrl": "post/8.html", "postSourceUrl": "https://github.com/0x1042/0x1042.github.io/issues/8", "commentNum": 0, "wordCount": 540, "description": "# mac \u865a\u62df\u673a\u4f7f\u7528\u4ee3\u7406 \r\n\r\n- [mac \u865a\u62df\u673a\u4f7f\u7528\u4ee3\u7406](#mac-\u865a\u62df\u673a\u4f7f\u7528\u4ee3\u7406)\r\n  - [\u5b89\u88c5`gost`](#\u5b89\u88c5gost)\r\n  - [\u6267\u884cgost](#\u6267\u884cgost)\r\n  - [\u865a\u62df\u673a\u914d\u7f6e](#\u865a\u62df\u673a\u914d\u7f6e)\r\n\r\n## \u5b89\u88c5`gost`\r\n\r\n```shell\r\n# \u5b89\u88c5gost \r\n\r\ngit clone https://github.com/go-gost/gost.git\r\ncd gost/cmd/gost\r\ngo build\r\n```\r\n\r\n## \u6267\u884cgost\r\n\r\n```shell\r\n# \u5bbf\u4e3b\u673a\u4fa7\u57288080\u7aef\u53e3\u7684HTTP\u4ee3\u7406\u670d\u52a1\uff0c\u4f7f\u7528\u672c\u5730\u76841087\u7aef\u53e3\u505a\u4e3a\u4e0a\u7ea7\u4ee3\u7406\u8fdb\u884c\u8f6c\u53d1\r\n./gost -L http://:8080 -F http://127.0.0.1:1087\r\n```\r\n\r\n## \u865a\u62df\u673a\u914d\u7f6e\r\n\r\n```shell\r\n\r\n# shell\r\nexport https_proxy=http://10.0.0.67:8080 http_proxy=http://10.0.0.67:8080\r\n# git \r\ngit config --global http.proxy 'http://10.0.0.67:8080'\r\n```\u3002", "top": 0, "createdAt": 1700297184, "style": "", "script": "<script src='https://blog.meekdai.com/Gmeek/plugins/GmeekTOC.js'></script><script src='https://blog.meekdai.com/Gmeek/plugins/lightbox.js'></script>", "head": "", "ogImage": "https://raw.githubusercontent.com/0x1042/0x1042.github.io/master/synthwave_option_4.png", "createdDate": "2023-11-18", "dateLabelColor": "#A333D0"}, "P9": {"htmlDir": "docs/post/9.html", "labels": ["c++"], "postTitle": "\u56db\u3001concept", "postUrl": "post/9.html", "postSourceUrl": "https://github.com/0x1042/0x1042.github.io/issues/9", "commentNum": 0, "wordCount": 3992, "description": "# concept\r\n\r\n- [concept](#concept)\r\n  - [\u57fa\u672c\u5b9a\u4e49\u548c\u4f7f\u7528](#\u57fa\u672c\u5b9a\u4e49\u548c\u4f7f\u7528)\r\n  - [\u7ea6\u675f\u8868\u8fbe\u5f0f](#\u7ea6\u675f\u8868\u8fbe\u5f0f)\r\n  - [`requires` \u8868\u8fbe\u5f0f](#requires-\u8868\u8fbe\u5f0f)\r\n  - [`requires` \u5b50\u53e5](#requires-\u5b50\u53e5)\r\n  - [`concepts` header](#concepts-header)\r\n\r\n## \u57fa\u672c\u5b9a\u4e49\u548c\u4f7f\u7528\r\n\r\n- \u57fa\u672c\u5b9a\u4e49\r\n```cpp\r\n// \u8bed\u6cd5\u683c\u5f0f\r\n// template<typename T>\r\n// concept concept_name = constraint-expression(\u7ea6\u675f\u8868\u8fbe\u5f0f);\r\n\r\ntemplate <typename T>\r\nconcept integral = std::is_integral_v<T>;\r\n\r\ntemplate <typename T>\r\nconcept floating_point = std::is_floating_point_v<T>;\r\n\r\ntemplate <typename T>\r\nconcept C = std::is_integral_v<T> || (sizeof(T) > 1);\r\n\r\ntemplate <typename T, typename U>\r\nconcept Derived = std::is_base_of_v<U, T>;\r\n\r\n```\r\n\r\n- \u57fa\u672c\u4f7f\u7528 **\u4f7f\u7528`concept_name` \u66ff\u6362 `typename`**\r\n\r\n```cpp\r\n\r\n// \u5b9a\u4e49 \r\nclass Base {\r\npublic:\r\n    [[nodiscard]] auto getValue() const -> int32_t { return value; }\r\n\r\n    explicit Base(const int32_t value)\r\n        : value(value) {\r\n    }\r\n\r\nprivate:\r\n    int32_t value;\r\n};\r\n\r\ntemplate <typename T>\r\nconcept DerivedBase = std::is_base_of_v<Base, T>;\r\n\r\n// \u4f7f\u7528concept_name \u66ff\u6362 typename\r\ntemplate <DerivedBase T>\r\nauto doGetValue(const T & t) -> int32_t {\r\n    return t.getValue();\r\n}\r\n\r\nclass DerivedClass : public Base {\r\npublic:\r\n    explicit DerivedClass(int32_t value)\r\n        : Base(value) {\r\n    }\r\n\r\n    [[nodiscard]] auto getValue() const -> int32_t { return 1024; }\r\n};\r\n```\r\n\r\n## \u7ea6\u675f\u8868\u8fbe\u5f0f\r\n\r\n- \u5408\u53d6\u5f0f conjunctions\uff0c\u903b\u8f91\u4e0e \r\n```cpp\r\ntemplate <typename T>\r\nconcept integral = std::is_integral_v<T>;\r\n\r\ntemplate <typename T>\r\nconcept signed_int = integral<T> && std::is_signed_v<T>;\r\n\r\n```\r\n- \u6790\u53d6\u5f0f disjunctions\uff0c\u903b\u8f91\u6216\r\n\r\n```cpp\r\ntemplate <typename T>\r\nconcept integral = std::is_integral_v<T>;\r\n\r\ntemplate <typename T>\r\nconcept floating_point = std::is_floating_point_v<T>;\r\n\r\ntemplate <typename T>\r\nconcept number = integral<T> || floating_point<T>;\r\n\r\n```\r\n- \u539f\u5b50\u7ea6\u675f atomic constraints \r\n\r\n```cpp\r\n```\r\n\r\n## `requires` \u8868\u8fbe\u5f0f\r\n\r\n> \u9664\u4e86\u4f7f\u7528`type traits` \u5b9a\u4e49\u6982\u5ff5\u4e4b\u5916\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 `requires` \u8868\u8fbe\u5f0f\u6765\u8868\u8fbe\u5bf9\u6a21\u677f\u53c2\u6570\u53ca\u5176\u5bf9\u8c61\u7684\u7279\u5f81\u8981\u6c42\r\n> \u6210\u5458\u51fd\u6570\u3001\u81ea\u7531\u51fd\u6570\u3001\u5173\u8054\u7c7b\u578b\u7b49\r\n\r\n- \u57fa\u672c\u8bed\u6cd5 \r\n\r\n```cpp\r\n\r\nrequires(\u53ef\u9009\u53c2\u6570\u5217\u8868) {\r\n    \u8868\u8fbe\u5f0f1\r\n    \u8868\u8fbe\u5f0f2\r\n}\r\n\r\n```\r\n\r\n- \u57fa\u672c\u7ea6\u675f \r\n```cpp\r\ntemplate <typename T>\r\nconcept Machine = requires(T t)\r\n{\r\n    // \u8981\u6c42\u5b58\u5728\u540c\u540d\u7684\u6210\u5458\u51fd\u6570\r\n    t.powerup();\r\n\r\n    t.powerDown();\r\n    // \u8981\u6c42\u5b58\u5728\u6210\u5458\u53d8\u91cfname\r\n    t.name;\r\n    // \u8981\u6c42\u5b58\u5728\u9759\u6001\u6210\u5458count\r\n    T::count;\r\n};\r\n\r\ntemplate <typename T>\r\nconcept Animal = requires(T t1, T t2, T t3)\r\n{\r\n    // \u8981\u6c42\u5b58\u5728 name \u6210\u5458\u53d8\u91cf\r\n    t1.name;\r\n\r\n    // \u8981\u6c42\u80fd\u591f\u8fdb\u884c\u5224\u7b49\u64cd\u4f5c\r\n    t1 == t2;\r\n\r\n    // \u8981\u6c42\u80fd\u591f\u8fdb\u884c \u52a0\u3001\u4e58\u64cd\u4f5c\r\n    t1 + t2 * t3;\r\n};\r\n\r\n```\r\n\r\n- \u7c7b\u578b\u7ea6\u675f \r\n```cpp\r\ntemplate <typename T>\r\nconcept C2 = requires\r\n{\r\n    // \u8981\u6c42\u5b58\u5728\u7c7b\u578b\u6210\u5458 type\r\n    typename T::type;\r\n\r\n    // \u8981\u6c42\u80fd\u591f\u4e0evector \u7ec4\u5408\uff0c\u5b9e\u73b0\u6a21\u677f\u5b9e\u4f8b\u5316\r\n    typename std::vector<T>;\r\n};\r\n```\r\n\r\n- \u7ec4\u5408\u7ea6\u675f **\u9700\u8981\u5927\u62ec\u53f7\u62ec\u8d77\u6765**\r\n```cpp\r\ntemplate <typename T>\r\nconcept C3 = requires(T t1, T t2) {\r\n    // \u8868\u8fbe\u5f0f\u4e0d\u80fd\u6709\u5f02\u5e38\r\n    { t1 = std::move(t2) } noexcept;\r\n\r\n    // \u8981\u6c42\u63a5\u53e3\u8fd4\u56de\u7c7b\u578b\u4e0eT\u4e00\u81f4\r\n    { t1.get_info() } -> std::same_as<T>;\r\n\r\n    // \u8981\u6c42\u63a5\u53e3\u8fd4\u56de\u7c7b\u578b\u80fd\u591f\u8f6c\u6362\u6210float\r\n    { t1.get_unit() } -> std::convertible_to<float>;\r\n};\r\n\r\n```\r\n\r\n- \u5d4c\u5957\u7ea6\u675f \r\n```cpp\r\ntemplate <typename T>\r\nconcept C3 = requires {\r\n    requires sizeof(T) > 4;\r\n};\r\n```\r\n\r\n## `requires` \u5b50\u53e5\r\n\r\n> \u7528\u4e8e\u5224\u65ad\u6240\u7ea6\u675f\u7684\u7c7b\u578b\u5728\u4e0a\u4e0b\u6587\u4e2d \u662f\u5426\u53ef\u884c\r\n\r\n**\u4e0a\u4e0b\u6587** \u611f\u89c9\u662f\u5e9f\u8bdd\uff0cconcept \u4e0d\u5c31\u662f\u4e3a\u4e86\u7b80\u5316\u6a21\u677f\u7f16\u7a0b\u4e48\uff0c\u80af\u5b9a\u53ea\u80fd\u5728\u6a21\u677f\u7f16\u7a0b\u4e2d\u5b58\u5728 \r\n\r\n1. \u51fd\u6570\u6a21\u677f\r\n2. \u6a21\u677f\u7c7b \r\n3. \u6a21\u677f\u7c7b\u7684\u6210\u5458\u51fd\u6570 \r\n\r\n```cpp\r\n// \u8fd9\u91cc\u662f require \u5b50\u53e5(\u533a\u522b\u4e0erequire \u8868\u8fbe\u5f0f)\r\ntemplate <typename T>\r\n    requires std::is_integral_v<T>\r\nauto add(T t1, T t2) -> T {\r\n    return t1 + t2;\r\n}\r\n\r\n// \u7f16\u8bd1\u6210\u529f\r\nadd(1, 2);\r\n//  note: candidate template ignored: constraints not satisfied [with T = double]\r\n//  note: because 'std::is_integral_v<double>' evaluated to false\r\n// add(1.2, 2.2);\r\n```\r\n\r\n## `concepts` header\r\n\r\n```cpp\r\n\r\n// \u60f3\u540c\u7c7b\r\ntemplate <typename T, typename U>\r\nconcept same_as = std::is_same_v<T, U>;\r\n\r\n// \u662f\u5426\u662f\u6d3e\u751f\u5173\u7cfb \r\ntemplate <typename Base, typename Derived>\r\nconcept derived_from = std::is_base_of_v<Base, Derived> && std::is_convertible_v<std::add_cv_t<Derived *>, std::add_cv_t<Base *>>;\r\n\r\n// \u662f\u5426\u53ef\u8f6c\u6362\r\ntemplate <typename F, typename T>\r\nconcept convertible_to = std::is_convertible_v<F, T> && requires(std::add_rvalue_reference_t<F> (&f)()) { static_cast<T>(f()); };\r\n\r\n```\u3002", "top": 0, "createdAt": 1700308307, "style": "", "script": "<script src='https://blog.meekdai.com/Gmeek/plugins/GmeekTOC.js'></script><script src='https://blog.meekdai.com/Gmeek/plugins/lightbox.js'></script>", "head": "", "ogImage": "https://raw.githubusercontent.com/0x1042/0x1042.github.io/master/synthwave_option_4.png", "createdDate": "2023-11-18", "dateLabelColor": "#A333D0"}, "P10": {"htmlDir": "docs/post/10.html", "labels": ["c++"], "postTitle": "\u4e94\u3001\u534f\u7a0b\u57fa\u672c\u4f7f\u7528", "postUrl": "post/10.html", "postSourceUrl": "https://github.com/0x1042/0x1042.github.io/issues/10", "commentNum": 0, "wordCount": 7754, "description": "# \u534f\u7a0b ~~\u5165\u95e8~~\r\n\r\n- [\u534f\u7a0b ~~\u5165\u95e8~~](#\u534f\u7a0b-\u5165\u95e8)\r\n  - [\u5b9a\u4e49](#\u5b9a\u4e49)\r\n  - [\u57fa\u672c\u539f\u7406](#\u57fa\u672c\u539f\u7406)\r\n    - [\u4e00\u3001\u534f\u7a0b\u6808\u5e27(\u7f16\u8bd1\u5668\u751f\u6210)](#\u4e00\u534f\u7a0b\u6808\u5e27\u7f16\u8bd1\u5668\u751f\u6210)\r\n    - [\u4e8c\u3001\u521b\u5efa\u534f\u7a0b](#\u4e8c\u521b\u5efa\u534f\u7a0b)\r\n    - [\u4e09\u3001\u534f\u7a0b\u6062\u590d(\\_\\_fibonacciResume)](#\u4e09\u534f\u7a0b\u6062\u590d__fibonacciresume)\r\n    - [\u56db\u3001\u9500\u6bc1](#\u56db\u9500\u6bc1)\r\n- [\u5b9e\u73b0\u4e00\u4e2a\u534f\u7a0b](#\u5b9e\u73b0\u4e00\u4e2a\u534f\u7a0b)\r\n  - [\u5b9a\u4e49 `Generator`](#\u5b9a\u4e49-generator)\r\n  - [\u5b9a\u4e49 `promise_type`](#\u5b9a\u4e49-promise_type)\r\n  - [\u5b9a\u4e49\u534f\u7a0b\u51fd\u6570](#\u5b9a\u4e49\u534f\u7a0b\u51fd\u6570)\r\n- [\u53c2\u8003](#\u53c2\u8003)\r\n\r\n\r\n## \u5b9a\u4e49 \r\n\r\nc++20\u7684\u534f\u7a0b\u5b9a\u4e49\u662f\u4e00\u4e2a**\u53ef\u6682\u505c\u3001\u53ef\u6062\u590d**\u7684\u51fd\u6570\uff0c\u5177\u4f53\u5230\u5b9e\u73b0\u4e0a\uff0c\u5982\u679c\u51fd\u6570\u5305\u542b`co_await\u3001co_yield\u3001co_return` \u5173\u952e\u5b57\u4e4b\u4e00\uff0c\u5c31\u4f1a\u88ab\u8ba4\u4e3a\u662f\u534f\u7a0b\r\n\r\n![coroutine](https://github.com/0x1042/0x1042.github.io/assets/7525242/c2954b77-82a6-4a8f-b3a8-740adb8a9852)\r\n\r\n\r\n- \u6682\u505c\uff0c\u5373\u610f\u5473\u7740\u9700\u8981\u4fdd\u5b58\u51fd\u6570\u6267\u884c\u8fc7\u7a0b\u4e2d\u4ea7\u751f\u7684\u4e0a\u4e0b\u6587\r\n- \u6062\u590d\uff0c\u8c03\u7528\u65b9\u53ef\u4ee5\u83b7\u53d6\u5230\u8fd9\u4e2a\u534f\u7a0b\u5728\u5806\u4e0a\u7684\u63a7\u5236\u5165\u53e3\r\n\r\n| \u5173\u952e\u5b57      | \u8bf4\u660e         |\r\n| ----------- | ------------ |\r\n| `co_await`  | \u6302\u8d77         |\r\n| `co_yield`  | \u6302\u8d77\u5e76\u8fd4\u56de\u503c |\r\n| `co_return` | \u7ed3\u675f\u534f\u7a0b     |\r\n\r\n## \u57fa\u672c\u539f\u7406 \r\n\r\n\u53c2\u8003 [C++20 Coroutine][1],[C++20\u534f\u7a0b][2].  \u6838\u5fc3\u662f\u6709\u7f16\u8bd1\u5668\u9488\u5bf9\u534f\u7a0b\u51fd\u6570\u505apatch\uff0c\u751f\u6210\u65b0\u7684\u4ee3\u7801\uff0c\u533a\u522b\u4e8e\u6709\u6808\u534f\u7a0b\uff0c\u9700\u8981\u6709\u5bf9\u5e94\u7684runtime\u6765\u8c03\u5ea6.\r\n\r\n\u53ef\u4ee5\u5728 [cppinsights.io](https://cppinsights.io) \u4e0a\u6253\u5f00 `Show coroutine transformation` \u9009\u9879\uff0c\u67e5\u770b\u8be6\u7ec6\u7684\u7ec6\u8282\uff0c\u751f\u6210\u7684\u7ed3\u679c\u4e2d\u6709\u6ce8\u91ca\uff0c\u662f\u4e00\u4e2a\u8fd1\u4f3c\u7684\u7ed3\u679c\r\n\r\n### \u4e00\u3001\u534f\u7a0b\u6808\u5e27(\u7f16\u8bd1\u5668\u751f\u6210)\r\n\r\n```cpp\r\nstruct __fibonacciFrame\r\n{\r\n  void (*resume_fn)(__fibonacciFrame *);  // \u534f\u7a0b\u6062\u590d\u51fd\u6570 \r\n  void (*destroy_fn)(__fibonacciFrame *); // \u534f\u7a0b\u9500\u6bc1\u51fd\u6570 \r\n  std::coroutine_traits<std::coroutine_handle<promise>, int>::promise_type __promise; // \u534f\u7a0b\u7684promise_type\r\n  int __suspend_index;\r\n  bool __initial_await_suspend_called;\r\n  int a;\r\n  int i;\r\n  int j;\r\n  std::suspend_never __suspend_47_27;\r\n  std::suspend_always __suspend_51_9;\r\n  std::suspend_always __suspend_47_27_1;\r\n};\r\n```\r\n\r\n### \u4e8c\u3001\u521b\u5efa\u534f\u7a0b\r\n\r\n> \u8c03\u7528\u65b9\u8c03\u7528\u534f\u7a0b\u51fd\u6570\u65f6(`fibonacci()`)\uff0c\u7f16\u8bd1\u5668\u4f1a\u751f\u6210\u7c7b\u4f3c\u4e0b\u9762\u7684\u4ee3\u7801, \u8fd9\u4e2a\u51fd\u6570\u7684\u8fd4\u56de\u503c\u65f6 `std::coroutine_handle<promise>`,\u4e5f\u5c31\u662f\u4e0a\u9762\u8bf4\u7684 \u534f\u7a0b\u7684\u63a7\u5236\u70b9(\u53e5\u67c4)\r\n> \u800c\u8fd9\u4e2a\u8fd4\u56de\u503c\u662f\u901a\u8fc7 \u534f\u7a0b\u7684 promise_type \u5bf9\u5e94\u7684 get_return_object \u51fd\u6570\u83b7\u53d6\r\n\r\n```cpp\r\nstd::coroutine_handle<promise> fibonacci(int a)\r\n{\r\n  /* Allocate the frame including the promise */\r\n  /* Note: The actual parameter new is __builtin_coro_size */\r\n  __fibonacciFrame * __f = reinterpret_cast<__fibonacciFrame *>(operator new(sizeof(__fibonacciFrame)));\r\n  __f->__suspend_index = 0;\r\n  __f->__initial_await_suspend_called = false;\r\n  __f->a = std::forward<int>(a);\r\n  \r\n  /* Construct the promise. */\r\n  new (&__f->__promise)std::coroutine_traits<std::coroutine_handle<promise>, int>::promise_type{__f->a};\r\n  \r\n  /* Forward declare the resume and destroy function. */\r\n  void __fibonacciResume(__fibonacciFrame * __f);\r\n  void __fibonacciDestroy(__fibonacciFrame * __f);\r\n  \r\n  /* Assign the resume and destroy function pointers. */\r\n  __f->resume_fn = &__fibonacciResume;\r\n  __f->destroy_fn = &__fibonacciDestroy;\r\n  \r\n  /* Call the made up function with the coroutine body for initial suspend.\r\n     This function will be called subsequently by coroutine_handle<>::resume()\r\n     which calls __builtin_coro_resume(__handle_) */\r\n  __fibonacciResume(__f);\r\n  \r\n  \r\n  return __f->__promise.get_return_object();\r\n}\r\n```\r\n\r\n\r\n### \u4e09\u3001\u534f\u7a0b\u6062\u590d(__fibonacciResume)\r\n\r\n> \u8fd9\u4e2a\u662f\u534f\u7a0b\u7684\u6838\u5fc3\u6267\u884c\u903b\u8f91\uff0c\u4e5f\u5c31\u662f\u7f16\u8bd1\u5668patch\u540e\u7684\u7ed3\u679c \r\n> \u6838\u5fc3\u662f \u8c03\u7528\u534f\u7a0b\u7684promise_type\u76f8\u5173\u7684\u65b9\u6cd5  \r\n\r\n```cpp\r\n/* This function invoked by coroutine_handle<>::resume() */\r\nvoid __fibonacciResume(__fibonacciFrame * __f)\r\n{\r\n  try \r\n  {\r\n    /* Create a switch to get to the correct resume point */\r\n    switch(__f->__suspend_index) {\r\n      case 0: break;\r\n      case 1: goto __resume_fibonacci_1;\r\n      case 2: goto __resume_fibonacci_2;\r\n    }\r\n    \r\n    /* co_await insights.cpp:47 */\r\n    __f->__suspend_47_27 = __f->__promise.initial_suspend();\r\n    if(!__f->__suspend_47_27.await_ready()) {\r\n      __f->__suspend_47_27.await_suspend(std::coroutine_handle<promise>::from_address(static_cast<void *>(__f)).operator std::coroutine_handle<void>());\r\n      __f->__suspend_index = 1;\r\n      __f->__initial_await_suspend_called = true;\r\n      return;\r\n    } \r\n    \r\n    __resume_fibonacci_1:\r\n    __f->__suspend_47_27.await_resume();\r\n    __f->i = 1;\r\n    __f->j = __f->a;\r\n    while(1) {\r\n      std::tie(__f->i, __f->j).operator=(std::make_pair(__f->j, __f->i + __f->j));\r\n      \r\n      /* co_yield insights.cpp:51 */\r\n      __f->__suspend_51_9 = __f->__promise.yield_value(__f->j);\r\n      if(!__f->__suspend_51_9.await_ready()) {\r\n        __f->__suspend_51_9.await_suspend(std::coroutine_handle<promise>::from_address(static_cast<void *>(__f)).operator std::coroutine_handle<void>());\r\n        __f->__suspend_index = 2;\r\n        return;\r\n      } \r\n      \r\n      __resume_fibonacci_2:\r\n      __f->__suspend_51_9.await_resume();\r\n    }\r\n    \r\n    goto __final_suspend;\r\n  } catch(...) {\r\n    if(!__f->__initial_await_suspend_called) {\r\n      throw ;\r\n    } \r\n    \r\n    __f->__promise.unhandled_exception();\r\n  }\r\n  \r\n  __final_suspend:\r\n  \r\n  /* co_await insights.cpp:47 */\r\n  __f->__suspend_47_27_1 = __f->__promise.final_suspend();\r\n  if(!__f->__suspend_47_27_1.await_ready()) {\r\n    __f->__suspend_47_27_1.await_suspend(std::coroutine_handle<promise>::from_address(static_cast<void *>(__f)).operator std::coroutine_handle<void>());\r\n  } \r\n  \r\n  ;\r\n}\r\n```\r\n\r\n### \u56db\u3001\u9500\u6bc1 \r\n\r\n```cpp\r\n/* This function invoked by coroutine_handle<>::destroy() */\r\nvoid __fibonacciDestroy(__fibonacciFrame * __f)\r\n{\r\n  /* destroy all variables with dtors */\r\n  __f->~__fibonacciFrame();\r\n  /* Deallocating the coroutine frame */\r\n  /* Note: The actual argument to delete is __builtin_coro_frame with the promise as parameter */\r\n  operator delete(static_cast<void *>(__f));\r\n}\r\n```\r\n\r\n**\u4ece\u7f16\u8bd1\u5668\u751f\u6210\u7684\u4ee3\u7801\u770b\uff0c\u5982\u679c\u8981\u81ea\u5df1\u5b9e\u73b0\u534f\u7a0b\uff0c\u5c31\u9700\u8981\u81ea\u5b9a\u4e49\u8fd9\u4e2a\u534f\u7a0b\u7684promise_type**\r\n\r\n`promise_type \u5fc5\u987b\u5305\u542b\u4e00\u4e0b\u6210\u5458\u51fd\u6570`\r\n\r\n```cpp\r\nSOME_TYPE get_return_object();//\u7528\u4e8e\u5f97\u5230\u534f\u7a0b\u51fd\u6570\u5f00\u59cb\u6267\u884c\u7684\u8fd4\u56de\u503c\r\nSOME_TYPE initial_suspend();//\u7528\u4e8e\u534f\u7a0b\u51fd\u6570\u5f00\u59cb\u6267\u884c\u65f6\u6267\u884c\u6682\u505c\u64cd\u4f5c\r\nvoid return_void();//\u534f\u7a0b\u51fd\u6570\u5185\u90e8co_return\u7ec8\u6b62\u8fd4\u56devoid\u65f6\u6267\u884c\u7684\u64cd\u4f5c\uff08\u548c\u4e0b\u9762return_value\u540c\u65f6\u53ea\u80fd\u6709\u4e00\u4e2a\u5b58\u5728\uff09\r\nvoid return_value(SOME_TYPE);//\u534f\u7a0b\u51fd\u6570\u5185\u90e8co_return\u7ec8\u6b62\u8fd4\u56de\u975evoid\u503c\u65f6\u6267\u884c\u7684\u64cd\u4f5c\r\nSOME_TYPE final_suspend()noexcept;//\u7528\u4e8e\u534f\u7a0b\u51fd\u6570\u7ed3\u675f\u6267\u884c\u65f6\u6267\u884c\u6682\u505c\u64cd\u4f5c\r\nvoid unhandled_exception();//\u7528\u4e8e\u534f\u7a0b\u51fd\u6570\u5185\u90e8\u6709\u672a\u63a5\u4f4f\u7684\u5f02\u5e38\u65f6\u6267\u884c\r\nauto ield_value();\r\n```\r\n\r\n\r\n# \u5b9e\u73b0\u4e00\u4e2a\u534f\u7a0b \r\n\r\n## \u5b9a\u4e49 `Generator`\r\n\r\n**\u7ea6\u675f\u8303\u578b\u7684\u7c7b\u578b\u7ea6\u675f\u662f\u65e0\u7b26\u53f7\u6574\u6570**\r\n\r\n```cpp\r\ntemplate <typename T>\r\nconcept integral = std::is_integral_v<T> && !std::is_signed_v<T>;\r\n\r\ntemplate <integral T>\r\nstruct FibPromise;\r\n\r\ntemplate <integral T>\r\nstruct FibGenerator {\r\n    using promise_type = FibPromise<T>;\r\n\r\n    std::coroutine_handle<promise_type> handler;\r\n\r\n    auto next() -> int {\r\n        handler.resume();\r\n        return handler.promise().value;\r\n    }\r\n\r\n    explicit FibGenerator(promise_type * p)\r\n        : handler{std::coroutine_handle<promise_type>::from_promise(*p)} {\r\n    }\r\n\r\n    ~FibGenerator() {\r\n        handler.destroy();\r\n    }\r\n};\r\n```\r\n\r\n## \u5b9a\u4e49 `promise_type`\r\n\r\n```cpp\r\ntemplate <integral T>\r\nstruct FibPromise {\r\n    std::exception_ptr exception;\r\n\r\n    FibPromise() = default;\r\n\r\n    FibPromise(T val)\r\n        : value(val) {\r\n    }\r\n\r\n    FibGenerator<T> get_return_object() { return FibGenerator{this}; }\r\n\r\n    auto initial_suspend() noexcept -> std::suspend_always { return {}; }\r\n\r\n    auto final_suspend() noexcept -> std::suspend_always { return {}; }\r\n\r\n    auto yield_value(T val) -> std::suspend_always {\r\n        value = val;\r\n        return {};\r\n    }\r\n\r\n    auto return_value(T val) -> std::suspend_always {\r\n        value = val;\r\n        return {};\r\n    }\r\n    // void return_void() {}\r\n\r\n    void unhandled_exception() { exception = std::current_exception(); }\r\n\r\n    T value;\r\n};\r\n```\r\n\r\n## \u5b9a\u4e49\u534f\u7a0b\u51fd\u6570\r\n\r\n```cpp\r\ninline FibGenerator<uint32_t> fib(uint32_t n) {\r\n    uint32_t first = 0;\r\n    uint32_t second = 1;\r\n    while (n--) {\r\n        co_yield second;\r\n        const auto tmp = first;\r\n        first = second;\r\n        second += tmp;\r\n    }\r\n}\r\n\r\n\r\n// \u6d4b\u8bd5 \r\nvoid test_fib() {\r\n    auto gen = fib(10);\r\n    for (int i = 0; i < 10; i++) {\r\n        std::clog << gen.next() << '\\n';\r\n    }\r\n}\r\n```\r\n\r\n# \u53c2\u8003 \r\n\r\n[1]: https://owent.net/2019/1904.html  'C++20 Coroutine'\r\n[2]: https://z3475.work/post/c20-xie-cheng-mai-xiang-yi-bu-part1-zui-jian-dan-de-xie-cheng/  '[C++20\u534f\u7a0b]\u8fc8\u5411\u5f02\u6b65 Part1-\u6700\u7b80\u5355\u7684\u534f\u7a0b'\r\n\r\n\r\n\u3002", "top": 0, "createdAt": 1700317207, "style": "", "script": "<script src='https://blog.meekdai.com/Gmeek/plugins/GmeekTOC.js'></script><script src='https://blog.meekdai.com/Gmeek/plugins/lightbox.js'></script>", "head": "", "ogImage": "https://raw.githubusercontent.com/0x1042/0x1042.github.io/master/synthwave_option_4.png", "createdDate": "2023-11-18", "dateLabelColor": "#A333D0"}, "P11": {"htmlDir": "docs/post/11.html", "labels": ["c++"], "postTitle": "\u516d\u3001\u534f\u7a0b\u5b9e\u73b0\u7ec6\u8282", "postUrl": "post/11.html", "postSourceUrl": "https://github.com/0x1042/0x1042.github.io/issues/11", "commentNum": 0, "wordCount": 2661, "description": "# \u534f\u7a0b\u5b9e\u73b0\u7ec6\u8282\r\n\r\n- [\u534f\u7a0b\u5b9e\u73b0\u7ec6\u8282](#\u534f\u7a0b\u5b9e\u73b0\u7ec6\u8282)\r\n- [\u534f\u7a0b\u7684\u751f\u547d\u5468\u671f](#\u534f\u7a0b\u7684\u751f\u547d\u5468\u671f)\r\n  - [`promise_type`](#promise_type)\r\n  - [\u534f\u7a0b\u7c7b](#\u534f\u7a0b\u7c7b)\r\n  - [`coroutine_handle`](#coroutine_handle)\r\n- [\u534f\u7a0b\u7684\u8c03\u5ea6](#\u534f\u7a0b\u7684\u8c03\u5ea6)\r\n  - [`co_await`](#co_await)\r\n  - [`co_yield`](#co_yield)\r\n\r\n\r\n# \u534f\u7a0b\u7684\u751f\u547d\u5468\u671f \r\n\r\n![call_routine](https://github.com/0x1042/0x1042.github.io/assets/7525242/f155fdff-fff4-49eb-88cb-500b55bd63ea)\r\n\r\n\r\n1. \u8c03\u7528\u51fd\u6570\u5728**\u5806**\u4e0a\uff0c\u521b\u5efa\u534f\u7a0b\u5e27(`coroutine_frame`)\uff0c\u91cc\u9762\u5305\u542b\u4e86\u534f\u7a0b\u7684`promise_type`,\u534f\u7a0b\u7684\u5b9e\u53c2\uff0c\u5f53\u524d\u4fdd\u5b58\u7684\u5c40\u90e8\u53d8\u91cf\uff0c\u534f\u7a0b\u5185\u90e8\u72b6\u6001\u5982\u6302\u8d77\u70b9. \u7531\u7f16\u8bd1\u5668\u5b9e\u73b0\r\n2. \u521b\u5efa\u534f\u7a0b\u5e27\u4e4b\u540e\uff0c\u4f1a\u8fd4\u56de\u7ed9\u8c03\u7528\u8005`coroutine_handle`,\u4e5f\u53eb\u534f\u7a0b\u53e5\u67c4\uff0c\u662f\u63a7\u5236\u534f\u7a0b\u7684\u552f\u4e00\u5165\u53e3\uff0c\u53ef\u4ee5\u88ab\u4f20\u9012\u5230\u5176\u4ed6\u5730\u65b9\r\n3. \u8c03\u7528\u88ab\u8c03\u7528\u534f\u7a0b\uff0c\u534f\u7a0b\u5f00\u59cb\u6267\u884c\r\n4. \u88ab\u8c03\u7528\u534f\u7a0b\u6267\u884c\u5230\u67d0\u4e2a\u7279\u5b9a\u70b9\uff0c\u901a\u8fc7`co_await/co_yield` \u5c06\u5f53\u524d\u534f\u7a0b\u4f11\u7720\uff0c\u8c03\u7528\u8005\u6062\u590d\u539f\u672c\u7684\u6267\u884c\u6d41\u7a0b\u7ee7\u7eed\u6267\u884c\u5269\u4f59\u4ee3\u7801\r\n5. \u534f\u7a0b\u6062\u590d\u8005\uff08\u6bd4\u5982\u53e6\u4e00\u4e2a\u7ebf\u7a0b\uff09\u901a\u8fc7`coroutine_handle`\u7684\u6062\u590d\u51fd\u6570`resume` \u6062\u590d\u534f\u7a0b\u6267\u884c\r\n6. \u534f\u7a0b\u5728\u6062\u590d\u8005\u4e0a\u7ee7\u7eed\u6267\u884c\uff0c\u7ed3\u675f\u540e\u901a\u8fc7 `coroutine_handle` \u9500\u6bc1\u534f\u7a0b\u5e27\u3002", "top": 0, "createdAt": 1700334194, "style": "", "script": "<script src='https://blog.meekdai.com/Gmeek/plugins/GmeekTOC.js'></script><script src='https://blog.meekdai.com/Gmeek/plugins/lightbox.js'></script>", "head": "", "ogImage": "https://raw.githubusercontent.com/0x1042/0x1042.github.io/master/synthwave_option_4.png", "createdDate": "2023-11-19", "dateLabelColor": "#A333D0"}, "P12": {"htmlDir": "docs/post/12.html", "labels": ["c++"], "postTitle": "\u4e03\u3001`constexpr` ", "postUrl": "post/12.html", "postSourceUrl": "https://github.com/0x1042/0x1042.github.io/issues/12", "commentNum": 0, "wordCount": 5208, "description": "# constexpr \u5143\u7f16\u7a0b\r\n\r\n- [constexpr \u5143\u7f16\u7a0b](#constexpr-\u5143\u7f16\u7a0b)\r\n  - [`constexpr` \u53d8\u91cf](#constexpr-\u53d8\u91cf)\r\n  - [`constinit` \u521d\u59cb\u5316](#constinit-\u521d\u59cb\u5316)\r\n  - [`constexpr` \u51fd\u6570](#constexpr-\u51fd\u6570)\r\n  - [`consteval` \u51fd\u6570](#consteval-\u51fd\u6570)\r\n- [`if constexpr`](#if-constexpr)\r\n- [\u6298\u53e0\u8868\u8fbe\u5f0f](#\u6298\u53e0\u8868\u8fbe\u5f0f)\r\n  - [\u53f3\u6298\u53e0](#\u53f3\u6298\u53e0)\r\n  - [\u5de6\u6298\u53e0](#\u5de6\u6298\u53e0)\r\n- [\u4ee4\u4eba\u5934\u5927\u7684`const`](#\u4ee4\u4eba\u5934\u5927\u7684const)\r\n  - [`int const* ptr`](#int-const-ptr)\r\n  - [`int * const ptr`](#int--const-ptr)\r\n  - [\u7ec8\u6781CASE](#\u7ec8\u6781case)\r\n\r\n## `constexpr` \u53d8\u91cf\r\n\r\n**\u4e0e`const`\u53d8\u91cf\u7684\u533a\u522b\uff1f**\r\n\r\n- `constexpr` \u9700\u8981\u4fdd\u8bc1\u8868\u8fbe\u5f0f\u53ef\u5728\u7f16\u8bd1\u65f6\u6c42\u503c\uff0c\u5426\u5219\u4f1a\u51fa\u73b0\u7f16\u8bd1\u9519\u8bef \r\n- `const` \u8868\u8fbe\u5f0f\u62e5\u6709\u5e38\u91cf\u6027\u3002", "top": 0, "createdAt": 1700995469, "style": "", "script": "<script src='https://blog.meekdai.com/Gmeek/plugins/GmeekTOC.js'></script><script src='https://blog.meekdai.com/Gmeek/plugins/lightbox.js'></script>", "head": "", "ogImage": "https://raw.githubusercontent.com/0x1042/0x1042.github.io/master/synthwave_option_4.png", "createdDate": "2023-11-26", "dateLabelColor": "#A333D0"}, "P13": {"htmlDir": "docs/post/13.html", "labels": ["c++"], "postTitle": "c++\u4e2d\u83b7\u53d6\u7c7b\u5b9a\u4e49\u7684\u5b8c\u6574\u540d\u5b57", "postUrl": "post/13.html", "postSourceUrl": "https://github.com/0x1042/0x1042.github.io/issues/13", "commentNum": 0, "wordCount": 987, "description": "# \u8bf4\u660e\r\n\r\n> \u4ec5\u9650\u4e8e\u8bfb\u53d6\u7c7b\u5b9a\u4e49\r\n\r\n```cpp\r\n\r\n#include <memory>\r\n#include <string>\r\n\r\n#include <cxxabi.h>\r\n\r\ntemplate <typename T>\r\nstruct Name {\r\n    Name() {\r\n        std::unique_ptr<char, decltype(free) *> real_name(abi::__cxa_demangle(typeid(T).name(), nullptr, nullptr, nullptr), free);\r\n        this->name = std::string(real_name.get());\r\n    }\r\n\r\n    std::string name{};\r\n};\r\n\r\n```\r\n\r\n\u6d4b\u8bd5 \r\n\r\n```cpp\r\nnamespace tests {\r\n\r\nnamespace a::b::c {\r\n    class A {};\r\n} // namespace a::b::c\r\n\r\nnamespace na {\r\n    class B {};\r\n} // namespace na\r\n\r\nnamespace a::b::d {\r\n    struct C {};\r\n} // namespace a::b::d\r\n\r\nTEST_CASE('test name', '[name]') {\r\n    // tests::a::b::c::A\r\n    LOG(INFO) << 'infra::Name<a::b::c::A>().name:' << infra::Name<a::b::c::A>().name;\r\n    // tests::na::B\r\n    LOG(INFO) << 'infra::Name<na::B>().name:' << infra::Name<na::B>().name;\r\n    // tests::a::b::d::C\r\n    LOG(INFO) << 'infra::Name<a::b::d::C>().name:' << infra::Name<a::b::d::C>().name;\r\n}\r\n} // namespace tests\r\n```\r\n\u3002", "top": 0, "createdAt": 1701098900, "style": "", "script": "<script src='https://blog.meekdai.com/Gmeek/plugins/GmeekTOC.js'></script><script src='https://blog.meekdai.com/Gmeek/plugins/lightbox.js'></script>", "head": "", "ogImage": "https://raw.githubusercontent.com/0x1042/0x1042.github.io/master/synthwave_option_4.png", "createdDate": "2023-11-27", "dateLabelColor": "#A333D0"}, "P14": {"htmlDir": "docs/post/14.html", "labels": ["c++"], "postTitle": "\u667a\u80fd\u6307\u9488\u4ee5\u53canew", "postUrl": "post/14.html", "postSourceUrl": "https://github.com/0x1042/0x1042.github.io/issues/14", "commentNum": 0, "wordCount": 3869, "description": "# \u667a\u80fd\u6307\u9488\u81ea\u5b9a\u4e49deleter\r\n\r\n- [\u667a\u80fd\u6307\u9488\u81ea\u5b9a\u4e49deleter](#\u667a\u80fd\u6307\u9488\u81ea\u5b9a\u4e49deleter)\r\n  - [\u51fd\u6570\u6307\u9488](#\u51fd\u6570\u6307\u9488)\r\n  - [\u51fd\u6570\u5bf9\u8c61](#\u51fd\u6570\u5bf9\u8c61)\r\n  - [`lambda`\u51fd\u6570](#lambda\u51fd\u6570)\r\n- [\u5bf9\u8c61\u6c60](#\u5bf9\u8c61\u6c60)\r\n- [`new`](#new)\r\n  - [`new operator` \u662f\u5173\u952e\u5b57](#new-operator-\u662f\u5173\u952e\u5b57)\r\n  - [`operator new` \u662f\u4e00\u4e2a\u51fd\u6570](#operator-new-\u662f\u4e00\u4e2a\u51fd\u6570)\r\n  - [`placement new` \u662f`operator new`\u7684\u91cd\u8f7d](#placement-new-\u662foperator-new\u7684\u91cd\u8f7d)\r\n\r\n## \u51fd\u6570\u6307\u9488 \r\n\r\n```cpp\r\nvoid deleteVec(int * ptr) {\r\n    delete[] ptr;\r\n}\r\n\r\nTEST_CASE('test deleter', '[fb_pointer]') {\r\n    std::unique_ptr<int, decltype(&deleteVec)> my_ptr(new int[5], deleteVec);\r\n}\r\n```\r\n## \u51fd\u6570\u5bf9\u8c61 \r\n\r\n```cpp\r\ntemplate <typename T>\r\nstruct CustomDeleter {\r\n    void operator()(T * t) const {\r\n        delete t;\r\n        std::clog << 'CustomDeleter run... delete type is ' << infra::Name<T>().name << '\\n';\r\n    }\r\n};\r\n\r\nTEST_CASE('test deleter', '[fb_obj]') {\r\n    std::unique_ptr<int, CustomDeleter<int>> int_ptr(new int);\r\n    std::unique_ptr<double, CustomDeleter<double>> double_ptr(new double);\r\n}\r\n```\r\n\r\n## `lambda`\u51fd\u6570\r\n\r\n```cpp\r\nTEST_CASE('test deleter', '[lambda]') {\r\n    auto deleter = [](int * ptr) {\r\n        delete[] ptr;\r\n        std::clog << ' delete by lambda ...' << '\\n';\r\n    };\r\n    std::unique_ptr<int, decltype(deleter)> arr(new int[5], deleter);\r\n}\r\n```\r\n\r\n# \u5bf9\u8c61\u6c60\r\n\r\n\r\n- \u8981\u7f13\u5b58\u7684\u5bf9\u8c61\r\n\r\n```cpp\r\nclass Object {\r\npublic:\r\n    Object(const Object &) = default;\r\n    Object(Object &&) = delete;\r\n    auto operator=(const Object &) -> Object & = default;\r\n    auto operator=(Object &&) -> Object & = delete;\r\n    explicit Object(int id) : id(id) { std::clog << 'Object ' << id << ' is created.\\n'; }\r\n\r\n    ~Object() { std::cout << 'Object ' << id << ' is destroyed.\\n'; }\r\n\r\n    void doSomething() const;\r\n\r\n    [[nodiscard]] auto getId() const -> int;\r\n    void setId(int id_);\r\n\r\nprivate:\r\n    int id;\r\n};\r\n```\r\n\r\n- \u5b9a\u4e49\u5bf9\u8c61\u6c60 \r\n\r\n```cpp\r\n\r\n// pool.h \r\nclass ObjectPool {\r\npublic:\r\n    struct ObjectDeleter {\r\n        void operator()(Object * obj) {\r\n            std::clog << 'fake delete ' << obj->getId() << '\\n';\r\n            obj->setId(0);\r\n            pool.push_back(obj);\r\n        }\r\n    };\r\n\r\n    static auto acquire() -> std::unique_ptr<Object, ObjectDeleter>;\r\n\r\n    static auto size() -> size_t;\r\n\r\nprivate:\r\n    inline static std::vector<Object *> pool; // \u5bf9\u8c61\u6c60\r\n};\r\n\r\n// pool.cpp\r\nauto ObjectPool::acquire() -> std::unique_ptr<Object, ObjectDeleter> {\r\n    if (pool.empty()) {\r\n        // return std::unique_ptr<Object, ObjectDeleter>(new Object(0), ObjectDeleter());\r\n        return {new Object(0), ObjectDeleter()};\r\n    }\r\n    Object * obj = pool.back();\r\n    pool.pop_back();\r\n    // return std::unique_ptr<Object, ObjectDeleter>(obj, ObjectDeleter());\r\n    return {obj, ObjectDeleter()};\r\n}\r\n\r\nauto ObjectPool::size() -> size_t {\r\n    return pool.size();\r\n}\r\n```\r\n\r\n\r\n# `new`\r\n\r\n## `new operator` \u662f\u5173\u952e\u5b57 \r\n\r\n\u5c31\u662f`new` \u5173\u952e\u5b57 `T *t = new T();` \u80cc\u540e\u5305\u542b\u4e24\u4e2a\u52a8\u4f5c\r\n\r\n1. \u8c03\u7528 `operator new` \u5206\u914d\u5185\u5b58 ,\u5e76\u8fd4\u56de\u6307\u5411\u8be5\u5bf9\u8c61\u7684\u6307\u9488 \r\n2. \u8c03\u7528`T`\u7684\u6784\u9020\u51fd\u6570 \r\n3. \u4e0d\u53ef\u88ab\u91cd\u8f7d \r\n\r\n\r\n## `operator new` \u662f\u4e00\u4e2a\u51fd\u6570 \r\n\r\n\u662f\u4e00\u4e2a\u52a8\u6001\u5185\u5b58\u5206\u914d\u7684\u51fd\u6570 \r\n\r\n```cpp\r\nvoid* operator new(std::size_t size);\r\n```\r\n\r\n- \u53ea\u5206\u914d\u6240\u8981\u6c42\u7684\u7a7a\u95f4\uff0c\u4e0d\u8c03\u7528\u76f8\u5173\u5bf9\u8c61\u7684\u6784\u9020\u51fd\u6570\r\n- \u5f53\u65e0\u6cd5\u6ee1\u8db3\u6240\u8981\u6c42\u5206\u914d\u7684\u7a7a\u95f4\u65f6\r\n  - \u5982\u679c\u6709`new_handler`\uff0c\u5219\u8c03\u7528`new_handler`\r\n  - \u5426\u5219\u5982\u679c\u6ca1\u8981\u6c42\u4e0d\u629b\u51fa\u5f02\u5e38\uff08\u4ee5nothrow\u53c2\u6570\u8868\u8fbe\uff09\uff0c\u5219\u6267\u884cbad_alloc\u5f02\u5e38\uff0c\u5426\u5219\r\n  - \u5426\u5219\u8fd4\u56de0\r\n- \u53ef\u4ee5\u88ab\u91cd\u8f7d\uff0c\u91cd\u8f7d\u65f6\uff0c\u8fd4\u56de\u7c7b\u578b\u5fc5\u987b\u58f0\u660e\u4e3a`void*`\r\n- \u7b2c\u4e00\u4e2a\u53c2\u6570\u7c7b\u578b\u5fc5\u987b\u4e3a\u8868\u8fbe\u8981\u6c42\u5206\u914d\u7a7a\u95f4\u7684\u5927\u5c0f\uff08\u5b57\u8282\uff09\uff0c\u7c7b\u578b\u4e3asize_t,\u53ef\u4ee5\u6709\u5176\u4ed6\u53c2\u6570\r\n\r\n\r\n## `placement new` \u662f`operator new`\u7684\u91cd\u8f7d\r\n\r\n> \u539f\u578b\r\n\r\n```cpp\r\nvoid *operator new( size_t, void * p ) throw() { return p; }\r\n```\r\n\r\n1. \u662f\u91cd\u8f7d`operator new`\u7684\u4e00\u4e2a\u6807\u51c6\u3001\u5168\u5c40\u7684\u7248\u672c\uff0c\u5b83\u4e0d\u80fd\u591f\u88ab\u81ea\u5b9a\u4e49\u7684\u7248\u672c\u4ee3\u66ff(\u4e0d\u50cf\u666e\u901a\u7248\u672c\u7684operator new\u548coperator delete\u80fd\u591f\u88ab\u66ff\u6362)\r\n2. \u6267\u884c\u5ffd\u7565`size_t`\u53c2\u6570\uff0c\u53ea\u8fd4\u56de\u7b2c\u4e8c\u4e2a\u53c2\u6570\u3002", "top": 0, "createdAt": 1701442561, "style": "", "script": "<script src='https://blog.meekdai.com/Gmeek/plugins/GmeekTOC.js'></script><script src='https://blog.meekdai.com/Gmeek/plugins/lightbox.js'></script>", "head": "", "ogImage": "https://raw.githubusercontent.com/0x1042/0x1042.github.io/master/synthwave_option_4.png", "createdDate": "2023-12-01", "dateLabelColor": "#A333D0"}, "P15": {"htmlDir": "docs/post/15.html", "labels": ["ml"], "postTitle": "ML hello world", "postUrl": "post/15.html", "postSourceUrl": "https://github.com/0x1042/0x1042.github.io/issues/15", "commentNum": 0, "wordCount": 4400, "description": "# \u795e\u7ecf\u7f51\u7edc\u7b80\u4ecb\r\n\r\n- [\u795e\u7ecf\u7f51\u7edc\u7b80\u4ecb](#\u795e\u7ecf\u7f51\u7edc\u7b80\u4ecb)\r\n  - [\u8bad\u7ec3\u8fc7\u7a0b](#\u8bad\u7ec3\u8fc7\u7a0b)\r\n  - [\u4f20\u64ad](#\u4f20\u64ad)\r\n  - [\u5982\u4f55\u8ba1\u7b97\u635f\u5931](#\u5982\u4f55\u8ba1\u7b97\u635f\u5931)\r\n  - [\u5982\u4f55\u4f18\u5316](#\u5982\u4f55\u4f18\u5316)\r\n  - [\u68af\u5ea6\u4e0b\u964d](#\u68af\u5ea6\u4e0b\u964d)\r\n  - [\u5b66\u4e60\u7387](#\u5b66\u4e60\u7387)\r\n  - [\u6fc0\u6d3b\u51fd\u6570](#\u6fc0\u6d3b\u51fd\u6570)\r\n  - [tensor](#tensor)\r\n- [\u64cd\u4f5c\u8fc7\u7a0b](#\u64cd\u4f5c\u8fc7\u7a0b)\r\n- [\u5355\u53d8\u91cf\u7ebf\u6027\u56de\u5f52](#\u5355\u53d8\u91cf\u7ebf\u6027\u56de\u5f52)\r\n  - [\u6784\u5efa\u6a21\u578b](#\u6784\u5efa\u6a21\u578b)\r\n  - [\u8bad\u7ec3](#\u8bad\u7ec3)\r\n  - [\u6d4b\u8bd5](#\u6d4b\u8bd5)\r\n  - [\u591a\u53d8\u91cf\u7ebf\u6027\u56de\u5f52\u6a21\u578b](#\u591a\u53d8\u91cf\u7ebf\u6027\u56de\u5f52\u6a21\u578b)\r\n    - [\u6a21\u578b\u8bad\u7ec3](#\u6a21\u578b\u8bad\u7ec3)\r\n    - [\u9a8c\u8bc1](#\u9a8c\u8bc1)\r\n- [\u53c2\u8003](#\u53c2\u8003)\r\n\r\n![\u795e\u7ecf\u7f51\u7edc](https://github.com/0x1042/0x1042.github.io/assets/7525242/86419435-239d-424d-afd2-021096a0c932)\r\n\r\n\r\n\u7ed9\u5b9a1000\u4e2a\u76f8\u4eb2\u5bf9\u8c61\u7684\u6570\u636e**\u7279\u5f81**(**feature**),\u548c\u5bf9\u5e94\u7684\u6ee1\u610f\u7a0b\u5ea6**\u6807\u7b7e**(**label**)\uff0c\u8bad\u7ec3\u5b8c\u6210\u540e\uff0c\u7ed9\u5b9a\u65b0\u7684\u76f8\u4eb2\u5bf9\u8c61\u6570\u636e\u6765\u9884\u6d4b\u6ee1\u610f\u7a0b\u5ea6\uff0c\u5373\u9884\u4f30(**predict**)\r\n\r\n## \u8bad\u7ec3\u8fc7\u7a0b \r\n\r\n> \u8bad\u7ec3\u6a21\u578b\u7684\u76ee\u6807\u662f\u4ece\u6240\u6709\u6837\u672c\u4e2d\u627e\u5230\u4e00\u7ec4\u5e73\u5747\u635f\u5931\u201c\u8f83\u5c0f\u201d\u7684\u6743\u91cd\uff08w\uff09\u548c\u504f\u5dee\uff08b\uff09\u3002", "top": 0, "createdAt": 1702217707, "style": "", "script": "<script src='https://blog.meekdai.com/Gmeek/plugins/GmeekTOC.js'></script><script src='https://blog.meekdai.com/Gmeek/plugins/lightbox.js'></script>", "head": "", "ogImage": "https://raw.githubusercontent.com/0x1042/0x1042.github.io/master/synthwave_option_4.png", "createdDate": "2023-12-10", "dateLabelColor": "#A333D0"}, "P16": {"htmlDir": "docs/post/16.html", "labels": ["c++"], "postTitle": "C++\u6253\u5370\u73af\u5883\u53d8\u91cf", "postUrl": "post/16.html", "postSourceUrl": "https://github.com/0x1042/0x1042.github.io/issues/16", "commentNum": 0, "wordCount": 947, "description": "# \u83b7\u53d6\u6240\u6709\u7684\u73af\u5883\u53d8\u91cf \r\n\r\n- [\u83b7\u53d6\u6240\u6709\u7684\u73af\u5883\u53d8\u91cf](#\u83b7\u53d6\u6240\u6709\u7684\u73af\u5883\u53d8\u91cf)\r\n  - [`main` \u51fd\u6570\u65b9\u5f0f\u83b7\u53d6](#main-\u51fd\u6570\u65b9\u5f0f\u83b7\u53d6)\r\n  - [`environ`\u8bfb\u53d6](#environ\u8bfb\u53d6)\r\n\r\n## `main` \u51fd\u6570\u65b9\u5f0f\u83b7\u53d6 \r\n\r\n```cpp\r\n\r\nauto main(int argc, char ** argv, char ** envp) -> int {\r\n    logEnv(envp);\r\n}\r\n\r\nvoid logEnv(char ** envp) {\r\n    LOG(INFO) << 'current pid is ' << getpid();\r\n    for (char ** this_env = envp; *this_env != nullptr; ++this_env) {\r\n        LOG(INFO) << 'env:' << std::string(*this_env);\r\n    }\r\n}\r\n```\r\n\r\n\r\n## `environ`\u8bfb\u53d6 \r\n\r\n> \u7b49\u540c `cat /proc/${PID}/environ | tr '\\0' '\\n'`\r\n\r\n```cpp\r\n\r\nauto main() -> int {\r\n    logEnv2();\r\n}\r\n\r\nvoid logEnv2() {\r\n    pid_t pid = getpid();\r\n    std::clog << 'current pid is ' << pid << '\\n';\r\n    std::string envfile = '/proc/' + std::to_string(pid) + '/environ';\r\n\r\n    std::ifstream input(envfile);\r\n\r\n    std::string envkv;\r\n    while (!input.eof()) {\r\n        std::getline(input, envkv, '\\0');\r\n        std::clog << envkv << '\\n';\r\n    }\r\n\r\n    input.close();\r\n}\r\n```\r\n\u3002", "top": 0, "createdAt": 1702825893, "style": "", "script": "<script src='https://blog.meekdai.com/Gmeek/plugins/GmeekTOC.js'></script><script src='https://blog.meekdai.com/Gmeek/plugins/lightbox.js'></script>", "head": "", "ogImage": "https://raw.githubusercontent.com/0x1042/0x1042.github.io/master/synthwave_option_4.png", "createdDate": "2023-12-17", "dateLabelColor": "#A333D0"}, "P17": {"htmlDir": "docs/post/17.html", "labels": ["ml"], "postTitle": "ml \u626b\u76f2\u4e8c", "postUrl": "post/17.html", "postSourceUrl": "https://github.com/0x1042/0x1042.github.io/issues/17", "commentNum": 0, "wordCount": 6974, "description": "# ML\u626b\u76f2\u4e8c\r\n\r\n- [ML\u626b\u76f2\u4e8c](#ml\u626b\u76f2\u4e8c)\r\n- [\u73af\u5883\u642d\u5efa](#\u73af\u5883\u642d\u5efa)\r\n- [\u673a\u5668\u5b66\u4e60\u7684\u5206\u7c7b](#\u673a\u5668\u5b66\u4e60\u7684\u5206\u7c7b)\r\n  - [\u76d1\u7763\u5b66\u4e60  `supervised learning`](#\u76d1\u7763\u5b66\u4e60--supervised-learning)\r\n  - [\u65e0\u76d1\u7763\u5b66\u4e60 `unsupervised learning`](#\u65e0\u76d1\u7763\u5b66\u4e60-unsupervised-learning)\r\n  - [\u534a\u76d1\u7763\u5b66\u4e60 `semi-supervised learning`](#\u534a\u76d1\u7763\u5b66\u4e60-semi-supervised-learning)\r\n  - [\u5f3a\u5316\u5b66\u4e60 `reinforcement learning`](#\u5f3a\u5316\u5b66\u4e60-reinforcement-learning)\r\n- [\u56de\u5f52  regression](#\u56de\u5f52--regression)\r\n- [\u7ebf\u6027\u56de\u5f52 linear regression](#\u7ebf\u6027\u56de\u5f52-linear-regression)\r\n  - [\u4ec0\u4e48\u662f\u7ebf\u6027\u56de\u5f52](#\u4ec0\u4e48\u662f\u7ebf\u6027\u56de\u5f52)\r\n  - [\u635f\u5931\u51fd\u6570 loss function](#\u635f\u5931\u51fd\u6570-loss-function)\r\n  - [\u968f\u673a\u68af\u5ea6\u4e0b\u964d](#\u968f\u673a\u68af\u5ea6\u4e0b\u964d)\r\n  - [from zero](#from-zero)\r\n  - [use tf](#use-tf)\r\n- [\u975e\u7ebf\u6027\u56de\u5f52 Non-linear Regression](#\u975e\u7ebf\u6027\u56de\u5f52-non-linear-regression)\r\n- [\u903b\u8f91\u56de\u5f52 logistic regression](#\u903b\u8f91\u56de\u5f52-logistic-regression)\r\n  - [\u5206\u7c7b\u95ee\u9898](#\u5206\u7c7b\u95ee\u9898)\r\n  - [\u7f51\u7edc\u7ed3\u6784](#\u7f51\u7edc\u7ed3\u6784)\r\n  - [\u635f\u5931\u51fd\u6570](#\u635f\u5931\u51fd\u6570)\r\n  - [use tf](#use-tf-1)\r\n- [\u5b66\u4e60\u8d44\u6599](#\u5b66\u4e60\u8d44\u6599)\r\n\r\n#  \u73af\u5883\u642d\u5efa \r\n\r\n```shell\r\n\r\n# \u5f00\u53d1\u673a\u542f\u52a8jupyter notebook \r\n\r\nnohup jupyter notebook --no-browser --port=8889 &\r\n\r\n# \u672c\u5730\u7aef\u53e3\u8f6c\u53d1 \r\nssh -N -f -L localhost:8888:localhost:8889 ubuntu\r\n```\r\n\r\n# \u673a\u5668\u5b66\u4e60\u7684\u5206\u7c7b\r\n\r\n## \u76d1\u7763\u5b66\u4e60  `supervised learning`\r\n\r\n> **\u8bad\u7ec3\u6570\u636e\u5305\u542b\u6b63\u786e\u7684\u7ed3\u679c\uff08label\uff09\uff0c\u5373\u5e0c\u671b\u5b66\u4e60\u6216\u8005\u9884\u4f30\u7684\u76ee\u6807.**\r\n\r\n- \u76d1\u7763\u5b66\u4e60\u5efa\u7acb\u4e00\u4e2a\u5b66\u4e60\u8fc7\u7a0b\uff0c\u5c06\u9884\u6d4b\u7ed3\u679c\u4e0e \u201c\u8bad\u7ec3\u6570\u636e\u201d\uff08\u5373\u8f93\u5165\u6570\u636e\uff09\u7684\u5b9e\u9645\u7ed3\u679c\u8fdb\u884c\u6bd4\u8f83\uff0c\u4e0d\u65ad\u7684\u8c03\u6574\u9884\u6d4b\u6a21\u578b\uff0c\u76f4\u5230\u6a21\u578b\u7684\u9884\u6d4b\u7ed3\u679c\u8fbe\u5230\u4e00\u4e2a\u9884\u671f\u7684\u51c6\u786e\u7387\uff0c\u6bd4\u5982\u5206\u7c7b\u548c\u56de\u5f52\u95ee\u9898\u7b49\u3002", "top": 0, "createdAt": 1703327847, "style": "", "script": "<script src='https://blog.meekdai.com/Gmeek/plugins/GmeekTOC.js'></script><script src='https://blog.meekdai.com/Gmeek/plugins/lightbox.js'></script><script>MathJax = {tex: {inlineMath: [[\"$\", \"$\"]]}};</script><script async src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"></script>", "head": "", "ogImage": "https://raw.githubusercontent.com/0x1042/0x1042.github.io/master/synthwave_option_4.png", "createdDate": "2023-12-23", "dateLabelColor": "#A333D0"}, "P18": {"htmlDir": "docs/post/18.html", "labels": ["c++"], "postTitle": "macro\u57fa\u672c\u4f7f\u7528", "postUrl": "post/18.html", "postSourceUrl": "https://github.com/0x1042/0x1042.github.io/issues/18", "commentNum": 0, "wordCount": 1391, "description": "# macro\r\n\r\n- [macro](#macro)\r\n  - [\u5b57\u7b26\u4e32\u5316](#\u5b57\u7b26\u4e32\u5316)\r\n  - [\u8fde\u63a5](#\u8fde\u63a5)\r\n  - [\u53d8\u53c2\u5b8f](#\u53d8\u53c2\u5b8f)\r\n  - [\u6761\u4ef6\u7f16\u8bd1](#\u6761\u4ef6\u7f16\u8bd1)\r\n- [macro vs function](#macro-vs-function)\r\n  - [\u5b8f\u4f18\u70b9](#\u5b8f\u4f18\u70b9)\r\n  - [\u5b8f\u7f3a\u70b9](#\u5b8f\u7f3a\u70b9)\r\n\r\n\r\n> \u4e00\u822c\u6211\u4eec\u5728CR\u4e2d\u4e0d\u5efa\u8bae\u5b8f\uff0c\u56e0\u4e3a\u65e0\u6cd5\u505a\u5230\u7c7b\u578b\u5b89\u5168\u4ee5\u53ca\u53ef\u8bfb\u6027\u4e0a\u6bd4\u8f83\u5dee\r\n> \u4f46\u662f\u5728\u4e00\u4e9b\u4e1a\u52a1\u65e0\u5173\u7684\u4ee3\u7801\u4e0a\uff0c\u6bd4\u5982\u914d\u7f6e\u89e3\u6790\uff0c\u53ef\u4ee5\u6709\u6548\u51cf\u5c11\u91cd\u590d\u4ee3\u7801 \r\n> \u4e0b\u9762\u6536\u96c6\u4e00\u4e9b\u5b8f\u7684\u5e38\u89c1\u4f7f\u7528 \r\n\r\n## \u5b57\u7b26\u4e32\u5316\r\n\r\n> \u7b80\u5355\u8bf4\u5c31\u662f\u5728\u7b26\u53f7\u7684\u524d\u540e\u52a0\u4e0a\u53cc\u5f15\u53f7\u3002", "top": 0, "createdAt": 1704526695, "style": "", "script": "<script src='https://blog.meekdai.com/Gmeek/plugins/GmeekTOC.js'></script><script src='https://blog.meekdai.com/Gmeek/plugins/lightbox.js'></script>", "head": "", "ogImage": "https://raw.githubusercontent.com/0x1042/0x1042.github.io/master/synthwave_option_4.png", "createdDate": "2024-01-06", "dateLabelColor": "#bc4c00"}, "P19": {"htmlDir": "docs/post/19.html", "labels": ["rust"], "postTitle": "proc_macro_derive hello world", "postUrl": "post/19.html", "postSourceUrl": "https://github.com/0x1042/0x1042.github.io/issues/19", "commentNum": 0, "wordCount": 5450, "description": "- [builder](#builder)\r\n  - [cargo.toml](#cargotoml)\r\n  - [struct](#struct)\r\n  - [lib.rs](#librs)\r\n  - [\u9a8c\u8bc1\u7ed3\u679c](#\u9a8c\u8bc1\u7ed3\u679c)\r\n\r\n# builder \r\n\r\n> \u7ed9\u5b9a `struct` \u751f\u6210`builder`\u76f8\u5173\u7684\u7ed3\u6784\r\n\r\n## cargo.toml\r\n\r\n```toml\r\n[package]\r\nname = 'builder'\r\nversion = '0.1.0'\r\nedition = '2021'\r\n\r\n[lib]\r\nproc-macro = true\r\n\r\n[dependencies]\r\nproc-macro2 = '1.0'\r\nquote = '1.0'\r\nsyn = { version = '2.0', features = ['full'] }\r\n```\r\n\r\n## struct\r\n\r\n```rust\r\n#[derive(builder::Builder)]\r\npub struct Ad {\r\n\tid: u64,\r\n\tcids: Vec<u64>,\r\n\ttitle: String,\r\n\tbid: f32,\r\n}\r\n```\r\n\r\n## lib.rs\r\n\r\n- `quote!`: \u5c06`Rust`\u4ee3\u7801\u8f6c\u6362\u4e3a`TokenStream`\r\n- `parse_macro_input!` \u8f93\u5165\u7684 `TokenStream` \u89e3\u6790\u6210 `Rust` \u4ee3\u7801\u7684\u6570\u636e\u7ed3\u6784\r\n\r\n\r\n```rust\r\n#[proc_macro_derive(Builder)]\r\npub fn derive(input: proc_macro::TokenStream) -> proc_macro::TokenStream {\r\n    let ast = syn::parse_macro_input!(input as syn::DeriveInput);\r\n\r\n    let ident = ast.ident;\r\n\r\n    let builder_ident = quote::format_ident!('{ident}Builder');\r\n\r\n    // \u83b7\u53d6\u6240\u6709\u7684field \r\n    let fields = match ast.data.clone() {\r\n        syn::Data::Struct(data) => data.fields,\r\n        _ => panic!('only support struct'),\r\n    };\r\n\r\n    // \u5b9a\u4e49builder \u7684\u5b57\u6bb5\r\n    // id: std::option::Option<u64>\r\n    let builder_fields = fields.iter().map(|field| {\r\n        let field = field.clone();\r\n        let id = field.ident.unwrap();\r\n        let ty = field.ty;\r\n\r\n        quote::quote! {\r\n            #id: std::option::Option<#ty>\r\n        }\r\n    });\r\n\r\n    // \u521d\u59cb\u5316\u4e3aNone \r\n    // id: std::option::Option::None \r\n    let builder_defaults = fields.iter().map(|field| {\r\n        let field = field.clone();\r\n        let id = field.ident.unwrap();\r\n\r\n        quote::quote! { #id: std::option::Option::None }\r\n    });\r\n\r\n    // \u5b9a\u4e49setter \u51fd\u6570\r\n    //     pub fn id(&mut self, value: u64) -> &mut Self {\r\n    //     self.id = std::option::Option::Some(value);\r\n    //     self\r\n    // }\r\n    let setters = fields.iter().map(|field| {\r\n        let field = field.clone();\r\n        let ty = field.ty;\r\n        let id = field.ident.unwrap();\r\n\r\n        quote::quote! {\r\n            pub fn #id(&mut self,value:#ty) -> &mut Self {\r\n                self.#id = std::option::Option::Some(value);\r\n                self\r\n            }\r\n        }\r\n    });\r\n\r\n    // \u5b57\u6bb5\u8d4b\u503c\r\n    //  id: self.id.clone().unwrap()\r\n    let build_fields = fields.iter().map(|field| {\r\n        let field = field.clone();\r\n        let id = field.ident.unwrap();\r\n\r\n        quote::quote! {\r\n            #id: self.#id.clone().unwrap()\r\n        }\r\n    });\r\n\r\n    let output = quote::quote! {\r\n        // \u5b9a\u4e49builder struct \r\n        pub struct #builder_ident {\r\n            #(#builder_fields),*\r\n        }\r\n\r\n        impl #builder_ident {\r\n            #(#setters)*\r\n        }\r\n\r\n        impl #builder_ident {\r\n            pub fn build(&mut self) -> std::result::Result<#ident, std::boxed::Box<dyn std::error::Error>> {\r\n                std::result::Result::Ok(#ident {\r\n                    #(#build_fields),*\r\n                })\r\n            }\r\n\r\n        }\r\n\r\n        impl #ident {\r\n            pub fn builder() -> #builder_ident {\r\n                #builder_ident {\r\n                    #(#builder_defaults),*\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    proc_macro::TokenStream::from(output)\r\n}\r\n```\r\n\r\n## \u9a8c\u8bc1\u7ed3\u679c \r\n\r\n```rust\r\n\r\n#[derive(builder::Builder)]\r\npub struct Ad {\r\n    id: u64,\r\n    cids: Vec<u64>,\r\n    title: String,\r\n    bid: f32,\r\n}\r\n\r\nfn main() {\r\n    let mut builder = Ad::builder();\r\n\r\n    let ad = builder\r\n        .bid(1.23)\r\n        .id(193987829387)\r\n        .cids(vec![1, 2, 3])\r\n        .title('\u63a8\u5e7f'.to_string())\r\n        .build();\r\n}\r\n```\r\n\r\n> cargo expand \r\n\r\n```rust\r\n#![feature(prelude_import)]\r\n#[prelude_import]\r\nuse std::prelude::rust_2021::*;\r\n#[macro_use]\r\nextern crate std;\r\npub struct Ad {\r\n    id: u64,\r\n    cids: Vec<u64>,\r\n    title: String,\r\n    bid: f32,\r\n}\r\npub struct AdBuilder {\r\n    id: std::option::Option<u64>,\r\n    cids: std::option::Option<Vec<u64>>,\r\n    title: std::option::Option<String>,\r\n    bid: std::option::Option<f32>,\r\n}\r\nimpl AdBuilder {\r\n    pub fn id(&mut self, value: u64) -> &mut Self {\r\n        self.id = std::option::Option::Some(value);\r\n        self\r\n    }\r\n    pub fn cids(&mut self, value: Vec<u64>) -> &mut Self {\r\n        self.cids = std::option::Option::Some(value);\r\n        self\r\n    }\r\n    pub fn title(&mut self, value: String) -> &mut Self {\r\n        self.title = std::option::Option::Some(value);\r\n        self\r\n    }\r\n    pub fn bid(&mut self, value: f32) -> &mut Self {\r\n        self.bid = std::option::Option::Some(value);\r\n        self\r\n    }\r\n}\r\nimpl AdBuilder {\r\n    pub fn build(\r\n        &mut self,\r\n    ) -> std::result::Result<Ad, std::boxed::Box<dyn std::error::Error>> {\r\n        std::result::Result::Ok(Ad {\r\n            id: self.id.clone().unwrap(),\r\n            cids: self.cids.clone().unwrap(),\r\n            title: self.title.clone().unwrap(),\r\n            bid: self.bid.clone().unwrap(),\r\n        })\r\n    }\r\n}\r\nimpl Ad {\r\n    pub fn builder() -> AdBuilder {\r\n        AdBuilder {\r\n            id: std::option::Option::None,\r\n            cids: std::option::Option::None,\r\n            title: std::option::Option::None,\r\n            bid: std::option::Option::None,\r\n        }\r\n    }\r\n}\r\nfn main() {\r\n    let mut builder = Ad::builder();\r\n    let ad = builder\r\n        .bid(1.23)\r\n        .id(193987829387)\r\n        .cids(<[_]>::into_vec(#[rustc_box] ::alloc::boxed::Box::new([1, 2, 3])))\r\n        .title('\u63a8\u5e7f'.to_string())\r\n        .build();\r\n}\r\n```\u3002", "top": 0, "createdAt": 1708359545, "style": "", "script": "<script src='https://blog.meekdai.com/Gmeek/plugins/GmeekTOC.js'></script><script src='https://blog.meekdai.com/Gmeek/plugins/lightbox.js'></script>", "head": "", "ogImage": "https://raw.githubusercontent.com/0x1042/0x1042.github.io/master/synthwave_option_4.png", "createdDate": "2024-02-20", "dateLabelColor": "#bc4c00"}, "P20": {"htmlDir": "docs/post/20.html", "labels": ["c++"], "postTitle": "the rule of five", "postUrl": "post/20.html", "postSourceUrl": "https://github.com/0x1042/0x1042.github.io/issues/20", "commentNum": 0, "wordCount": 9220, "description": "\r\n- [\u5b9a\u4e49](#\u5b9a\u4e49)\r\n- [`copy constructor`](#copy-constructor)\r\n  - [\u95ee\u9898](#\u95ee\u9898)\r\n  - [\u89e3\u51b3\u65b9\u6848](#\u89e3\u51b3\u65b9\u6848)\r\n- [`operator=`](#operator)\r\n  - [\u95ee\u9898](#\u95ee\u9898-1)\r\n  - [\u89e3\u51b3\u65b9\u6848](#\u89e3\u51b3\u65b9\u6848-1)\r\n- [`move constructor`](#move-constructor)\r\n  - [\u95ee\u9898](#\u95ee\u9898-2)\r\n  - [\u89e3\u51b3\u65b9\u6848](#\u89e3\u51b3\u65b9\u6848-2)\r\n- [`move operator`](#move-operator)\r\n  - [\u95ee\u9898](#\u95ee\u9898-3)\r\n  - [\u89e3\u51b3\u65b9\u6848](#\u89e3\u51b3\u65b9\u6848-3)\r\n\r\n# \u5b9a\u4e49 \r\n\r\n```cpp\r\nclass SString {\r\npublic:\r\n    explicit SString(const char * cp);\r\n\r\n    virtual ~SString();\r\n\r\nprivate:\r\n    char * data_;\r\n};\r\n\r\n// impl \r\n// \u786e\u4fdd\u957f\u5ea6\r\nSString::SString(const char * cp) : data_(new char[strlen(cp) + 1]) {\r\n    strcpy(data_, cp);\r\n}\r\n\r\nSString::~SString() {\r\n    delete[] data_;\r\n}\r\n```\r\n\r\n> the rule of five \r\n> - Destructor\r\n> - Copy Constructor\r\n> - Copy Assignment Operator\r\n> - Move Constructor\r\n> - Move Assignment Operator\r\n\r\n\r\n# `copy constructor`\r\n\r\n> \u8003\u8651\u4e00\u4e0b\u4f7f\u7528\u65b9\u5f0f \uff0c\u8fd9\u4e2a\u4ee3\u7801\u6709\u4e24\u4e2a\u95ee\u9898 \r\n\r\n```cpp\r\n\r\nvoid foo(rof::SString val) {\r\n    spdlog::info('size is {}', val.size());\r\n}\r\n\r\nTEST_CASE('case1', 'copy') {\r\n    rof::SString s{'hello world'};\r\n    { foo(s); }\r\n    { foo(s); }\r\n}\r\n```\r\n\r\n```\r\n==23702==ERROR: AddressSanitizer: heap-use-after-free on address 0x6020000037f0 at pc 0x000104cd721d bp 0x7ff7bc0ea590 sp 0x7ff7bc0e9d58\r\nREAD of size 3 at 0x6020000037f0 thread T0\r\n    #0 0x104cd721c in strlen+0x80c (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x1b21c)\r\n    #1 0x103fc4869 in tests::foo(rof::SString)+0x181 (c20:x86_64+0x1001b1869)\r\n    #2 0x103fc4c64 in tests::CATCH2_INTERNAL_TEST_0()+0x2fc (c20:x86_64+0x1001b1c64)\r\n    #3 0x103eadd03 in Catch::RunContext::runCurrentTest(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&)+0x203 (c20:x86_64+0x10009ad03)\r\n    #4 0x103ead79a in Catch::RunContext::runTest(Catch::TestCaseHandle const&)+0x1ea (c20:x86_64+0x10009a79a)\r\n    #5 0x103e8f870 in Catch::Session::runInternal()+0xe20 (c20:x86_64+0x10007c870)\r\n    #6 0x103e8e9e4 in Catch::Session::run()+0x44 (c20:x86_64+0x10007b9e4)\r\n    #7 0x103f6702c in main+0x624 (c20:x86_64+0x10015402c)\r\n    #8 0x7ff811187365 in start+0x795 (dyld:x86_64+0xfffffffffff5c365)\r\n\r\n0x6020000037f0 is located 0 bytes inside of 12-byte region [0x6020000037f0,0x6020000037fc)\r\nfreed by thread T0 here:\r\n    #0 0x104dad5ad in _ZdaPv+0x7d (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0xf15ad)\r\n    #1 0x103fc4bfc in tests::CATCH2_INTERNAL_TEST_0()+0x294 (c20:x86_64+0x1001b1bfc)\r\n    #2 0x103eadd03 in Catch::RunContext::runCurrentTest(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&)+0x203 (c20:x86_64+0x10009ad03)\r\n    #3 0x103ead79a in Catch::RunContext::runTest(Catch::TestCaseHandle const&)+0x1ea (c20:x86_64+0x10009a79a)\r\n    #4 0x103e8f870 in Catch::Session::runInternal()+0xe20 (c20:x86_64+0x10007c870)\r\n    #5 0x103e8e9e4 in Catch::Session::run()+0x44 (c20:x86_64+0x10007b9e4)\r\n    #6 0x103f6702c in main+0x624 (c20:x86_64+0x10015402c)\r\n    #7 0x7ff811187365 in start+0x795 (dyld:x86_64+0xfffffffffff5c365)\r\n\r\npreviously allocated by thread T0 here:\r\n    #0 0x104dad19d in _Znam+0x7d (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0xf119d)\r\n    #1 0x103fc4a6d in tests::CATCH2_INTERNAL_TEST_0()+0x105 (c20:x86_64+0x1001b1a6d)\r\n    #2 0x103eadd03 in Catch::RunContext::runCurrentTest(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&)+0x203 (c20:x86_64+0x10009ad03)\r\n    #3 0x103ead79a in Catch::RunContext::runTest(Catch::TestCaseHandle const&)+0x1ea (c20:x86_64+0x10009a79a)\r\n    #4 0x103e8f870 in Catch::Session::runInternal()+0xe20 (c20:x86_64+0x10007c870)\r\n    #5 0x103e8e9e4 in Catch::Session::run()+0x44 (c20:x86_64+0x10007b9e4)\r\n    #6 0x103f6702c in main+0x624 (c20:x86_64+0x10015402c)\r\n    #7 0x7ff811187365 in start+0x795 (dyld:x86_64+0xfffffffffff5c365)\r\n\r\nSUMMARY: AddressSanitizer: heap-use-after-free (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x1b21c) in strlen+0x80c\r\n```\r\n\r\n## \u95ee\u9898\r\n1. use after free\r\n2. double free \r\n\r\n## \u89e3\u51b3\u65b9\u6848 \r\n> \u5b9e\u73b0copy constructor\uff0c\u907f\u514d\u4e24\u4e2a\u6307\u9488\u6307\u5411\u4e00\u5757\u5185\u5b58\u5730\u5740\r\n\r\n```cpp \r\n\r\nSString(const SString & other);\r\n\r\n// impl\r\nSString::SString(const SString & other) : data_(new char[strlen(other.data_) + 1]) {\r\n    strcpy(data_, other.data_);\r\n}\r\n\r\n```\r\n\r\n# `operator=`\r\n\r\n> \u8003\u8651\u4e00\u4e0b\u4f7f\u7528\u65b9\u5f0f\r\n\r\n```cpp\r\nTEST_CASE('sstring2', 'operator') {\r\n    rof::SString hello{'hello'};\r\n    rof::SString world{'world'};\r\n\r\n    world = hello;\r\n}\r\n```\r\n\r\n```\r\n==24524==ERROR: AddressSanitizer: attempting double-free on 0x602000003830 in thread T0:\r\n    #0 0x1061ad5ad in _ZdaPv+0x7d (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0xf15ad)\r\n    #1 0x105424859 in tests::CATCH2_INTERNAL_TEST_2()+0x2b1 (c20:x86_64+0x1001b1859)\r\n    #2 0x10530d303 in Catch::RunContext::runCurrentTest(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&)+0x203 (c20:x86_64+0x10009a303)\r\n    #3 0x10530cd9a in Catch::RunContext::runTest(Catch::TestCaseHandle const&)+0x1ea (c20:x86_64+0x100099d9a)\r\n    #4 0x1052eee70 in Catch::Session::runInternal()+0xe20 (c20:x86_64+0x10007be70)\r\n    #5 0x1052edfe4 in Catch::Session::run()+0x44 (c20:x86_64+0x10007afe4)\r\n    #6 0x1053c662c in main+0x624 (c20:x86_64+0x10015362c)\r\n    #7 0x7ff811187365 in start+0x795 (dyld:x86_64+0xfffffffffff5c365)\r\n\r\n0x602000003830 is located 0 bytes inside of 6-byte region [0x602000003830,0x602000003836)\r\nfreed by thread T0 here:\r\n    #0 0x1061ad5ad in _ZdaPv+0x7d (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0xf15ad)\r\n    #1 0x1054247f2 in tests::CATCH2_INTERNAL_TEST_2()+0x24a (c20:x86_64+0x1001b17f2)\r\n    #2 0x10530d303 in Catch::RunContext::runCurrentTest(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&)+0x203 (c20:x86_64+0x10009a303)\r\n    #3 0x10530cd9a in Catch::RunContext::runTest(Catch::TestCaseHandle const&)+0x1ea (c20:x86_64+0x100099d9a)\r\n    #4 0x1052eee70 in Catch::Session::runInternal()+0xe20 (c20:x86_64+0x10007be70)\r\n    #5 0x1052edfe4 in Catch::Session::run()+0x44 (c20:x86_64+0x10007afe4)\r\n    #6 0x1053c662c in main+0x624 (c20:x86_64+0x10015362c)\r\n    #7 0x7ff811187365 in start+0x795 (dyld:x86_64+0xfffffffffff5c365)\r\n\r\npreviously allocated by thread T0 here:\r\n    #0 0x1061ad19d in _Znam+0x7d (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0xf119d)\r\n    #1 0x105423d2f in rof::SString::SString(char const*)+0x4f (c20:x86_64+0x1001b0d2f)\r\n    #2 0x10542467a in tests::CATCH2_INTERNAL_TEST_2()+0xd2 (c20:x86_64+0x1001b167a)\r\n    #3 0x10530d303 in Catch::RunContext::runCurrentTest(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&)+0x203 (c20:x86_64+0x10009a303)\r\n    #4 0x10530cd9a in Catch::RunContext::runTest(Catch::TestCaseHandle const&)+0x1ea (c20:x86_64+0x100099d9a)\r\n    #5 0x1052eee70 in Catch::Session::runInternal()+0xe20 (c20:x86_64+0x10007be70)\r\n    #6 0x1052edfe4 in Catch::Session::run()+0x44 (c20:x86_64+0x10007afe4)\r\n    #7 0x1053c662c in main+0x624 (c20:x86_64+0x10015362c)\r\n    #8 0x7ff811187365 in start+0x795 (dyld:x86_64+0xfffffffffff5c365)\r\n\r\nSUMMARY: AddressSanitizer: double-free (libclang_rt.asan_osx_dynamic.dylib:x86_64h+0xf15ad) in _ZdaPv+0x7d\r\n```\r\n\r\n## \u95ee\u9898 \r\n- double free\r\n\r\n> \u8d4b\u503c\u4e4b\u540e\uff0cworld \u548c hello \u7684\u6307\u9488\u90fd\u6307\u5411\u4e86 hello\u7684\u6307\u9488\u7684\u5185\u5b58\u5730\u5740\r\n> \u6790\u6784\u7684\u65f6\u5019\uff0c\u4f1a\u6790\u6784\u4e24\u6b21\r\n \r\n## \u89e3\u51b3\u65b9\u6848 \r\n\r\n> \u5b9e\u73b0\u81ea\u5b9a\u4e49\u7684 operator= (copy assignment operator)\r\n\r\n```cpp\r\n\r\nauto operator=(const SString & other) -> SString &;\r\n\r\nauto SString::operator=(const SString & other) -> SString & {\r\n    // bugprone-unhandled-self-assignment\r\n    if (this == &other) {\r\n        return *this;\r\n    }\r\n\r\n    char * newdata = new char[strlen(other.data_) + 1];\r\n    strcpy(newdata, other.data_);\r\n    std::swap(newdata, this->data_);\r\n    delete[] newdata;\r\n    return *this;\r\n}\r\n```\r\n\r\n# `move constructor`\r\n\r\n> \u7528\u6cd5 \r\n\r\n```cpp \r\nTEST_CASE('sstring3', 'move1') {\r\n    rof::SString hello{'hello'};\r\n\r\n    foo(std::move(hello));\r\n}\r\n```\r\n\r\n## \u95ee\u9898\r\n\r\n```\r\nPassing result of std::move() as a const reference argument; no move will actually happen (fix available)clang-tidyperformance-move-const-arg\r\nruleoffive.h(6, 7): 'SString' is not move assignable/constructible\r\n```\r\n\r\n## \u89e3\u51b3\u65b9\u6848\r\n\r\n```cpp\r\nSString(SString && other) noexcept;\r\n\r\n// impl\r\nSString::SString(SString && other) noexcept : data_(other.data_) {\r\n    other.data_ = nullptr;\r\n}\r\n```\r\n\r\n# `move operator` \r\n\r\n> \u7528\u6cd5 \r\n\r\n```cpp \r\nTEST_CASE('sstring4', 'move2') {\r\n    rof::SString hello{'hello'};\r\n    rof::SString world{'world'};\r\n\r\n    world = std::move(hello);\r\n}\r\n```\r\n\r\n## \u95ee\u9898\r\n\r\n```\r\nno move will actually happen (fix available)clang-tidyperformance-move-const-arg\r\nruleoffive.h(6, 7): 'SString' is not move assignable\r\n```\r\n\r\n## \u89e3\u51b3\u65b9\u6848\r\n\r\n```cpp\r\nauto operator=(SString && other) noexcept -> SString &;\r\n\r\nauto SString::operator=(SString && other) noexcept -> SString & {\r\n    delete[] data_;\r\n    data_ = other.data_;\r\n    other.data_ = nullptr;\r\n    return *this;\r\n}\r\n```\u3002", "top": 0, "createdAt": 1710835532, "style": "", "script": "<script src='https://blog.meekdai.com/Gmeek/plugins/GmeekTOC.js'></script><script src='https://blog.meekdai.com/Gmeek/plugins/lightbox.js'></script>", "head": "", "ogImage": "https://raw.githubusercontent.com/0x1042/0x1042.github.io/master/synthwave_option_4.png", "createdDate": "2024-03-19", "dateLabelColor": "#bc4c00"}, "P21": {"htmlDir": "docs/post/21.html", "labels": ["c++"], "postTitle": "cmake \u5f00\u542fsanitize", "postUrl": "post/21.html", "postSourceUrl": "https://github.com/0x1042/0x1042.github.io/issues/21", "commentNum": 0, "wordCount": 11390, "description": "\r\n- [\u914d\u7f6e](#\u914d\u7f6e)\r\n- [\u6d4b\u8bd5](#\u6d4b\u8bd5)\r\n- [\u7f16\u8bd1\u8fd0\u884c](#\u7f16\u8bd1\u8fd0\u884c)\r\n  - [`-fsanitize=thread`](#-fsanitizethread)\r\n  - [`-fsanitize=address`](#-fsanitizeaddress)\r\n- [`sanitier`](#sanitier)\r\n\r\n# \u914d\u7f6e \r\n\r\n```cmake\r\noption(ENABLE_SANITIZE 'Enable feature' ON)\r\n\r\nif(ENABLE_SANITIZE) \r\n  add_compile_options('-fno-omit-frame-pointer') \r\n  add_compile_options('-fno-optimize-sibling-calls')\r\n  # add_compile_options('-fsanitize=address')\r\n  add_compile_options('-fsanitize=thread')\r\n  add_compile_options('-fsanitize-address-use-after-scope')\r\n  # set(CMAKE_EXE_LINKER_FLAGS '-fno-omit-frame-pointer -fno-optimize-sibling-calls -fsanitize=address' ) \r\n  set(CMAKE_EXE_LINKER_FLAGS '-fno-omit-frame-pointer -fno-optimize-sibling-calls -fsanitize=thread' ) \r\nendif()\r\n```\r\n\r\n# \u6d4b\u8bd5\r\n\r\n```c++\r\n#include <functional>\r\n#include <string>\r\n#include <thread>\r\n#include <vector>\r\n\r\n#include <fmt/ranges.h>\r\n#include <gtest/gtest.h>\r\n\r\nvoid add_to_vec(std::vector<std::string> &target, const std::string &name) {\r\n\tfor (int i = 0; i < 10; i++) {\r\n\t\ttarget.push_back(fmt::format('{}:{}', name, i));\r\n\t}\r\n}\r\n\r\nTEST(race, addtovec) {\r\n\tstd::vector<std::string> dst;\r\n\tstd::string hello = 'hello';\r\n\tstd::string world = 'world';\r\n\tstd::thread t1(add_to_vec, std::ref(dst), std::cref(hello));\r\n\tstd::thread t2(add_to_vec, std::ref(dst), std::cref(world));\r\n\tt1.join();\r\n\tt2.join();\r\n\tstd::cerr << ' res: ' << fmt::format('{}', dst) << '\\n';\r\n}\r\n```\r\n\r\n# \u7f16\u8bd1\u8fd0\u884c \r\n\r\n## `-fsanitize=thread`\r\n\r\n```shell\r\nWARNING: ThreadSanitizer: data race (pid=77881)\r\n  Read of size 8 at 0x7ff7ba7ae880 by thread T4:\r\n    #0 add_to_vec(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&) race.cc:14 (singleton:x86_64+0x100021ba9)\r\n    #1 void* std::__1::__thread_proxy[abi:ue170006]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (*)(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&), std::__1::reference_wrapper<std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>, std::__1::reference_wrapper<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const>>>(void*) thread.h:232 (singleton:x86_64+0x100022437)\r\n\r\n  Previous write of size 8 at 0x7ff7ba7ae880 by thread T3:\r\n    #0 add_to_vec(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&) race.cc:14 (singleton:x86_64+0x100021b0b)\r\n    #1 void* std::__1::__thread_proxy[abi:ue170006]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (*)(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&), std::__1::reference_wrapper<std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>, std::__1::reference_wrapper<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const>>>(void*) thread.h:232 (singleton:x86_64+0x100022437)\r\n```\r\n\r\n## `-fsanitize=address`\r\n\r\n```shell\r\n==84486==ERROR: AddressSanitizer: attempting free on address which was not malloc()-ed: 0x603000003058 in thread T4\r\n    #0 0x10f6dd4ad in _ZdlPv (/usr/local/Cellar/llvm/17.0.6_1/lib/clang/17/lib/darwin/libclang_rt.asan_osx_dynamic.dylib:x86_64h+0xf14ad)\r\n    #1 0x10eb5162e in add_to_vec(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&) (/Users/weixuan/code/ccode/singleton/_build/singleton:x86_64+0x10004162e)\r\n    #2 0x10eb52fab in void* std::__1::__thread_proxy[abi:ue170006]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void (*)(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&), std::__1::reference_wrapper<std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>>, std::__1::reference_wrapper<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const>>>(void*) (/Users/weixuan/code/ccode/singleton/_build/singleton:x86_64+0x100042fab)\r\n    #3 0x10f6c59dd in asan_thread_start(void*) (/usr/local/Cellar/llvm/17.0.6_1/lib/clang/17/lib/darwin/libclang_rt.asan_osx_dynamic.dylib:x86_64h+0xd99dd)\r\n    #4 0x7ff819cf818a in _pthread_start (/usr/lib/system/libsystem_pthread.dylib:x86_64+0x618a)\r\n    #5 0x7ff819cf3ae2 in thread_start (/usr/lib/system/libsystem_pthread.dylib:x86_64+0x1ae2)\r\n\r\n0x603000003058 is located 40 bytes after 32-byte region [0x603000003010,0x603000003030)\r\nfreed by thread T0 here:\r\n    #0 0x10f6dd4ad in _ZdlPv (/usr/local/Cellar/llvm/17.0.6_1/lib/clang/17/lib/darwin/libclang_rt.asan_osx_dynamic.dylib:x86_64h+0xf14ad)\r\n    #1 0x10eb4e399 in tf::Executor::~Executor() (/Users/weixuan/code/ccode/singleton/_build/singleton:x86_64+0x10003e399)\r\n    #2 0x10eb142b9 in test_task_flow() (/Users/weixuan/code/ccode/singleton/_build/singleton:x86_64+0x1000042b9)\r\n    #3 0x10eb17228 in taskflow_dag_Test::TestBody() (/Users/weixuan/code/ccode/singleton/_build/singleton:x86_64+0x100007228)\r\n    #4 0x10eba18ea in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (/Users/weixuan/code/ccode/singleton/_build/singleton:x86_64+0x1000918ea)\r\n    #5 0x10eba183f in testing::Test::Run() (/Users/weixuan/code/ccode/singleton/_build/singleton:x86_64+0x10009183f)\r\n    #6 0x10eba2b9f in testing::TestInfo::Run() (/Users/weixuan/code/ccode/singleton/_build/singleton:x86_64+0x100092b9f)\r\n    #7 0x10eba3bc6 in testing::TestSuite::Run() (/Users/weixuan/code/ccode/singleton/_build/singleton:x86_64+0x100093bc6)\r\n    #8 0x10ebb40ed in testing::internal::UnitTestImpl::RunAllTests() (/Users/weixuan/code/ccode/singleton/_build/singleton:x86_64+0x1000a40ed)\r\n    #9 0x10ebb391a in bool testing::internal::HandleExceptionsInMethodIfSupported<testing::internal::UnitTestImpl, bool>(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*) (/Users/weixuan/code/ccode/singleton/_build/singleton:x86_64+0x1000a391a)\r\n    #10 0x10ebb389c in testing::UnitTest::Run() (/Users/weixuan/code/ccode/singleton/_build/singleton:x86_64+0x1000a389c)\r\n    #11 0x10eb57c2f in main (/Users/weixuan/code/ccode/singleton/_build/singleton:x86_64+0x100047c2f)\r\n    #12 0x7ff81996c365  (/usr/lib/dyld:x86_64+0xfffffffffff5c365)\r\n\r\npreviously allocated by thread T1 here:\r\n    #0 0x10f6dd08d in _Znwm (/usr/local/Cellar/llvm/17.0.6_1/lib/clang/17/lib/darwin/libclang_rt.asan_osx_dynamic.dylib:x86_64h+0xf108d)\r\n    #1 0x10eb1efc9 in std::__1::pair<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::__thread_id, unsigned long>, void*>*>, bool> std::__1::__hash_table<std::__1::__hash_value_type<std::__1::__thread_id, unsigned long>, std::__1::__unordered_map_hasher<std::__1::__thread_id, std::__1::__hash_value_type<std::__1::__thread_id, unsigned long>, std::__1::hash<std::__1::__thread_id>, std::__1::equal_to<std::__1::__thread_id>, true>, std::__1::__unordered_map_equal<std::__1::__thread_id, std::__1::__hash_value_type<std::__1::__thread_id, unsigned long>, std::__1::equal_to<std::__1::__thread_id>, std::__1::hash<std::__1::__thread_id>, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::__thread_id, unsigned long>>>::__emplace_unique_key_args<std::__1::__thread_id, std::__1::piecewise_construct_t const&, std::__1::tuple<std::__1::__thread_id&&>, std::__1::tuple<>>(std::__1::__thread_id const&, std::__1::piecewise_construct_t const&, std::__1::tuple<std::__1::__thread_id&&>&&, std::__1::tuple<>&&) (/Users/weixuan/code/ccode/singleton/_build/singleton:x86_64+0x10000efc9)\r\n    #2 0x10eb1dfa2 in tf::Executor::_spawn(unsigned long)::'lambda'(tf::Worker&, std::__1::mutex&, std::__1::condition_variable&, unsigned long&)::operator()(tf::Worker&, std::__1::mutex&, std::__1::condition_variable&, unsigned long&) const (/Users/weixuan/code/ccode/singleton/_build/singleton:x86_64+0x10000dfa2)\r\n    #3 0x10eb1db2c in void* std::__1::__thread_proxy[abi:ue170006]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, tf::Executor::_spawn(unsigned long)::'lambda'(tf::Worker&, std::__1::mutex&, std::__1::condition_variable&, unsigned long&), std::__1::reference_wrapper<tf::Worker>, std::__1::reference_wrapper<std::__1::mutex>, std::__1::reference_wrapper<std::__1::condition_variable>, std::__1::reference_wrapper<unsigned long>>>(void*) (/Users/weixuan/code/ccode/singleton/_build/singleton:x86_64+0x10000db2c)\r\n    #4 0x10f6c59dd in asan_thread_start(void*) (/usr/local/Cellar/llvm/17.0.6_1/lib/clang/17/lib/darwin/libclang_rt.asan_osx_dynamic.dylib:x86_64h+0xd99dd)\r\n    #5 0x7ff819cf818a in _pthread_start (/usr/lib/system/libsystem_pthread.dylib:x86_64+0x618a)\r\n    #6 0x7ff819cf3ae2 in thread_start (/usr/lib/system/libsystem_pthread.dylib:x86_64+0x1ae2)\r\n```\r\n\r\n\r\n# `sanitier`\r\n\r\n| sanitizer   | \u5b98\u65b9\u5730\u5740                                                    | \u5f00\u542f\u65b9\u5f0f                | \u8bf4\u660e             |\r\n| ----------- | ----------------------------------------------------------- | ----------------------- | ---------------- |\r\n| `thread`    | https://clang.llvm.org/docs/ThreadSanitizer.html.           | `-fsanitize=thread`     | \u68c0\u6d4bdatarace     |\r\n| `address`   | https://clang.llvm.org/docs/AddressSanitizer.html           | `-fsanitize=address`    | \u5185\u5b58\u9519\u8bef         |\r\n| `memory`    | https://clang.llvm.org/docs/MemorySanitizer.html            | `-fsanitize=memory`     | \u68c0\u6d4b\u672a\u521d\u59cb\u5316\u8bfb\u53d6 |\r\n| `undefined` | https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html | ` -fsanitize=undefined` | \u68c0\u6d4b\u4e3a\u5b9a\u4e49\u884c\u4e3a   |\r\n\r\n\u3002", "top": 0, "createdAt": 1711266015, "style": "", "script": "<script src='https://blog.meekdai.com/Gmeek/plugins/GmeekTOC.js'></script><script src='https://blog.meekdai.com/Gmeek/plugins/lightbox.js'></script>", "head": "", "ogImage": "https://raw.githubusercontent.com/0x1042/0x1042.github.io/master/synthwave_option_4.png", "createdDate": "2024-03-24", "dateLabelColor": "#bc4c00"}, "P22": {"htmlDir": "docs/post/22.html", "labels": ["c++"], "postTitle": "absl time\u57fa\u672c\u4f7f\u7528", "postUrl": "post/22.html", "postSourceUrl": "https://github.com/0x1042/0x1042.github.io/issues/22", "commentNum": 0, "wordCount": 1578, "description": "\r\n# \u65f6\u95f4\u57fa\u672c\u4f7f\u7528 \r\n\r\n## \u83b7\u53d6\u6307\u5b9a\u65f6\u533a\u7684\u65f6\u95f4 \r\n\r\n```c++\r\n        absl::TimeZone local;\r\n        absl::LoadTimeZone('Asia/Shanghai', &local);\r\n        auto now_in_second = absl::ToCivilSecond(absl::Now(), local);\r\n        std::clog << 'now_in_second:' << now_in_second << '\\n';\r\n```\r\n\r\n\r\n## \u83b7\u53d6\u6307\u5b9a\u65f6\u533a\u5f53\u524d\u5c0f\u65f6\r\n\r\n```c++\r\n        absl::TimeZone local;\r\n        absl::LoadTimeZone('Asia/Shanghai', &local);\r\n        auto now_in_hour = absl::ToCivilHour(absl::Now(), local);\r\n        std::clog << 'now_in_hour:' << now_in_hour.hour() << '\\n';\r\n```\r\n\r\n## \u83b7\u53d6\u65e5\u671f \r\n\r\n```c++\r\n    absl::Duration one_day = absl::Hours(24) * offset;\r\n    absl::Time tt = absl::Now() + one_day;\r\n    absl::TimeZone local;\r\n    absl::LoadTimeZone('Asia/Shanghai', &local);\r\n    auto today = absl::ToCivilDay(tt, local);\r\n    return absl::FormatCivilTime(today);\r\n```\r\n\r\n## \u89e3\u6790\u5b57\u7b26\u4e32\u5230\u65f6\u95f4 \r\n\r\n```c++\r\nauto str2time(const std::string & str, absl::Time & dst, absl::TimeZone tz) -> bool {\r\n    std::string err;\r\n    bool status = absl::ParseTime('%Y-%m-%d', str, tz, &dst, &err);\r\n    return status;\r\n}\r\n\r\nauto parse_time(const std::string & str) -> absl::CivilDay {\r\n    absl::CivilDay day;\r\n\r\n    bool status = absl::ParseCivilTime(str, &day);\r\n    std::clog << 'status:' << status << '\\n';\r\n    return day;\r\n}\r\n```\r\n\r\n## \u65f6\u95f4\u8ba1\u7b97\r\n\r\n```c++\r\n        const std::string & start_str = '2024-05-10';\r\n        auto start = parse_time(start_str);\r\n\r\n        const std::string & end_str = '2024-05-18';\r\n        auto end = parse_time(end_str);\r\n\r\n        std::clog << '(end - start) = ' << end - start << '\\n';\r\n        ASSERT_EQ(end - start, 8);\r\n```\u3002", "top": 0, "createdAt": 1715360073, "style": "", "script": "<script src='https://blog.meekdai.com/Gmeek/plugins/GmeekTOC.js'></script><script src='https://blog.meekdai.com/Gmeek/plugins/lightbox.js'></script>", "head": "", "ogImage": "https://raw.githubusercontent.com/0x1042/0x1042.github.io/master/synthwave_option_4.png", "createdDate": "2024-05-11", "dateLabelColor": "#bc4c00"}, "P23": {"htmlDir": "docs/post/23.html", "labels": ["go"], "postTitle": "highway hash  ", "postUrl": "post/23.html", "postSourceUrl": "https://github.com/0x1042/0x1042.github.io/issues/23", "commentNum": 0, "wordCount": 2758, "description": "# highway hash \r\n\r\n- c [https://github.com/google/highwayhash](https://github.com/google/highwayhash) \r\n- go [https://github.com/minio/highwayhash](https://github.com/minio/highwayhash)\r\n\r\n# go \r\n\r\n## 64bit \r\n\r\n```go\r\n\r\nvar (\r\n\tkey [32]byte\r\n)\r\n\r\nfunc HighHash(input string) string {\r\n\thash, _ := highwayhash.New64(key[:])\r\n\thash.Write([]byte(input))\r\n\tchecksum := hash.Sum(nil)\r\n\treturn hex.EncodeToString(checksum)\r\n}\r\n\r\nfunc HighHashFile(path string) string {\r\n\thash, _ := highwayhash.New64(key[:])\r\n\tfile, _ := os.Open(path)\r\n\tio.Copy(hash, file)\r\n\treturn hex.EncodeToString(hash.Sum(nil))\r\n}\r\n```\r\n\r\n\r\n## 128 bit\r\n\r\n```go\r\nfunc HighHash128(input string) string {\r\n\thash, _ := highwayhash.New128(key[:])\r\n\thash.Write([]byte(input))\r\n\tchecksum := hash.Sum(nil)\r\n\treturn hex.EncodeToString(checksum)\r\n}\r\n```\r\n\r\n# c++\r\n\r\n## 64bit \r\n\r\n```c++\r\n\r\nvoid put_uint64_le(uint8_t *buf, uint64_t value) {\r\n  buf[0] = static_cast<uint8_t>(value & 0xFF);\r\n  buf[1] = static_cast<uint8_t>((value >> 8) & 0xFF);\r\n  buf[2] = static_cast<uint8_t>((value >> 16) & 0xFF);\r\n  buf[3] = static_cast<uint8_t>((value >> 24) & 0xFF);\r\n  buf[4] = static_cast<uint8_t>((value >> 32) & 0xFF);\r\n  buf[5] = static_cast<uint8_t>((value >> 40) & 0xFF);\r\n  buf[6] = static_cast<uint8_t>((value >> 48) & 0xFF);\r\n  buf[7] = static_cast<uint8_t>((value >> 56) & 0xFF);\r\n}\r\n\r\nconst static uint64_t EMPTY_KEY[4] = {0, 0, 0, 0};\r\n\r\nstd::string high_hash(const std::string &input) {\r\n  uint64_t hash = HighwayHash64(reinterpret_cast<const uint8_t *>(input.data()),\r\n                                input.size(), EMPTY_KEY);\r\n  uint8_t bytes[8];\r\n  put_uint64_le(bytes, hash);\r\n  std::string rsp;\r\n  for (int i = 0; i < 8; i++) {\r\n    rsp += fmt::format('{0:02x}', bytes[i]);\r\n  }\r\n  return rsp;\r\n}\r\n```\r\n\r\n## 128 bit\r\n\r\n```c++\r\n\r\nstd::string high_hash128(const std::string &input) {\r\n  uint64_t hash[2];\r\n  HighwayHash128(reinterpret_cast<const uint8_t *>(input.data()), input.size(),\r\n                 EMPTY_KEY, hash);\r\n  uint8_t bytes1[8];\r\n  put_uint64_le(bytes1, hash[0]);\r\n\r\n  uint8_t bytes2[8];\r\n  put_uint64_le(bytes2, hash[1]);\r\n  std::string rsp;\r\n  for (int i = 0; i < 8; i++) {\r\n    rsp += fmt::format('{0:02x}', bytes1[i]);\r\n  }\r\n  for (int i = 0; i < 8; i++) {\r\n    rsp += fmt::format('{0:02x}', bytes2[i]);\r\n  }\r\n  return rsp;\r\n}\r\n```\r\n\r\n## \u4f18\u5316\u7248\u672c\r\n\r\n```c++\r\nauto high_hash128_v2(const std::string & input) -> std::string {\r\n    uint64_t hash[2];\r\n    HighwayHash128(reinterpret_cast<const uint8_t *>(input.data()), input.size(), EMPTY_KEY, hash);\r\n\r\n    std::array<uint8_t, 16> buffer{};\r\n    std::memcpy(buffer.data(), &hash, sizeof(hash));\r\n\r\n    std::string rsp;\r\n    for (unsigned char & b : buffer) {\r\n        rsp += fmt::format('{0:02x}', b);\r\n    }\r\n    return rsp;\r\n}\r\n```\r\n\u3002", "top": 0, "createdAt": 1715878493, "style": "", "script": "<script src='https://blog.meekdai.com/Gmeek/plugins/GmeekTOC.js'></script><script src='https://blog.meekdai.com/Gmeek/plugins/lightbox.js'></script>", "head": "", "ogImage": "https://raw.githubusercontent.com/0x1042/0x1042.github.io/master/synthwave_option_4.png", "createdDate": "2024-05-17", "dateLabelColor": "#bc4c00"}, "P24": {"htmlDir": "docs/post/24.html", "labels": ["c++"], "postTitle": "parallel", "postUrl": "post/24.html", "postSourceUrl": "https://github.com/0x1042/0x1042.github.io/issues/24", "commentNum": 0, "wordCount": 1544, "description": "# parallel\r\n\r\n## fetch \r\n\r\n```c++\r\nauto fetch(const std::string & url) -> int {\r\n    Timer start;\r\n    cpr::Response r = cpr::Get(cpr::Url{url}, cpr::Timeout{std::chrono::milliseconds(200)});\r\n    LOG(INFO) << 'thread-' << std::this_thread::get_id() << ' fetch [' << url << '] cost:' << start.get_elapsed_ms()\r\n              << ' ms. status_code: ' << r.status_code << ' text:' << r.text.size() << '\\n';\r\n    return 0;\r\n}\r\n```\r\n\r\n## folly\r\n \r\n```c++\r\n    Timer start;\r\n\r\n    std::vector<std::string> urls = {\r\n        'https://www.cnblogs.com/',\r\n        'https://www.alipan.com/',\r\n        'https://www.toutiao.com/',\r\n    };\r\n\r\n    std::vector<folly::Future<int>> futures;\r\n    futures.reserve(urls.size());\r\n\r\n    for (const auto & url : urls) {\r\n        auto fn = folly::via(infra::global().get(), [url]() { return infra::fetch(url); });\r\n        futures.push_back(std::move(fn));\r\n    }\r\n\r\n    folly::collectAll(futures).get();\r\n\r\n    LOG(INFO) << 'folly fetch ' << urls.size() << ' total cost:' << start.get_elapsed_ms() << ' ms\\n';\r\n```\r\n\r\n## omp \r\n\r\n```c++\r\n    Timer start;\r\n\r\n    std::vector<std::string> urls = {\r\n        'https://www.cnblogs.com/',\r\n        'https://www.alipan.com/',\r\n        'https://www.toutiao.com/',\r\n    };\r\n\r\n#pragma omp parallel for num_threads(urls.size())\r\n    for (size_t i = 0; i < urls.size(); i++) {\r\n        int status = infra::fetch(urls[i]);\r\n        LOG(INFO) << 'status:' << status;\r\n    }\r\n    LOG(INFO) << 'omp fetch ' << urls.size() << ' total cost:' << start.get_elapsed_ms() << ' ms\\n';\r\n```\u3002", "top": 0, "createdAt": 1716135610, "style": "", "script": "<script src='https://blog.meekdai.com/Gmeek/plugins/GmeekTOC.js'></script><script src='https://blog.meekdai.com/Gmeek/plugins/lightbox.js'></script>", "head": "", "ogImage": "https://raw.githubusercontent.com/0x1042/0x1042.github.io/master/synthwave_option_4.png", "createdDate": "2024-05-20", "dateLabelColor": "#bc4c00"}, "P25": {"htmlDir": "docs/post/25.html", "labels": ["c++"], "postTitle": "asio\u57fa\u672c\u4f7f\u7528", "postUrl": "post/25.html", "postSourceUrl": "https://github.com/0x1042/0x1042.github.io/issues/25", "commentNum": 0, "wordCount": 3402, "description": "# \u89e3\u6790\u57df\u540d\r\n\r\n```c++\r\n    std::string domain = 'www.toutiao.com';\r\n    std::string port = '443';\r\n\r\n    asio::ip::tcp::resolver resolver(socket.get_executor());\r\n    asio::ip::tcp::resolver::results_type endpoints =\r\n        co_await resolver.async_resolve(host, port, asio::use_awaitable);\r\n```\r\n\r\n# tcp\u8fde\u63a5 \r\n\r\n```c++\r\n\r\n// \u8fde\u63a5\u89e3\u6790\u540e\u7684\u7ed3\u679c \r\n\r\nasio::ip::tcp::socket remote_socket(socket.get_executor());\r\nco_await asio::async_connect(remote_socket, endpoints, asio::use_awaitable);\r\n\r\n// \u8fde\u63a5host port\r\nasio::ip::tcp::endpoint remote_endpoint(asio::ip::make_address_v4(address),\r\n                                            (port[0] << 8) | port[1]);\r\nasio::ip::tcp::socket remote_socket(socket.get_executor());\r\nco_await remote_socket.async_connect(remote_endpoint, asio::use_awaitable);\r\n```\r\n\r\n# copy \u4e24\u4e2asocket \r\n\r\n```c++\r\nusing namespace asio::experimental::awaitable_operators;\r\n\r\nconstexpr size_t bufsize = 16 * 1024;\r\n\r\nasio::awaitable<void> relay(asio::ip::tcp::socket &from,\r\n                            asio::ip::tcp::socket &to) {\r\n\r\n  auto relay = [](asio::ip::tcp::socket &from,\r\n                  asio::ip::tcp::socket &to) -> asio::awaitable<void> {\r\n    try {\r\n      std::array<uint8_t, bufsize> data{};\r\n      for (;;) {\r\n        std::size_t n = co_await from.async_read_some(asio::buffer(data),\r\n                                                      asio::use_awaitable);\r\n        co_await asio::async_write(to, asio::buffer(data, n),\r\n                                   asio::use_awaitable);\r\n      }\r\n    } catch (...) {\r\n      from.close();\r\n      to.close();\r\n    }\r\n  };\r\n\r\n  co_await (relay(from, to) && relay(to, from));\r\n}\r\n\r\n\r\n// \u4f7f\u7528 \r\nco_await relay(socket, remote_socket);\r\n\r\n```\r\n\r\n# \u8bfb\u53d6\u6307\u5b9a\u957f\u5ea6\u6570\u636e \r\n\r\n```c++\r\nstd::array<uint8_t, 4> handshake_request{};\r\nco_await asio::async_read(socket, asio::buffer(handshake_request), asio::use_awaitable);\r\n```\r\n\r\n# \u6309\u884c\u8bfb\u53d6 \r\n\r\n```c++\r\n    asio::streambuf buffer;\r\n    std::vector<std::string> lines;\r\n    for (;;) {\r\n      std::size_t n = co_await asio::async_read_until(socket, buffer, '\\r\\n',\r\n                                                      asio::use_awaitable);\r\n      auto bufs = buffer.data();\r\n      std::string line(asio::buffers_begin(bufs),\r\n                       asio::buffers_begin(bufs) + n);\r\n\r\n      if (line == '\\r\\n') {\r\n        break;\r\n      }\r\n\r\n      lines.push_back(std::move(line));\r\n      buffer.consume(n);\r\n    }\r\n```\r\n\r\n# peek \r\n\r\n```c++\r\nstd::array<uint8_t, 1> data{};\r\nsocket.receive(asio::buffer(data), asio::socket_base::message_peek);\r\nstd::clog << 'message_peek:' << fmt::to_string(data) << '\\n';\r\n```\r\n\r\n\r\n# \u5199\u5165\u6570\u636e\r\n\r\n- \u5199\u5165string\r\n\r\n```c++\r\nconst std::string &response = 'HTTP/1.1 200 Connection Established\\r\\n\\r\\n';\r\nco_await asio::async_write(socket, asio::buffer(response),\r\n                               asio::use_awaitable);\r\n```\r\n\r\n- \u5199\u5165bytes\r\n\r\n```c++\r\nstd::array<uint8_t, 10> response = {\r\n        0x05,       0x00,       0x00,       0x01,    address[0],\r\n        address[1], address[2], address[3], port[0], port[1]};\r\nco_await asio::async_write(socket, asio::buffer(response),\r\n                               asio::use_awaitable);\r\n```\r\n\r\n# listen\r\n\r\n```c++\r\nauto endpoint = asio::ip::tcp::endpoint(asio::ip::tcp::v4(), port);\r\nasio::ip::tcp::acceptor acceptor(io_context, endpoint);\r\n\r\n  for (;;) {\r\n    asio::ip::tcp::socket socket = co_await acceptor.async_accept(asio::use_awaitable);\r\n  }\r\n\r\n```\r\n\r\n\r\n\r\n\u3002", "top": 0, "createdAt": 1719773130, "style": "", "script": "<script src='https://blog.meekdai.com/Gmeek/plugins/GmeekTOC.js'></script><script src='https://blog.meekdai.com/Gmeek/plugins/lightbox.js'></script>", "head": "", "ogImage": "https://raw.githubusercontent.com/0x1042/0x1042.github.io/master/synthwave_option_4.png", "createdDate": "2024-07-01", "dateLabelColor": "#bc4c00"}, "P26": {"htmlDir": "docs/post/26.html", "labels": ["c++"], "postTitle": "sock5 && http proxy in asio", "postUrl": "post/26.html", "postSourceUrl": "https://github.com/0x1042/0x1042.github.io/issues/26", "commentNum": 0, "wordCount": 7170, "description": "# listen\r\n\r\n```c++\r\nasio::awaitable<void> listener(asio::io_context &io_context,\r\n                               unsigned short port) {\r\n  auto endpoint = asio::ip::tcp::endpoint(asio::ip::tcp::v4(), port);\r\n  spdlog::info('server listen at {}:{}', endpoint.address().to_string(),\r\n               endpoint.port());\r\n\r\n  asio::ip::tcp::acceptor acceptor(io_context, endpoint);\r\n  for (;;) {\r\n    asio::ip::tcp::socket socket =\r\n        co_await acceptor.async_accept(asio::use_awaitable);\r\n\r\n    std::array<std::byte, 1> data{};\r\n    socket.receive(asio::buffer(data), asio::socket_base::message_peek);\r\n    const auto &endpoint = socket.remote_endpoint();\r\n    spdlog::info('incoming request. {}:{}', endpoint.address().to_string(),\r\n                 endpoint.port());\r\n\r\n    if (std::to_integer<uint8_t>(data.at(0)) == 0x05) {\r\n      asio::co_spawn(io_context, socks::handle(std::move(socket)),\r\n                     asio::detached);\r\n    } else {\r\n      asio::co_spawn(io_context, http::handle(std::move(socket)),\r\n                     asio::detached);\r\n    }\r\n  }\r\n```\r\n\r\n# http\r\n\r\n```c++\r\nasio::awaitable<void> handle(asio::ip::tcp::socket socket) {\r\n  try {\r\n    asio::streambuf buffer;\r\n\r\n    std::vector<std::string> lines;\r\n    for (;;) {\r\n      std::size_t n = co_await asio::async_read_until(socket, buffer, '\\r\\n',\r\n                                                      asio::use_awaitable);\r\n      auto bufs = buffer.data();\r\n      std::string line(asio::buffers_begin(bufs),\r\n                       asio::buffers_begin(bufs) + n);\r\n\r\n      if (line == '\\r\\n') {\r\n        break;\r\n      }\r\n\r\n      lines.push_back(std::move(line));\r\n      buffer.consume(n);\r\n    }\r\n\r\n    std::string line = replace_all(lines.at(1), '\\r\\n', '');\r\n    line = replace_all(line, 'Host: ', '');\r\n\r\n    std::string port = '80';\r\n\r\n    std::vector<std::string> hostport = absl::StrSplit(line, ':');\r\n    std::string host = hostport[0];\r\n    if (hostport.size() == 2) {\r\n      port = hostport[1];\r\n    }\r\n\r\n    asio::ip::tcp::resolver resolver(socket.get_executor());\r\n    asio::ip::tcp::resolver::results_type endpoints =\r\n        co_await resolver.async_resolve(host, port, asio::use_awaitable);\r\n\r\n    asio::ip::tcp::socket remote_socket(socket.get_executor());\r\n\r\n    // todo http\r\n\r\n    co_await asio::async_connect(remote_socket, endpoints, asio::use_awaitable);\r\n\r\n    spdlog::info('connect to {}:{} success. ',\r\n                 endpoints->endpoint().address().to_string(),\r\n                 endpoints->endpoint().port());\r\n\r\n    const std::string &response = 'HTTP/1.1 200 Connection Established\\r\\n\\r\\n';\r\n    co_await asio::async_write(socket, asio::buffer(response),\r\n                               asio::use_awaitable);\r\n    co_await relay(socket, remote_socket);\r\n\r\n  } catch (const std::exception &ex) {\r\n    spdlog::error('run exception :{}', ex.what());\r\n  }\r\n}\r\n```\r\n\r\n# socks5\r\n\r\n```c++\r\nasio::awaitable<void> handle(asio::ip::tcp::socket socket) {\r\n  try {\r\n    // Perform SOCKS5 handshake\r\n    std::array<uint8_t, 4> handshake_request{};\r\n    co_await asio::async_read(socket, asio::buffer(handshake_request),\r\n                              asio::use_awaitable);\r\n\r\n    if (handshake_request[0] != 0x05) {\r\n      co_return; // Not SOCKS5\r\n    }\r\n    std::array<uint8_t, 2> handshake_response = {0x05, 0x00};\r\n    co_await asio::async_write(socket, asio::buffer(handshake_response),\r\n                               asio::use_awaitable);\r\n\r\n    // Read SOCKS5 request\r\n    std::array<uint8_t, 4> request{};\r\n    co_await asio::async_read(socket, asio::buffer(request),\r\n                              asio::use_awaitable);\r\n\r\n    if (request[1] != 0x01) {\r\n      co_return; // Only support CONNECT command\r\n    }\r\n\r\n    // Read address and port\r\n    std::array<uint8_t, 4> address{};\r\n    co_await asio::async_read(socket, asio::buffer(address),\r\n                              asio::use_awaitable);\r\n\r\n    std::array<uint8_t, 2> port{};\r\n    co_await asio::async_read(socket, asio::buffer(port), asio::use_awaitable);\r\n\r\n    asio::ip::tcp::endpoint remote_endpoint(asio::ip::make_address_v4(address),\r\n                                            (port[0] << 8) | port[1]);\r\n\r\n    spdlog::info('connect to {}:{} success. ',\r\n                 remote_endpoint.address().to_string(), remote_endpoint.port());\r\n\r\n    asio::ip::tcp::socket remote_socket(socket.get_executor());\r\n\r\n    // Connect to the remote server\r\n    co_await remote_socket.async_connect(remote_endpoint, asio::use_awaitable);\r\n\r\n    // Send success response to the client\r\n    std::array<uint8_t, 10> response = {\r\n        0x05,       0x00,       0x00,       0x01,    address[0],\r\n        address[1], address[2], address[3], port[0], port[1]};\r\n    co_await asio::async_write(socket, asio::buffer(response),\r\n                               asio::use_awaitable);\r\n\r\n    // Relay traffic between client and remote server\r\n    co_await relay(socket, remote_socket);\r\n  } catch (const std::exception &ex) {\r\n    spdlog::error('run exception :{}', ex.what());\r\n  }\r\n}\r\n```\r\n\r\n# relay\r\n\r\n```c++\r\nasio::awaitable<void> relay(asio::ip::tcp::socket &from,\r\n                            asio::ip::tcp::socket &to) {\r\n\r\n  auto relay = [](asio::ip::tcp::socket &from,\r\n                  asio::ip::tcp::socket &to) -> asio::awaitable<void> {\r\n    const auto &from_addr = from.remote_endpoint();\r\n    const auto &to_addr = to.remote_endpoint();\r\n    size_t cnt = 0;\r\n    try {\r\n      std::array<std::byte, bufsize> data{};\r\n      for (;;) {\r\n        std::size_t n = co_await from.async_read_some(asio::buffer(data),\r\n                                                      asio::use_awaitable);\r\n        co_await asio::async_write(to, asio::buffer(data, n),\r\n                                   asio::use_awaitable);\r\n        cnt += n;\r\n      }\r\n    } catch (...) {\r\n      from.close();\r\n      to.close();\r\n    }\r\n\r\n    spdlog::info('{}:{} -> {}:{} transfer {} bytes success. ',\r\n                 from_addr.address().to_string(), from_addr.port(),\r\n                 to_addr.address().to_string(), to_addr.port(), cnt);\r\n  };\r\n\r\n  co_await (relay(from, to) && relay(to, from));\r\n}\r\n```\r\n\r\n# main\r\n\r\n```c++\r\nABSL_FLAG(uint16_t, port, 10010, 'server listen port');\r\nABSL_FLAG(size_t, worker, 4, 'worker num');\r\n\r\nint main(int argc, char **argv) {\r\n\r\n  absl::ParseCommandLine(argc, argv);\r\n\r\n  auto console = spdlog::stdout_color_mt('console');\r\n  spdlog::set_default_logger(console);\r\n  spdlog::set_pattern('%^[%H:%M:%S %e] %l thread-%t %v %$');\r\n\r\n  try {\r\n    asio::io_context io_context;\r\n\r\n    // Run listener coroutine\r\n    asio::co_spawn(io_context, listener(io_context, absl::GetFlag(FLAGS_port)),\r\n                   asio::detached);\r\n\r\n    std::vector<std::thread> threads;\r\n    size_t worker_num = absl::GetFlag(FLAGS_worker);\r\n\r\n    threads.resize(worker_num);\r\n    for (size_t i = 0; i < worker_num; ++i) {\r\n      threads.emplace_back([&io_context]() { io_context.run(); });\r\n    }\r\n\r\n    io_context.run();\r\n\r\n    // Join all threads\r\n    for (auto &t : threads) {\r\n      t.join();\r\n    }\r\n  } catch (const std::exception &ex) {\r\n    spdlog::error('run exception :{}', ex.what());\r\n  }\r\n  return 0;\r\n}\r\n```\r\n\u3002", "top": 0, "createdAt": 1719853821, "style": "", "script": "<script src='https://blog.meekdai.com/Gmeek/plugins/GmeekTOC.js'></script><script src='https://blog.meekdai.com/Gmeek/plugins/lightbox.js'></script>", "head": "", "ogImage": "https://raw.githubusercontent.com/0x1042/0x1042.github.io/master/synthwave_option_4.png", "createdDate": "2024-07-02", "dateLabelColor": "#bc4c00"}, "P27": {"htmlDir": "docs/post/27.html", "labels": ["rust"], "postTitle": "sock5 && http proxy in rust", "postUrl": "post/27.html", "postSourceUrl": "https://github.com/0x1042/0x1042.github.io/issues/27", "commentNum": 0, "wordCount": 8622, "description": "# listen\r\n\r\n```rust\r\npub async fn listen(addr: &str) -> anyhow::Result<()> {\r\n    let mut endpoint = addr.to_owned();\r\n    let info: Vec<_> = addr.split(':').collect();\r\n    if info[0].is_empty() {\r\n        endpoint = format!('0.0.0.0:{}', info[1]);\r\n    }\r\n    let ln = tokio::net::TcpListener::bind(&endpoint).await?;\r\n    info!('server start. auto://{}', &endpoint);\r\n    loop {\r\n        let (incoming, peer) = ln.accept().await?;\r\n        info!('incoming request {:?}', peer);\r\n        tokio::spawn(async move {\r\n            if let Err(err) = proxy(incoming).await {\r\n                error!('proxy error. {err}');\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nasync fn proxy(incoming: tokio::net::TcpStream) -> anyhow::Result<()> {\r\n    incoming.set_nodelay(true)?;\r\n    let mut ver = vec![0; 1];\r\n    let _ = incoming.peek(&mut ver).await?;\r\n\r\n    if ver[0] == 0x05 {\r\n        return socks::handle(incoming).await;\r\n    }\r\n    return http::handle(incoming).await;\r\n}\r\n\r\n```\r\n\r\n# http\r\n\r\n```rust \r\nconst CONNECT: &str = 'CONNECT';\r\nconst LF: &str = '\\r\\n';\r\nconst SUC: &str = 'HTTP/1.1 200 Connection Established\\r\\n\\r\\n';\r\n\r\npub async fn handle(incoming: tokio::net::TcpStream) -> anyhow::Result<()> {\r\n    let start = Instant::now();\r\n    let from = incoming.peer_addr()?;\r\n\r\n    let mut stream = BufReader::new(incoming);\r\n    let mut lines = Vec::with_capacity(4);\r\n    loop {\r\n        let mut buf = String::new();\r\n        stream.read_line(&mut buf).await?;\r\n        if buf.eq(LF) || buf.is_empty() {\r\n            break;\r\n        }\r\n        lines.push(buf);\r\n    }\r\n\r\n    let reqlines = lines.join('');\r\n    let mut headers = [httparse::EMPTY_HEADER; 4];\r\n    let mut req = httparse::Request::new(&mut headers);\r\n    req.parse(reqlines.as_bytes())?;\r\n\r\n    let mut host = String::new();\r\n    for ele in req.headers.iter() {\r\n        if ele.name == 'Host' {\r\n            host = String::from_utf8(ele.value.to_vec()).unwrap();\r\n            break;\r\n        }\r\n    }\r\n\r\n    let mut endpoint = host;\r\n\r\n    if !endpoint.contains(':') {\r\n        endpoint = format!('{}:80', endpoint);\r\n    }\r\n\r\n    let mut remote = tokio::net::TcpStream::connect(&endpoint).await?;\r\n\r\n    info!('connect to {} succsss. ', &endpoint);\r\n\r\n    if req.method.unwrap() == CONNECT {\r\n        stream.write(SUC.as_bytes()).await?;\r\n    } else {\r\n        let mut reqlines = String::new();\r\n        reqlines.reserve(256);\r\n        for line in lines.iter() {\r\n            if line.starts_with('Proxy-Connection') {\r\n                continue;\r\n            }\r\n            reqlines.push_str(line);\r\n        }\r\n        reqlines.push_str(LF);\r\n        remote.write(reqlines.as_bytes()).await?;\r\n    }\r\n\r\n    let (rl, wl) = tokio::io::copy_bidirectional(&mut stream, &mut remote).await?;\r\n    info!(\r\n        'http tunnel {} <-> {} write {} read {} cost {:?}',\r\n        from,\r\n        &endpoint,\r\n        rl,\r\n        wl,\r\n        start.elapsed()\r\n    );\r\n    Ok(())\r\n}\r\n```\r\n\r\n# socks5  \r\n\r\n```rust \r\n#[derive(Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]\r\npub enum Addr {\r\n    /// Socket address (IP Address)\r\n    SocketAddress(SocketAddr),\r\n    /// Domain name address\r\n    DomainNameAddress(String, u16),\r\n}\r\n\r\nimpl Addr {\r\n    async fn from_reader<R>(adtype: u8, reader: &mut R) -> anyhow::Result<Addr>\r\n    where\r\n        R: AsyncRead + Unpin,\r\n    {\r\n        if adtype == 0x01 {\r\n            let mut buf = [0u8; 6];\r\n            let _ = reader.read_exact(&mut buf).await?;\r\n\r\n            let v4addr = Ipv4Addr::new(buf[0], buf[1], buf[2], buf[3]);\r\n            let port = u16::from_be_bytes([buf[4], buf[5]]);\r\n            return Ok(Addr::SocketAddress(SocketAddr::V4(SocketAddrV4::new(\r\n                v4addr, port,\r\n            ))));\r\n        }\r\n\r\n        if adtype == 0x04 {\r\n            let mut buf = [0u16; 9];\r\n\r\n            let bytes_buf = unsafe { slice::from_raw_parts_mut(buf.as_mut_ptr() as *mut _, 18) };\r\n            let _ = reader.read_exact(bytes_buf).await?;\r\n\r\n            let v6addr = Ipv6Addr::new(\r\n                u16::from_be(buf[0]),\r\n                u16::from_be(buf[1]),\r\n                u16::from_be(buf[2]),\r\n                u16::from_be(buf[3]),\r\n                u16::from_be(buf[4]),\r\n                u16::from_be(buf[5]),\r\n                u16::from_be(buf[6]),\r\n                u16::from_be(buf[7]),\r\n            );\r\n            let port = u16::from_be(buf[8]);\r\n\r\n            return Ok(Addr::SocketAddress(SocketAddr::V6(SocketAddrV6::new(\r\n                v6addr, port, 0, 0,\r\n            ))));\r\n        }\r\n        let mut length_buf = [0u8; 1];\r\n        let _ = reader.read_exact(&mut length_buf).await?;\r\n        let length = length_buf[0] as usize;\r\n\r\n        // Len(Domain) + Len(Port)\r\n        let buf_length = length + 2;\r\n\r\n        let mut raw_addr = vec![0u8; buf_length];\r\n        let _ = reader.read_exact(&mut raw_addr).await?;\r\n\r\n        let raw_port = &raw_addr[length..];\r\n        let port = u16::from_be_bytes([raw_port[0], raw_port[1]]);\r\n\r\n        raw_addr.truncate(length);\r\n\r\n        let addr = String::from_utf8(raw_addr).unwrap();\r\n\r\n        Ok(Addr::DomainNameAddress(addr, port))\r\n    }\r\n}\r\n\r\n// https://datatracker.ietf.org/doc/html/rfc1928\r\n// https://datatracker.ietf.org/doc/html/rfc1929\r\npub async fn handle(mut incoming: tokio::net::TcpStream) -> anyhow::Result<()> {\r\n    let start = Instant::now();\r\n\r\n    // step1 handshake\r\n\r\n    //    +----+----------+----------+\r\n    //    |VER | NMETHODS | METHODS  |\r\n    //    +----+----------+----------+\r\n    //    | 1  |    1     | 1 to 255 |\r\n    //    +----+----------+----------+\r\n\r\n    {\r\n        let mut buf = vec![0; 2];\r\n        let _ = incoming.read_exact(&mut buf).await?;\r\n        let ver = buf[0];\r\n        let nmet = buf[1];\r\n        if ver != 0x05 {\r\n            return Err(anyhow::anyhow!('unsupport version'));\r\n        }\r\n\r\n        let mut methods = vec![0u8; nmet as usize];\r\n        let _ = incoming.read_exact(&mut methods).await?;\r\n\r\n        for method in methods.iter() {\r\n            debug!('method is {:?}', *method);\r\n\r\n            // if *method == 0x00 {\r\n            //     let mut buffer = vec![0x05, 0x00];\r\n            //     incoming.write(&mut buffer).await?;\r\n            // }\r\n\r\n            if *method == 0x02 {\r\n                let mut buffer = vec![0x05, 0x02];\r\n                incoming.write(&mut buffer).await?;\r\n                let ver = incoming.read_u8().await?;\r\n\r\n                debug!('ver is {}', ver);\r\n\r\n                // assert ver = 1\r\n\r\n                let ulen = incoming.read_u8().await?;\r\n                let mut namebuf = vec![0u8; ulen as usize];\r\n                let _ = incoming.read_exact(&mut namebuf).await?;\r\n\r\n                let plen = incoming.read_u8().await?;\r\n                let mut pbuf = vec![0u8; plen as usize];\r\n                let _ = incoming.read_exact(&mut pbuf).await?;\r\n\r\n                // todo check\r\n\r\n                info!(\r\n                    'user is {} passwd is {}',\r\n                    String::from_utf8(namebuf).unwrap(),\r\n                    String::from_utf8(pbuf).unwrap()\r\n                );\r\n                let mut authreply = vec![0x01, 0x00];\r\n                incoming.write(&mut authreply).await?;\r\n            }\r\n        }\r\n    }\r\n\r\n    // step2 read request\r\n\r\n    // +----+-----+-------+------+----------+----------+\r\n    // |VER | CMD |  RSV  | ATYP | DST.ADDR | DST.PORT |\r\n    // +----+-----+-------+------+----------+----------+\r\n    // | 1  |  1  | X'00' |  1   | Variable |    2     |\r\n    // +----+-----+-------+------+----------+----------+\r\n    //  o  IP V4 address: X'01'\r\n    //  o  DOMAINNAME: X'03'\r\n    //  o  IP V6 address: X'04'\r\n    let mut buf: Vec<u8> = vec![0; 4];\r\n    incoming.read_exact(&mut buf).await?;\r\n\r\n    // todo check ver and cmd\r\n    let adtype = buf[3];\r\n    let addr = Addr::from_reader(adtype, &mut incoming).await?;\r\n\r\n    let mut remote = match addr {\r\n        Addr::SocketAddress(sock) => tokio::net::TcpStream::connect(sock).await?,\r\n        Addr::DomainNameAddress(domain, port) => {\r\n            tokio::net::TcpStream::connect((domain, port)).await?\r\n        }\r\n    };\r\n\r\n    let mut reply = vec![0x05, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00];\r\n    incoming.write(&mut reply).await?;\r\n\r\n    let from = incoming.peer_addr()?;\r\n    // let tunnel = incoming.local_addr()?;\r\n    let target = remote.peer_addr()?;\r\n\r\n    let (rl, wl) = tokio::io::copy_bidirectional(&mut incoming, &mut remote).await?;\r\n\r\n    info!(\r\n        'TCP tunnel {} <-> {} write {} read {} cost {:?}',\r\n        from,\r\n        target,\r\n        rl,\r\n        wl,\r\n        start.elapsed()\r\n    );\r\n    Ok(())\r\n}\r\n\r\n```\u3002", "top": 0, "createdAt": 1720887958, "style": "", "script": "<script src='https://blog.meekdai.com/Gmeek/plugins/GmeekTOC.js'></script><script src='https://blog.meekdai.com/Gmeek/plugins/lightbox.js'></script>", "head": "", "ogImage": "https://raw.githubusercontent.com/0x1042/0x1042.github.io/master/synthwave_option_4.png", "createdDate": "2024-07-14", "dateLabelColor": "#bc4c00"}, "P28": {"htmlDir": "docs/post/28.html", "labels": ["go"], "postTitle": "sock5 && http proxy in go", "postUrl": "post/28.html", "postSourceUrl": "https://github.com/0x1042/0x1042.github.io/issues/28", "commentNum": 0, "wordCount": 5941, "description": "# listen\r\n\r\n```go\r\ntype Stream struct {\r\n\tr *bufio.Reader\r\n\tnet.Conn\r\n}\r\n\r\nfunc newStream(c net.Conn) *Stream {\r\n\treturn &Stream{bufio.NewReader(c), c}\r\n}\r\n\r\nfunc (b *Stream) Peek(n int) ([]byte, error) {\r\n\treturn b.r.Peek(n)\r\n}\r\n\r\nfunc (b *Stream) Read(p []byte) (int, error) {\r\n\treturn b.r.Read(p)\r\n}\r\n\r\nfunc (b *Stream) Line() (string, error) {\r\n\tline, _, err := b.r.ReadLine()\r\n\treturn string(line), err\r\n}\r\n\r\nfunc readBe[T any](r io.Reader, data T) (err error) {\r\n\tif err = binary.Read(r, binary.BigEndian, data); err != nil {\r\n\t\tlog.Error().Err(err).Msg('readBe error')\r\n\t}\r\n\treturn\r\n}\r\n\r\nfunc writeBe[T any](r io.Writer, data T) (err error) {\r\n\tif err = binary.Write(r, binary.BigEndian, data); err != nil {\r\n\t\tlog.Error().Err(err).Msg('writeBe error')\r\n\t}\r\n\treturn\r\n}\r\n\r\nfunc listen(option Option) error {\r\n\tvar lc net.ListenConfig\r\n\tlc.SetMultipathTCP(true)\r\n\tlc.Control = func(_, _ string, c syscall.RawConn) error {\r\n\t\tvar err error\r\n\t\t_ = c.Control(func(fd uintptr) {\r\n\t\t\tif option.nodelay {\r\n\t\t\t\terr = unix.SetsockoptInt(int(fd), unix.IPPROTO_TCP, unix.TCP_NODELAY, 1)\r\n\t\t\t}\r\n\t\t\tif option.fastOpen {\r\n\t\t\t\terr = unix.SetsockoptInt(int(fd), unix.IPPROTO_TCP, unix.TCP_FASTOPEN, 1)\r\n\t\t\t}\r\n\t\t\tif option.reuseAddr {\r\n\t\t\t\terr = unix.SetsockoptInt(int(fd), unix.SOL_SOCKET, unix.SO_REUSEADDR, 1)\r\n\t\t\t\terr = unix.SetsockoptInt(int(fd), unix.SOL_SOCKET, unix.SO_REUSEPORT, 1)\r\n\t\t\t}\r\n\t\t})\r\n\t\treturn err\r\n\t}\r\n\tln, err := lc.Listen(context.Background(), 'tcp', option.addr)\r\n\tif err != nil {\r\n\t\treturn err\r\n\t}\r\n\r\n\tlog.Info().Str('addr', option.addr).Msg('server start')\r\n\r\n\tfor {\r\n\t\tconn, err := ln.Accept()\r\n\t\tif err != nil {\r\n\t\t\tlog.Error().Err(err).Msg('accept error')\r\n\t\t\tbreak\r\n\t\t}\r\n\t\tstream := newStream(conn)\r\n\r\n\t\tpeek, _ := stream.Peek(1)\r\n\t\tlog.Trace().Uint8('type', peek[0]).Str('from', conn.LocalAddr().String()).Msg('incomeing request')\r\n\t\tif peek[0] == 0x05 {\r\n\t\t\tgo serveSocks(stream)\r\n\t\t} else {\r\n\t\t\tgo serveHTTP(stream)\r\n\t\t}\r\n\t}\r\n\treturn nil\r\n}\r\n\r\n```\r\n\r\n\r\n# http\r\n\r\n```go\r\n\r\nvar SUCCESS = []byte('HTTP/1.1 200 Connection Established\\r\\n\\r\\n')\r\n\r\nconst (\r\n\tCONNECT  = 'CONNECT'\r\n\tLF       = '\\r\\n'\r\n\tPORT     = '80'\r\n\tHEADLEN  = 5\r\n\tHEADSIZE = 512\r\n)\r\n\r\ntype Req struct {\r\n\tMethod string\r\n\tHost   string\r\n\tPort   string\r\n}\r\n\r\nfunc newReq(line []string) *Req {\r\n\treq := new(Req)\r\n\treq.Port = PORT\r\n\t// first\r\n\t{\r\n\t\t// CONNECT www.google.com:443 HTTP/1.1\\r\\n\r\n\t\t// GET http://www.google.com/ HTTP/1.1\\r\\n\r\n\t\ttmps := strings.Split(line[0], ' ')\r\n\t\treq.Method = tmps[0]\r\n\t}\r\n\r\n\t// second\r\n\t{\r\n\r\n\t\t// Host: www.google.com:443\r\n\t\t// Host: www.google.com\r\n\t\ttmps := strings.Split(line[1], ':')\r\n\t\treq.Host = strings.TrimSpace(tmps[1])\r\n\t\tif len(tmps) == 3 {\r\n\t\t\treq.Port = strings.TrimSpace(tmps[2])\r\n\t\t}\r\n\t}\r\n\treturn req\r\n}\r\n\r\nfunc serveHTTP(stream *Stream) {\r\n\theaders := make([]string, 0, HEADLEN)\r\n\tfor {\r\n\t\tline, err := stream.Line()\r\n\t\tif err != nil {\r\n\t\t\tlog.Error().Err(err).Msg('read line error')\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tif line == LF || len(line) == 0 {\r\n\t\t\tbreak\r\n\t\t}\r\n\t\theaders = append(headers, line)\r\n\t}\r\n\r\n\treq := newReq(headers)\r\n\tremoteAddr := net.JoinHostPort(req.Host, req.Port)\r\n\r\n\tremote, err := net.Dial('tcp', remoteAddr)\r\n\tif err != nil {\r\n\t\tlog.Error().Err(err).Str('to', remoteAddr).Msg('connect error')\r\n\t\treturn\r\n\t}\r\n\r\n\tif req.Method == CONNECT {\r\n\t\t_, _ = stream.Write(SUCCESS)\r\n\t} else {\r\n\t\tbuf := bytes.Buffer{}\r\n\t\tbuf.Grow(HEADSIZE)\r\n\t\tfor _, line := range headers {\r\n\t\t\tif strings.HasPrefix(line, 'Proxy') {\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\t\t\tbuf.WriteString(line)\r\n\t\t\tbuf.WriteString(LF)\r\n\t\t}\r\n\t\tbuf.WriteString(LF)\r\n\t\t_, _ = remote.Write(buf.Bytes())\r\n\t}\r\n\trelay(stream, remote)\r\n}\r\n\r\n```\r\n\r\n# socks5\r\n\r\n```go\r\n\r\nvar (\r\n\tSUC    = []byte{0x05, 0x00}\r\n\tSusRep = []byte{0x05, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}\r\n\terrRep = []byte{0x05, 0x04, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}\r\n)\r\n\r\nfunc serveSocks(stream *Stream) {\r\n\theader := make([]byte, 2)\r\n\t_ = readBe(stream, &header)\r\n\r\n\tnmeth := header[1]\r\n\r\n\tmethods := make([]byte, int(nmeth))\r\n\t_ = readBe(stream, &methods)\r\n\r\n\t_ = writeBe(stream, SUC)\r\n\r\n\t// read request\r\n\r\n\trequest := make([]byte, 4)\r\n\t_ = readBe(stream, &request)\r\n\r\n\tadtp := request[3]\r\n\r\n\tvar host string\r\n\r\n\tswitch adtp {\r\n\tcase 1:\r\n\t\thostBuf := make([]byte, net.IPv4len)\r\n\t\t_ = readBe(stream, &hostBuf)\r\n\t\thost = net.IP(hostBuf).String()\r\n\tcase 3:\r\n\t\thostBuf := make([]byte, net.IPv6len)\r\n\t\t_ = readBe(stream, &hostBuf)\r\n\t\thost = net.IP(hostBuf).String()\r\n\tdefault:\r\n\t\tvar length uint8\r\n\t\t_ = readBe(stream, &length)\r\n\t\tbuf := make([]byte, length)\r\n\t\t_ = readBe(stream, &buf)\r\n\t\thost = string(buf)\r\n\t}\r\n\r\n\tportBuf := make([]byte, 2)\r\n\t_ = readBe(stream, &portBuf)\r\n\tport := binary.BigEndian.Uint16(portBuf)\r\n\r\n\ttargetAddr := net.JoinHostPort(host, strconv.FormatInt(int64(port), 10))\r\n\r\n\tremote, err := net.Dial('tcp', targetAddr)\r\n\tif err != nil {\r\n\t\tlog.Error().Err(err).Str('remote', targetAddr).Msg('connect error')\r\n\t\t_, _ = stream.Write(errRep)\r\n\t\treturn\r\n\t}\r\n\t_, _ = stream.Write(SusRep)\r\n\trelay(stream, remote)\r\n}\r\n\r\n```\r\n\r\n# relay\r\n\r\n```go\r\ntype Resp struct {\r\n\tlen  int64\r\n\terr  error\r\n\tfrom net.Addr\r\n\tto   net.Addr\r\n}\r\n\r\nfunc relay(from, to net.Conn) {\r\n\tdefer func(from, to net.Conn) {\r\n\t\t_ = from.Close()\r\n\t\t_ = to.Close()\r\n\t}(from, to)\r\n\r\n\tchannel := make(chan Resp, 2)\r\n\r\n\tgo func(dst, src net.Conn) {\r\n\t\tsize, err := io.Copy(dst, src)\r\n\t\tchannel <- Resp{len: size, err: err, from: src.RemoteAddr(), to: dst.RemoteAddr()}\r\n\t}(from, to)\r\n\r\n\tgo func(dst, src net.Conn) {\r\n\t\tsize, err := io.Copy(dst, src)\r\n\t\tchannel <- Resp{len: size, err: err, from: src.RemoteAddr(), to: dst.RemoteAddr()}\r\n\t}(to, from)\r\n\r\n\tfor resp := range channel {\r\n\t\tif resp.err != nil && resp.err != io.EOF {\r\n\t\t\tlog.Error().Err(resp.err).Str('from', resp.from.String()).Str('to', resp.to.String()).Msg('relay error')\r\n\t\t} else {\r\n\t\t\tlog.Info().Str('from', resp.from.String()).Str('to', resp.to.String()).Int64('transfer', resp.len).Msg('relay success')\r\n\t\t}\r\n\t}\r\n}\r\n\r\n```\r\n\u3002", "top": 0, "createdAt": 1720888186, "style": "", "script": "<script src='https://blog.meekdai.com/Gmeek/plugins/GmeekTOC.js'></script><script src='https://blog.meekdai.com/Gmeek/plugins/lightbox.js'></script>", "head": "", "ogImage": "https://raw.githubusercontent.com/0x1042/0x1042.github.io/master/synthwave_option_4.png", "createdDate": "2024-07-14", "dateLabelColor": "#bc4c00"}, "P29": {"htmlDir": "docs/post/29.html", "labels": ["misc"], "postTitle": "debian/ubuntu\u57fa\u672c\u4f7f\u7528", "postUrl": "post/29.html", "postSourceUrl": "https://github.com/0x1042/0x1042.github.io/issues/29", "commentNum": 0, "wordCount": 587, "description": "# apt update\r\n\r\n## warning\r\n\r\n```\r\n sudo apt update\r\nW: https://mirrors.tuna.tsinghua.edu.cn/llvm-apt/jammy/dists/llvm-toolchain-jammy-18/InRelease: \r\nKey is stored in legacy trusted.gpg keyring (/etc/apt/trusted.gpg),\r\nsee the DEPRECATION section in apt-key(8) for details.\r\n```\r\n\r\n\r\n## \u5904\u7406\r\n\r\n- \u627e\u5230\u5bf9\u5e94\u7684key \r\n```\r\nsudo apt-key list\r\n\r\n# \u627e\u5230\u4e0ewarning\u76f8\u5173\u7684key\r\n# \u8fd9\u91cc\u662fllvm\u7684 pub line \u6700\u540e8\u4e2a\u5b57\u7b26 \r\n\r\n```\r\n\r\n- \u5bfc\u5165\r\n\r\n```\r\nsudo apt-key export AF4F7421 | sudo gpg --dearmour -o /etc/apt/trusted.gpg.d/llvm.gpg\r\n```\r\n\r\n- \u91cd\u65b0update \r\n\r\n# \u6e05\u7406\u65e0\u6548\u8f6f\u8fde\u63a5\r\n\r\n```shell\r\n\r\nfind . -xtype l\r\n\r\nfind /path -xtype l\r\n```\r\n\r\n\r\n\u3002", "top": 0, "createdAt": 1724487882, "style": "", "script": "<script src='https://blog.meekdai.com/Gmeek/plugins/GmeekTOC.js'></script><script src='https://blog.meekdai.com/Gmeek/plugins/lightbox.js'></script>", "head": "", "ogImage": "https://raw.githubusercontent.com/0x1042/0x1042.github.io/master/synthwave_option_4.png", "createdDate": "2024-08-24", "dateLabelColor": "#bc4c00"}, "P30": {"htmlDir": "docs/post/30.html", "labels": ["c++"], "postTitle": "gcc 32\u4f4d\u7f16\u8bd1", "postUrl": "post/30.html", "postSourceUrl": "https://github.com/0x1042/0x1042.github.io/issues/30", "commentNum": 0, "wordCount": 614, "description": "# 32\u4f4d\u7f16\u8bd1 m32 \r\n\r\n```\r\nset(CMAKE_C_FLAGS '${CMAKE_C_FLAGS} -m32')\r\nset(CMAKE_CXX_FLAGS '${CMAKE_CXX_FLAGS} -m32')\r\n```\r\n\r\n# \u5b89\u88c532\u4f4dlib \r\n\r\n```\r\nsudo apt install gcc-multilib g++-multilib libc6-dev-i386 -y\r\n```\r\n\r\n# \u5f00\u542fO3\r\n\r\n> `cmake` \u9ed8\u8ba4`RelWithDebInfo` \u6a21\u5f0f\u662f`O2`\r\n\r\n```cmake\r\nset(CMAKE_C_FLAGS_RELWITHDEBINFO\r\n    '-O3 -g'\r\n    CACHE STRING\r\n          'Flags used by the C compiler during release builds with debug info.'\r\n          FORCE)\r\nset(CMAKE_CXX_FLAGS_RELWITHDEBINFO\r\n    '-O3 -g'\r\n    CACHE\r\n      STRING\r\n      'Flags used by the C++ compiler during release builds with debug info.'\r\n      FORCE)\r\n```\r\n \r\n\r\n\r\n\u3002", "top": 0, "createdAt": 1724571057, "style": "", "script": "<script src='https://blog.meekdai.com/Gmeek/plugins/GmeekTOC.js'></script><script src='https://blog.meekdai.com/Gmeek/plugins/lightbox.js'></script>", "head": "", "ogImage": "https://raw.githubusercontent.com/0x1042/0x1042.github.io/master/synthwave_option_4.png", "createdDate": "2024-08-25", "dateLabelColor": "#bc4c00"}, "P31": {"htmlDir": "docs/post/31.html", "labels": ["c++", "rust"], "postTitle": "Rust\u8c03\u7528C++ 32bit lib(1)", "postUrl": "post/31.html", "postSourceUrl": "https://github.com/0x1042/0x1042.github.io/issues/31", "commentNum": 0, "wordCount": 1339, "description": "# c\u517c\u5bb9\r\n\r\n```c++\r\n#pragma once\r\n\r\n#ifdef __cplusplus\r\n\r\nextern 'C' {\r\n#endif\r\nvoid parse_entry(char *fname, int level);\r\n\r\n#ifdef __cplusplus\r\n}\r\n\r\n#endif\r\n```\r\n\r\n# cmake \r\n\r\n```cmake\r\nset(CMAKE_POSITION_INDEPENDENT_CODE ON)\r\nset(CMAKE_INTERPROCEDURAL_OPTIMIZATION TRUE)\r\n\r\nadd_library(parse STATIC ${LIBSRC})\r\n```\r\n\r\n\r\n# rust 32 bit target\r\n\r\n```\r\n\r\n# add target\r\nrustup target add i686-unknown-linux-gnu\r\n\r\n# \u7f16\u8bd1\r\ncargo build --target=i686-unknown-linux-gnu\r\n```\r\n\r\n# \u5bfc\u5165\r\n\r\n## \u4f9d\u8d56\r\n\r\n```rust\r\n[build-dependencies]\r\ncc = '1.0'\r\n```\r\n\r\n## \u4ee3\u7801 \r\n\r\n```rust \r\n#[link(name = 'parse', kind = 'static')]\r\nextern 'C' {\r\n    fn parsev2() -> c_void;\r\n}\r\n```\r\n\r\n## build.rs\r\n\r\n```rust\r\nfn main() {\r\n    println!('cargo:rustc-link-search=native=reallibpath');\r\n}\r\n\r\n```\r\n\r\n## \u7f16\u8bd1\u5931\u8d25 \r\n<img width='1876' alt='image' src='https://github.com/user-attachments/assets/e2121d3b-f342-490f-bf15-e19141aaae35'>\r\n\r\n```\r\nundefined reference to std::__cxx11::basic_string<char, std::char_traits<char>, \r\nstd::allocator<char> >::rfind(char, unsigned int) const\r\n```\r\n\r\n> \u66f4\u65b0build.rs\r\n\r\n```rust\r\n// build.sh \r\n\r\nfn main() {\r\n    // \u94fe\u63a5c++\u6807\u51c6\u5e93\u548cgcc\u52a8\u6001\u5e93 \r\n    println!('cargo:rustc-link-lib=dylib=stdc++');\r\n    println!('cargo:rustc-link-lib=dylib=gcc_s');\r\n}\r\n```\r\n\r\n> \u6216\u8005\u5168\u9759\u6001\u7f16\u8bd1lib\r\n\r\n```cmake\r\ntarget_link_libraries(parse\r\n    -static-libstdc++\r\n    -static-libgcc\r\n)\r\n```\r\n\r\n\u3002", "top": 0, "createdAt": 1724576477, "style": "", "script": "<script src='https://blog.meekdai.com/Gmeek/plugins/GmeekTOC.js'></script><script src='https://blog.meekdai.com/Gmeek/plugins/lightbox.js'></script>", "head": "", "ogImage": "https://raw.githubusercontent.com/0x1042/0x1042.github.io/master/synthwave_option_4.png", "createdDate": "2024-08-25", "dateLabelColor": "#bc4c00"}, "P32": {"htmlDir": "docs/post/32.html", "labels": ["c++"], "postTitle": "\u6c47\u7f16(1)", "postUrl": "post/32.html", "postSourceUrl": "https://github.com/0x1042/0x1042.github.io/issues/32", "commentNum": 0, "wordCount": 1610, "description": "\r\n- [\u57fa\u672c\u7279\u5f81](#\u57fa\u672c\u7279\u5f81)\r\n- [`hello world`](#hello-world)\r\n- [\u5bfb\u5740](#\u5bfb\u5740)\r\n  - [\u5bc4\u5b58\u5668\u5bfb\u5740](#\u5bc4\u5b58\u5668\u5bfb\u5740)\r\n  - [\u7acb\u5373\u5bfb\u5740](#\u7acb\u5373\u5bfb\u5740)\r\n  - [\u95f4\u63a5(\u5185\u5b58)\u5bfb\u5740](#\u95f4\u63a5\u5185\u5b58\u5bfb\u5740)\r\n  - [\u7d22\u5f15\u5bfb\u5740](#\u7d22\u5f15\u5bfb\u5740)\r\n  - [\u57fa\u5740\u5bfb\u5740](#\u57fa\u5740\u5bfb\u5740)\r\n- [op](#op)\r\n\r\n> `gdb` \u9ed8\u8ba4\u7684\u6c47\u7f16\u98ce\u683c\u662f`AT&T` \r\n\r\n# \u57fa\u672c\u7279\u5f81 \r\n\r\n- \u6e90\u64cd\u4f5c\u6570\u5728\u524d\uff0c\u76ee\u7684\u64cd\u4f5c\u6570\u5728\u540e \r\n- \u5bc4\u5b58\u5668\u4ee5`%`\u5f00\u5934  \r\n- \u7acb\u5373\u6570\u4ee5 `$`\u5f00\u5934\uff0c\u5373\u5e38\u91cf\u6570\r\n\r\n\r\n# `hello world`\r\n\r\n```asm\r\nmovl %eax,%ebx ; \u628a\u5bc4\u5b58\u5668eax\u7684\u503c\u79fb\u52a8\u5230ebx\u5bc4\u5b58\u5668\r\n```\r\n\r\n```asm\r\nmovl $5, %eax    ; \u628a\u7acb\u5373\u6570 5 \u79fb\u52a8\u5230 EAX\r\n```\r\n\r\n# \u5bfb\u5740\r\n\r\n```asm \r\n\r\n; \u5730\u5740\u6216\u504f\u79fb(%\u57fa\u5740\u6216\u504f\u79fb\u91cf\u5bc4\u5b58\u5668,%\u7d22\u5f15\u5bc4\u5b58\u5668,\u6bd4\u4f8b\u56e0\u5b50)\r\n\r\n; dst = \u5730\u5740\u6216\u504f\u79fb + %\u7d22\u5f15\u5bc4\u5b58\u5668 * \u6bd4\u4f8b\u56e0\u5b50\r\n\r\n```\r\n\r\n## \u5bc4\u5b58\u5668\u5bfb\u5740\r\n\r\n```asm\r\nmov    %rax,%rdi ;\u628a\u5bc4\u5b58\u5668rax\u7684\u503c\u79fb\u52a8\u5230rdi\u5bc4\u5b58\u5668\r\n\r\n; \u4e0e\u5185\u5b58\u65e0\u5173\r\n; \u5982\u679crax = 0x12345678\r\n; \u90a3\u4e48\u8fd9\u6761\u6307\u4ee4\u6267\u884c\u7ed3\u675f\u540e\uff0crdi\u7684\u503c\u4e5f\u662f 0x12345678\r\n```\r\n\r\n## \u7acb\u5373\u5bfb\u5740\r\n\r\n```asm\r\nmov    $0xa,%esi\r\n; $ \u8868\u793a\u7acb\u5373\u6570 \uff0c0xa \u5373\u5341\u8fdb\u5236\u768410\r\n; \u6267\u884c\u7ed3\u675f\u540e\uff0c\u5bc4\u5b58\u5668esi\u7684\u503c\u5c31\u662f10\r\n```\r\n\r\n## \u95f4\u63a5(\u5185\u5b58)\u5bfb\u5740 \r\n\r\n```asm\r\nmov     (%rip),%rdi\r\n; rip\u5bc4\u5b58\u5668\u5b58\u653e\u7684\u662f\u4e00\u4e2a\u5185\u5b58\u5730\u5740\r\n; (%rip) \u8868\u793a\u8be5\u5185\u5b58\u5730\u5740\u6307\u5411\u7684\u6570\u636e\r\n; \u4e0a\u8ff0\u6307\u4ee4\u7684\u662f\u610f\u601d\u662f \u5c06 rip\u5bc4\u5b58\u5668\u6240\u6307\u5411\u7684\u5185\u5b58\u4e2d\u7684\u503c\u52a0\u8f7d\u5230rdi\u5bc4\u5b58\u5668\u4e2d \r\n```\r\n\r\n## \u7d22\u5f15\u5bfb\u5740\r\n\r\n```asm\r\nsubl -0x20(%ebx, %ecx, 0x4), %eax\r\n\r\n; eax = %ebx + (%ecx * 0x4) - 0x20\r\n```\r\n\r\n## \u57fa\u5740\u5bfb\u5740\r\n\r\n```asm\r\nmovsd  -0x18(%rbp),%xmm0\r\n; \u4ece (rbp)\u5730\u5740-0x18 \u7684\u5185\u5b58\u5730\u5740\u8bfb\u53d6\u6570\u636e\uff0c\u79fb\u52a8\u5230xmm0 \u5bc4\u5b58\u5668 \r\n\r\nmov    0x2db6(%rip),%rdi\r\n; \u4ece (rip)\u5730\u5740 + 0x2db6 \u7684\u5185\u5b58\u5730\u5740\u8bfb\u53d6\u6570\u636e\uff0c\u79fb\u52a8\u5230rdi \u5bc4\u5b58\u5668\r\n```\r\n\r\n# op\r\n\r\n> \u540e\u7f00\u8868\u793a\u64cd\u4f5c\u6570\u7684\u957f\u5ea6\r\n\r\n| \u540e\u7f00 | \u8bf4\u660e            | \u957f\u5ea6(\u5b57\u8282) | C\u58f0\u660e                     |\r\n| ---- | --------------- | ---------- | ------------------------- |\r\n| `b`  | `byte`          | **1**      | `char c = 'z';`           |\r\n| `w`  | `word`          | **2**      | `short len = 3;`          |\r\n| `l`  | `long`          | **4**      | `int32_t val = 1024;`     |\r\n| `q`  | `quad`          | **8**      | `uint64_t id = 42;`       |\r\n| `sd` | `Scalar Double` | **8**      | `double p = 3.141592653;` |\u3002", "top": 0, "createdAt": 1725690104, "style": "", "script": "<script src='https://blog.meekdai.com/Gmeek/plugins/GmeekTOC.js'></script><script src='https://blog.meekdai.com/Gmeek/plugins/lightbox.js'></script>", "head": "", "ogImage": "https://raw.githubusercontent.com/0x1042/0x1042.github.io/master/synthwave_option_4.png", "createdDate": "2024-09-07", "dateLabelColor": "#bc4c00"}, "P33": {"htmlDir": "docs/post/33.html", "labels": ["ml"], "postTitle": "ml \u626b\u76f2\u4e09", "postUrl": "post/33.html", "postSourceUrl": "https://github.com/0x1042/0x1042.github.io/issues/33", "commentNum": 0, "wordCount": 3280, "description": "# \u795e\u7ecf\u7f51\u7edc\u642d\u5efa\u6b65\u9aa4 \r\n\r\n- [\u795e\u7ecf\u7f51\u7edc\u642d\u5efa\u6b65\u9aa4](#\u795e\u7ecf\u7f51\u7edc\u642d\u5efa\u6b65\u9aa4)\r\n  - [\u52a0\u8f7d\u6570\u636e](#\u52a0\u8f7d\u6570\u636e)\r\n  - [\u5b9a\u4e49\u7f51\u7edc\u6a21\u578b](#\u5b9a\u4e49\u7f51\u7edc\u6a21\u578b)\r\n  - [\u5b9a\u4e49\u635f\u5931\u51fd\u6570](#\u5b9a\u4e49\u635f\u5931\u51fd\u6570)\r\n  - [\u5b9a\u4e49\u4f18\u5316\u5668](#\u5b9a\u4e49\u4f18\u5316\u5668)\r\n  - [\u8bad\u7ec3](#\u8bad\u7ec3)\r\n  - [\u6d4b\u8bd5](#\u6d4b\u8bd5)\r\n  - [\u4fdd\u5b58\u6a21\u578b](#\u4fdd\u5b58\u6a21\u578b)\r\n\r\n\r\n```mermaid\r\nflowchart LR\r\n\r\n\u6570\u636e-->\u7f51\u7edc\u7ed3\u6784\r\n\u7f51\u7edc\u7ed3\u6784-->\u635f\u5931\u51fd\u6570\r\n\u635f\u5931\u51fd\u6570-->\u4f18\u5316\u5668\r\n\u4f18\u5316\u5668-->\u8bad\u7ec3\r\n\u8bad\u7ec3-->\u6d4b\u8bd5\r\n\u6d4b\u8bd5-->\u5bfc\u51fa\u6a21\u578b\r\n```\r\n\r\n## \u52a0\u8f7d\u6570\u636e\r\n\r\n```python\r\nimport torch\r\nfrom torchvision import datasets, transforms\r\nimport torch.optim as optim \r\nimport torch.nn as nn\r\nimport torch.utils.data as data\r\n\r\ntrain_data = datasets.MNIST(root='data/mnist', train=True, transform=transforms.ToTensor(), download=True)\r\ntest_data = datasets.MNIST(root='data/mnist', train=False, transform=transforms.ToTensor(), download=True)\r\n```\r\n\r\n> \u7531\u4e8e\u6570\u636e\u89c4\u6a21\uff0c\u4e0d\u53ef\u80fd\u5c06\u6240\u6709\u7684\u6570\u636e\u52a0\u8f7d\u4e00\u6b21\u8bad\u7ec3\u3002", "top": 0, "createdAt": 1726554067, "style": "", "script": "<script src='https://blog.meekdai.com/Gmeek/plugins/GmeekTOC.js'></script><script src='https://blog.meekdai.com/Gmeek/plugins/lightbox.js'></script>", "head": "", "ogImage": "https://raw.githubusercontent.com/0x1042/0x1042.github.io/master/synthwave_option_4.png", "createdDate": "2024-09-17", "dateLabelColor": "#bc4c00"}, "P34": {"htmlDir": "docs/post/34.html", "labels": ["ml"], "postTitle": "ml \u626b\u76f2\u56db", "postUrl": "post/34.html", "postSourceUrl": "https://github.com/0x1042/0x1042.github.io/issues/34", "commentNum": 0, "wordCount": 8359, "description": "# origin post\r\n\r\n> https://x.com/konradgajdus/status/1837196363735482396\r\n\r\n- [origin post](#origin-post)\r\n- [process data](#process-data)\r\n  - [\u8bfb\u53d6images](#\u8bfb\u53d6images)\r\n  - [\u8bfb\u53d6labels](#\u8bfb\u53d6labels)\r\n- [\u5b9a\u4e49\u7f51\u7edc](#\u5b9a\u4e49\u7f51\u7edc)\r\n  - [\u7ed3\u6784](#\u7ed3\u6784)\r\n  - [\u521d\u59cb\u5316](#\u521d\u59cb\u5316)\r\n- [\u524d\u5411\u4f20\u64ad](#\u524d\u5411\u4f20\u64ad)\r\n- [\u53cd\u5411\u4f20\u64ad](#\u53cd\u5411\u4f20\u64ad)\r\n- [\u8bad\u7ec3](#\u8bad\u7ec3)\r\n  - [\u5355\u4e2ainstance\u5355\u6b21\u8fed\u4ee3](#\u5355\u4e2ainstance\u5355\u6b21\u8fed\u4ee3)\r\n  - [batch\u8bad\u7ec3](#batch\u8bad\u7ec3)\r\n- [\u9884\u6d4b](#\u9884\u6d4b)\r\n- [\u9a8c\u8bc1](#\u9a8c\u8bc1)\r\n\r\n# process data\r\n\r\n> \u6570\u636e\u4e0b\u8f7d\u5730\u5740 https://yann.lecun.com/exdb/mnist/\r\n\r\n| \u6587\u4ef6                    | \u8bf4\u660e       |\r\n| ----------------------- | ---------- |\r\n| `train-images-idx3-ubyte` | \u8bad\u7ec3\u96c6\u56fe\u7247 |\r\n| `train-labels-idx1-ubyte` | \u8bad\u7ec3\u96c6\u6807\u7b7e |\r\n| `t10k-images-idx3-ubyte`  | \u6d4b\u8bd5\u96c6\u56fe\u7247 |\r\n| `t10k-labels-idx1-ubyte`  | \u6d4b\u8bd5\u96c6\u6807\u7b7e |\r\n\r\n\r\n## \u8bfb\u53d6images\r\n\r\n> \u6570\u636e\u683c\u5f0f \r\n\r\n```\r\n[offset] [type]          [value]          [description]\r\n0000     32 bit integer  0x00000803(2051) magic number\r\n0004     32 bit integer  60000            number of images\r\n0008     32 bit integer  28               number of rows\r\n0012     32 bit integer  28               number of columns\r\n0016     unsigned byte   ??               pixel\r\n0017     unsigned byte   ??               pixel\r\n........\r\nxxxx     unsigned byte   ??               pixel\r\nPixels are organized row-wise. Pixel values are 0 to 255. 0 means background (white), 255 means foreground (black).\r\n```\r\n\r\n```c\r\nvoid read_images(const char *fname, unsigned char **images, int *count) {\r\n\tFILE *file = fopen(fname, 'rb');\r\n\tif (file == NULL) {\r\n\t\tprintf('%s open %s failed.', __FUNCTION__, fname);\r\n\t\texit(1);\r\n\t}\r\n\r\n\tint magic = 0;\r\n\tint rows, cols;\r\n\t// magic numx\r\n\tfread(&magic, sizeof(int), 1, file);\r\n\t// number of images\r\n\tfread(count, sizeof(int), 1, file);\r\n\t// \u8f6c\u6210\u5927\u7aef\r\n\t*count = __builtin_bswap32(*count);\r\n\r\n\t// number of rows\r\n\tfread(&rows, sizeof(int), 1, file);\r\n\t//\tnumber of columns\r\n\tfread(&cols, sizeof(int), 1, file);\r\n\r\n\trows = __builtin_bswap32(rows);\r\n\tcols = __builtin_bswap32(cols);\r\n\r\n\tprintf('%s: %d/%d/%d\\n', __FUNCTION__, *count, rows, cols);\r\n\r\n\t*images = malloc((*count) * IMAGE_SIZE * IMAGE_SIZE);\r\n\tfread(*images, sizeof(unsigned char), (*count) * IMAGE_SIZE * IMAGE_SIZE, file);\r\n\tfclose(file);\r\n}\r\n```\r\n\r\n## \u8bfb\u53d6labels\r\n\r\n> \u6570\u636e\u683c\u5f0f\r\n\r\n```\r\n[offset] [type]          [value]          [description]\r\n0000     32 bit integer  0x00000801(2049) magic number (MSB first)\r\n0004     32 bit integer  60000            number of items\r\n0008     unsigned byte   ??               label\r\n0009     unsigned byte   ??               label\r\n........\r\nxxxx     unsigned byte   ??               label\r\nThe labels values are 0 to 9.\r\n```\r\n\r\n```c\r\nvoid read_labels(const char *fname, unsigned char **labels, int *count) {\r\n\tFILE *file = fopen(fname, 'rb');\r\n\tif (file == NULL) {\r\n\t\texit(1);\r\n\t}\r\n\tprintf('open file [%s] success.\\n', fname);\r\n\r\n\tint magic = 0;\r\n\tfread(&magic, sizeof(int), 1, file);\r\n\tfread(count, sizeof(int), 1, file);\r\n\t*count = __builtin_bswap32(*count);\r\n\r\n\tprintf('labels count. %d.\\n', *count);\r\n\r\n\t*labels = malloc(*count);\r\n\r\n\tfread(*labels, sizeof(unsigned char), *count, file);\r\n\tfclose(file);\r\n}\r\n```\r\n\r\n# \u5b9a\u4e49\u7f51\u7edc \r\n\r\n## \u7ed3\u6784 \r\n\r\n```c\r\ntypedef struct {\r\n\tfloat *weights; // \u6743\u91cd \r\n\tfloat *biases;  // \u504f\u5dee\r\n\tint input_size;\r\n\tint output_size;\r\n} Layer;\r\n\r\ntypedef struct {\r\n\tLayer hidden;\r\n\tLayer output;\r\n} Network;\r\n```\r\n\r\n## \u521d\u59cb\u5316 \r\n\r\n> \u795e\u7ecf\u7f51\u7edc\u7684\u8bad\u7ec3\u8fc7\u7a0b\u672c\u8d28\u662f\u5bf9\u6743\u91cd\u53c2\u6570\u7684\u66f4\u65b0\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6743\u91cd\u7684\u521d\u59cb\u503c\u662f\u4ec0\u4e48?\r\n> \u9996\u5148\u4e0d\u80fd\u662f0\uff0c\u56e0\u4e3a $y = wx +b $ \u4e2d\uff0c\u5982\u679cw = 0\uff0c\u90a3\u4e48\u6240\u6709\u795e\u7ecf\u5143\u7684\u8f93\u51fa\u662f\u76f8\u540c\u7684 \u53cd\u5411\u4f20\u64ad\u8fc7\u7a0b\u7684\u68af\u5ea6\u4e5f\u662f\u76f8\u540c\u7684 \r\n\r\n**He initialization**\r\n\r\n> \u601d\u60f3\u662f\u5c06\u6743\u91cd\u521d\u59cb\u5316\u4e3a\u6ee1\u8db3\u4e00\u4e2a\u6807\u51c6\u6b63\u6001\u5206\u5e03\r\n\r\n```c\r\nvoid init_layer(Layer *layer, int in_size, int out_size) {\r\n\tint n = in_size * out_size;\r\n\tfloat scale = sqrtf(2.0f / in_size);\r\n\r\n\tlayer->input_size = in_size;\r\n\tlayer->output_size = out_size;\r\n\tlayer->weights = malloc(n * sizeof(float));\r\n\tlayer->biases = calloc(out_size, sizeof(float));\r\n\r\n\tfor (int i = 0; i < n; i++)\r\n\t\tlayer->weights[i] = ((float)rand() / RAND_MAX - 0.5f) * 2 * scale;\r\n}\r\n```\r\n\r\n# \u524d\u5411\u4f20\u64ad\r\n\r\n> \u5373\u7ed9\u5b9a\u8f93\u5165 \u8ba1\u7b97\u795e\u7ecf\u7f51\u7edc\u8f93\u51fa\u7684\u8fc7\u7a0b \r\n> \u6b65\u9aa4: \u5c06\u8f93\u5165\u6570\u636e\u79fb\u52a8\u5230\u7f51\u7edc\u7684\u6bcf\u4e00\u5c42\uff0c\u5e94\u7528\u7ebf\u5f62\u53d8\u6362\u548c\u6fc0\u6d3b\u51fd\u6570\uff0c\u4ea7\u751f\u8f93\u51fa\r\n\r\n```c\r\nvoid forward(Layer *layer, float *input, float *output) {\r\n\tfor (int i = 0; i < layer->output_size; i++) {\r\n\t\toutput[i] = layer->biases[i];\r\n\t\tfor (int j = 0; j < layer->input_size; j++)\r\n\t\t\toutput[i] += input[j] * layer->weights[j * layer->output_size + i];\r\n\t}\r\n}\r\n\r\nvoid relu(float *hidden, int size) {\r\n\tfor (int i = 0; i < size; i++) {\r\n\t\thidden[i] = hidden[i] > 0 ? hidden[i] : 0;\r\n\t}\r\n}\r\n\r\nvoid softmax(float *input, int size) {\r\n\tfloat max = input[0], sum = 0;\r\n\tfor (int i = 1; i < size; i++) {\r\n\t\tif (input[i] > max) max = input[i];\r\n\t}\r\n\tfor (int i = 0; i < size; i++) {\r\n\t\tinput[i] = expf(input[i] - max);\r\n\t\tsum += input[i];\r\n\t}\r\n\tfor (int i = 0; i < size; i++) {\r\n\t\tinput[i] /= sum;\r\n\t}\r\n}\r\n```\r\n\r\n# \u53cd\u5411\u4f20\u64ad \r\n\r\n> \u6839\u636e\u68af\u5ea6\u66f4\u65b0\u6743\u91cd\u548c\u504f\u5dee\r\n> \u6b65\u9aa4:\r\n\r\n```c\r\nvoid backward(Layer *layer, float *input, float *output_grad, float *input_grad, float lr) {\r\n\tfor (int i = 0; i < layer->output_size; i++) {\r\n\t\tfor (int j = 0; j < layer->input_size; j++) {\r\n\t\t\tint idx = j * layer->output_size + i;\r\n\t\t\t// \u76f8\u5bf9\u4e8e\u6743\u91cd\u7684\u635f\u5931\u68af\u5ea6\u7b49\u4e8e\u76f8\u5bf9\u4e8e\u8f93\u51fa\u7684\u635f\u5931\u68af\u5ea6\u4e58\u4ee5\u8f93\u5165\u503c\r\n\t\t\tfloat grad = output_grad[i] * input[j];\r\n\t\t\t// \u65b0\u7684\u6743\u91cd = \u65e7\u7684\u6743\u91cd \u51cf\u53bb \u5b66\u4e60\u7387\u4e58\u4ee5\u76f8\u5bf9\u4e8e\u6743\u91cd\u7684\u635f\u5931\u68af\u5ea6\r\n\t\t\tlayer->weights[idx] -= lr * grad;\r\n\t\t\t//\t\u76f8\u5bf9\u4e8e\u8f93\u5165 j \u7684\u635f\u5931\u68af\u5ea6\u662f\u6240\u6709\u8f93\u51fa\u7684\uff08\u5173\u4e8e\u6bcf\u4e2a\u8f93\u51fa i \u7684\u635f\u5931\u68af\u5ea6\u4e58\u4ee5\u5c06\u8f93\u5165 j \u8fde\u63a5\u5230\u8f93\u51fa i \u7684\u6743\u91cd\uff09\u7684\u603b\u548c\r\n\t\t\tif (input_grad) {\r\n\t\t\t\tinput_grad[j] += output_grad[i] * layer->weights[idx];\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// \u65b0\u504f\u5dee\u7b49\u4e8e\u65e7\u504f\u5dee\u51cf\u53bb\u5b66\u4e60\u7387\u4e58\u4ee5\u76f8\u5bf9\u4e8e\u504f\u5dee\u7684\u635f\u5931\u68af\u5ea6\u3002", "top": 0, "createdAt": 1726938028, "style": "", "script": "<script src='https://blog.meekdai.com/Gmeek/plugins/GmeekTOC.js'></script><script src='https://blog.meekdai.com/Gmeek/plugins/lightbox.js'></script>", "head": "", "ogImage": "https://raw.githubusercontent.com/0x1042/0x1042.github.io/master/synthwave_option_4.png", "createdDate": "2024-09-22", "dateLabelColor": "#bc4c00"}, "P35": {"htmlDir": "docs/post/35.html", "labels": ["misc"], "postTitle": "vscode misc", "postUrl": "post/35.html", "postSourceUrl": "https://github.com/0x1042/0x1042.github.io/issues/35", "commentNum": 0, "wordCount": 270, "description": "# terminal \u6253\u5f00\u62a5\u9519 \r\n\r\n```\r\nSecCodeCheckValidity: Error Domain=NSOSStatusErrorDomain Code=-67062 '(null)' (-67062)\r\n```\r\n\r\n## \u4fee\u590d \r\n\r\n```\r\nxattr -cr  /Applications/Visual\\ Studio\\ Code.app\r\nsudo codesign --force --deep --sign - /Applications/Visual\\ Studio\\ Code.app\r\n``` \r\n\u3002", "top": 0, "createdAt": 1726989794, "style": "", "script": "<script src='https://blog.meekdai.com/Gmeek/plugins/GmeekTOC.js'></script><script src='https://blog.meekdai.com/Gmeek/plugins/lightbox.js'></script>", "head": "", "ogImage": "https://raw.githubusercontent.com/0x1042/0x1042.github.io/master/synthwave_option_4.png", "createdDate": "2024-09-22", "dateLabelColor": "#bc4c00"}, "P36": {"htmlDir": "docs/post/36.html", "labels": ["protobuf"], "postTitle": "protobuf ListValue \u4f7f\u7528", "postUrl": "post/36.html", "postSourceUrl": "https://github.com/0x1042/0x1042.github.io/issues/36", "commentNum": 0, "wordCount": 3383, "description": "# \u80cc\u666f\r\n\r\n> \u8003\u8651\u8fd9\u4e2a`json` \u5982\u4f55\u5b9a\u4e49\u5bf9\u5e94\u7684`protobuf` \u7ed3\u6784\uff1f\r\n\r\n```json\r\n{\r\n    'show_list': {\r\n        'hello1': [\r\n            'world1',\r\n            'world1'\r\n        ],\r\n        'hello2': [\r\n            'world2',\r\n            'world2'\r\n        ]\r\n    }\r\n}\r\n```\r\n\r\n**`protobuf` \u4e2d\u65e0\u6cd5\u76f4\u63a5\u58f0\u660e`map<key,repeated values>` \u5bf9\u5e94\u7684\u7ed3\u6784\uff0c\u9700\u8981\u501f\u52a9`ListValue`**\r\n\r\n# \u5b9a\u4e49\r\n\r\n```protobuf\r\nsyntax = 'proto3';\r\n\r\npackage demo;\r\noption go_package = './demos';\r\n\r\nimport 'google/protobuf/struct.proto';\r\n\r\nmessage UaInfo {\r\n  map<string, google.protobuf.ListValue> show_list = 1;\r\n}\r\n\r\n```\r\n\r\n# cpp \r\n\r\n> \u751f\u6210 `protoc --proto_path=proto --cpp_out=pbgen proto/*.proto`\r\n\r\n- \u53cd\u5e8f\u5217\u5316\r\n\r\n```cpp\r\nTEST(pb, valus) {\r\n    const std::string json = R'({'show_list':{'hello1':['world1','world1'],'hello2':['world2','world2']}})';\r\n\r\n    google::protobuf::json::ParseOptions opt;\r\n    opt.ignore_unknown_fields = true;\r\n    opt.case_insensitive_enum_parsing = true;\r\n    demo::UaInfo info;\r\n\r\n    const auto & status = google::protobuf::json::JsonStringToMessage(json, &info, opt);\r\n\r\n    std::clog << 'status ' << status << '\\n';\r\n\r\n    std::clog << info.DebugString() << '\\n';\r\n\r\n    std::unordered_map<std::string, std::vector<std::string>> db;\r\n\r\n    for (const auto & inner : info.show_list()) {\r\n        for (const auto & list : inner.second.values()) {\r\n            db[inner.first].push_back(list.string_value());\r\n        }\r\n    }\r\n\r\n    // \u8f93\u51fa {'hello1': ['world1', 'world1'], 'hello2': ['world2', 'world2']}\r\n    std::clog << fmt::to_string(db) << '\\n';\r\n}\r\n```\r\n\r\n- \u751f\u6210\r\n\r\n```cpp\r\nTEST(pb, valus2) {\r\n    google::protobuf::json::PrintOptions opt;\r\n    opt.add_whitespace = true;\r\n    demo::UaInfo info;\r\n    auto * map = info.mutable_show_list();\r\n\r\n    {\r\n        google::protobuf::ListValue list_value;\r\n        list_value.add_values()->set_string_value('orld1010');\r\n        list_value.add_values()->set_string_value('orld1020');\r\n        (*map)['hello101'] = std::move(list_value);\r\n    }\r\n\r\n    {\r\n        google::protobuf::ListValue list_value;\r\n        list_value.add_values()->set_string_value('orld2010');\r\n        list_value.add_values()->set_string_value('orld2020');\r\n        (*map)['hello202'] = std::move(list_value);\r\n    }\r\n\r\n    std::clog << info.DebugString() << '\\n';\r\n\r\n    std::string message;\r\n\r\n    const auto & status = google::protobuf::json::MessageToJsonString(info, &message, opt);\r\n\r\n    std::clog << 'status ' << status << '\\n';\r\n\r\n    std::clog << 'message ' << message << '\\n';\r\n}\r\n```\r\n\r\n# go\r\n\r\n> \u751f\u6210 `protoc --proto_path=. --go_out=. --go_opt=paths=source_relative *.proto`\r\n\r\n- \u53cd\u5e8f\u5217\u5316\r\n\r\n```go\r\nfunc Test_test(t *testing.T) {\r\n\tstr := '{\\'show_list\\':{\\'hello1\\':[\\'world1\\',\\'world1\\'],\\'hello2\\':[\\'world2\\',\\'world2\\']}}'\r\n\tuainfo := new(UaInfo)\r\n\r\n\tif err := json.Unmarshal([]byte(str), uainfo); err != nil {\r\n\t\tlog.Fatal(err)\r\n\t}\r\n\r\n\tlog.Printf('%+v', uainfo)\r\n\r\n\tbs, err := json.Marshal(uainfo)\r\n\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\tlog.Printf('\\n%s', bs)\r\n}\r\n\r\n```\r\n\r\n- \u751f\u6210\r\n\r\n```go\r\nfunc Test_test2(t *testing.T) {\r\n\tuainfo := new(UaInfo)\r\n\tuainfo.ShowList = make(map[string]*structpb.ListValue)\r\n\tl1, _ := structpb.NewList([]any{'world101', 'world102'})\r\n\tuainfo.ShowList['hello1'] = l1\r\n\r\n\tl2, _ := structpb.NewList([]any{'world202', 'world201'})\r\n\tuainfo.ShowList['hello2'] = l2\r\n\r\n\tbs, err := json.Marshal(uainfo)\r\n\r\n\tif err != nil {\r\n\t\tpanic(err)\r\n\t}\r\n\tlog.Printf('uainfo\\n%s', bs)\r\n}\r\n```\r\n\u3002", "top": 0, "createdAt": 1728660577, "style": "", "script": "<script src='https://blog.meekdai.com/Gmeek/plugins/GmeekTOC.js'></script><script src='https://blog.meekdai.com/Gmeek/plugins/lightbox.js'></script>", "head": "", "ogImage": "https://raw.githubusercontent.com/0x1042/0x1042.github.io/master/synthwave_option_4.png", "createdDate": "2024-10-11", "dateLabelColor": "#bc4c00"}, "P37": {"htmlDir": "docs/post/37.html", "labels": ["c++"], "postTitle": "macos cmake \u4f9d\u8d56 omp", "postUrl": "post/37.html", "postSourceUrl": "https://github.com/0x1042/0x1042.github.io/issues/37", "commentNum": 0, "wordCount": 905, "description": "\r\n# \u914d\u7f6e\r\n\r\n```cmake\r\nset(CMAKE_CXX_FLAGS '${CMAKE_CXX_FLAGS} -stdlib=libc++')\r\nlink_directories(/usr/local/opt/llvm/lib/c++)\r\n\r\nfind_package(OpenMP COMPONENTS CXX)\r\ntarget_link_libraries(\r\n  ${PROJECT_NAME}\r\n  PUBLIC OpenMP::OpenMP_CXX\r\n  PUBLIC c++abi\r\n  PUBLIC c++\r\n)\r\n```\r\n\r\n# \u4f7f\u7528\r\n\r\n```c++\r\nauto batch_get2(const std::vector<std::string> & urls, std::vector<std::string> & resps) -> int {\r\n    std::chrono::high_resolution_clock::time_point start = std::chrono::high_resolution_clock::now();\r\n    resps.resize(urls.size());\r\n\r\n#pragma omp parallel for schedule(dynamic, 1)\r\n    for (int i = 0; i < urls.size(); i++) {\r\n        get(urls[i], resps[i]);\r\n    }\r\n    std::chrono::high_resolution_clock::time_point finish = std::chrono::high_resolution_clock::now();\r\n\r\n    spdlog::info('omp cost {}', std::chrono::duration_cast<std::chrono::milliseconds>(finish - start).count());\r\n\r\n    return 0;\r\n}\r\n```\r\n\u3002", "top": 0, "createdAt": 1730999942, "style": "", "script": "<script src='https://blog.meekdai.com/Gmeek/plugins/GmeekTOC.js'></script><script src='https://blog.meekdai.com/Gmeek/plugins/lightbox.js'></script>", "head": "", "ogImage": "https://raw.githubusercontent.com/0x1042/0x1042.github.io/master/synthwave_option_4.png", "createdDate": "2024-11-08", "dateLabelColor": "#bc4c00"}, "P38": {"htmlDir": "docs/post/38.html", "labels": ["c++"], "postTitle": "strict weak order", "postUrl": "post/38.html", "postSourceUrl": "https://github.com/0x1042/0x1042.github.io/issues/38", "commentNum": 0, "wordCount": 569, "description": "# \u80cc\u666f\r\n\r\n> \u4e0a\u7ebf\u4e86\u4e1a\u52a1\u903b\u8f91\u4ee3\u7801\uff0c\u53d1\u73b0\u6709`coredump`, \u4ece\u5806\u6808\u770b\uff0c\u662f\u51fa\u73b0\u4e86\u8d8a\u754c\u3002", "top": 0, "createdAt": 1733156756, "style": "", "script": "<script src='https://blog.meekdai.com/Gmeek/plugins/GmeekTOC.js'></script><script src='https://blog.meekdai.com/Gmeek/plugins/lightbox.js'></script>", "head": "", "ogImage": "https://raw.githubusercontent.com/0x1042/0x1042.github.io/master/synthwave_option_4.png", "createdDate": "2024-12-03", "dateLabelColor": "#bc4c00"}, "P39": {"htmlDir": "docs/post/39.html", "labels": ["c++"], "postTitle": "c++ misc", "postUrl": "post/39.html", "postSourceUrl": "https://github.com/0x1042/0x1042.github.io/issues/39", "commentNum": 0, "wordCount": 1314, "description": "# \u5143\u51fd\u6570 \r\n\r\n- \u8f93\u5165: \u901a\u8fc7\u6a21\u677f\u53c2\u6570 \r\n- \u8f93\u51fa: \u901a\u5e38\u901a\u8fc7\u7c7b\u578b\u522b\u540d(using/typedef)\u6216\u9759\u6001\u6210\u5458\u6765\u63d0\u4f9b \r\n- \u8ba1\u7b97\u8fc7\u7a0b: \u7f16\u8bd1\u671f\r\n\r\n```c++\r\ntemplate <typename T> // \u8f93\u5165 \r\nstruct is_pointer {\r\n    static constexpr bool value = false; // \u8f93\u51fa\r\n};\r\n\r\ntemplate <typename T>\r\nstruct is_pointer<T *> {\r\n    static constexpr bool value = true;\r\n};\r\n\r\nstatic_assert(is_pointer<int *>::value); // \u8ba1\u7b97\u8fc7\u7a0b\r\nstatic_assert(!is_pointer<int>::value);\r\n```\r\n\r\n# \u6a21\u677f\u53c2\u6570 \r\n\r\n- \u7c7b\u578b\u53c2\u6570\r\n\r\n```c++\r\ntemplate <typename T>\r\nstruct Container {\r\n    T val;\r\n};\r\n```\r\n\r\n- \u975e\u7c7b\u578b\u53c2\u6570\r\n\r\n> \u5fc5\u987b\u662f \u7f16\u8bd1\u671f\u5e38\u91cf\r\n\r\n```c++\r\ntemplate <int size>\r\nstruct Array {\r\n    std::array<int, size> data;\r\n};\r\n```\r\n\r\n- \u6a21\u677f\u53c2\u6570 \r\n```c++\r\ntemplate <template <typename> class Container>\r\nclass Wrapper {\r\n    Container<int> data; // \u4f7f\u7528\u4f20\u5165\u7684\u6a21\u677f\r\npublic:\r\n    void add(int value) { data.push_back(value); }\r\n};\r\n```\r\n\r\n\r\n# `restrict` \u5173\u952e\u5b57\r\n\r\n## \u4f5c\u7528\r\n\r\n> \u7a0b\u5e8f\u5458\u5411\u7f16\u8bd1\u5668\u4fdd\u8bc1\uff0c\u5728\u6307\u9488\u7684\u6574\u4e2a\u751f\u547d\u5468\u671f\u5185\uff0c\u53ea\u6709\u8fd9\u4e2a\u6307\u9488\u80fd\u7528\u6765\u8bbf\u95ee\u5b83\u6307\u5411\u7684\u5bf9\u8c61\u3002", "top": 0, "createdAt": 1734861971, "style": "", "script": "<script src='https://blog.meekdai.com/Gmeek/plugins/GmeekTOC.js'></script><script src='https://blog.meekdai.com/Gmeek/plugins/lightbox.js'></script>", "head": "", "ogImage": "https://raw.githubusercontent.com/0x1042/0x1042.github.io/master/synthwave_option_4.png", "createdDate": "2024-12-22", "dateLabelColor": "#bc4c00"}, "P40": {"htmlDir": "docs/post/40.html", "labels": ["c++"], "postTitle": "x macro", "postUrl": "post/40.html", "postSourceUrl": "https://github.com/0x1042/0x1042.github.io/issues/40", "commentNum": 0, "wordCount": 1956, "description": "# x \u5b8f\r\n\r\n> \u5b9e\u73b0\u679a\u4e3e\u4e0estr\u4e92\u76f8\u8f6c\u6362\u7684\u65f6\u5019\uff0c\u641c\u5230\u7684\u4e00\u4e2a\u7528\u6cd5\u3002", "top": 0, "createdAt": 1736011678, "style": "", "script": "<script src='https://blog.meekdai.com/Gmeek/plugins/GmeekTOC.js'></script><script src='https://blog.meekdai.com/Gmeek/plugins/lightbox.js'></script>", "head": "", "ogImage": "https://raw.githubusercontent.com/0x1042/0x1042.github.io/master/synthwave_option_4.png", "createdDate": "2025-01-05", "dateLabelColor": "#0969da"}, "P41": {"htmlDir": "docs/post/41.html", "labels": ["c++"], "postTitle": "criterion \u5355\u5143\u6d4b\u8bd5\u4f7f\u7528", "postUrl": "post/41.html", "postSourceUrl": "https://github.com/0x1042/0x1042.github.io/issues/41", "commentNum": 0, "wordCount": 1697, "description": "# \u6dfb\u52a0\u4f9d\u8d56\r\n\r\n```meson\r\n// meson.build\r\n\r\nlibcriterion = dependency(\r\n    'criterion',\r\n    method: 'pkg-config',\r\n    required: true,\r\n)\r\n\r\nlib_xmacro_sources = files(\r\n    'xmacro.c',\r\n    'xmacro.h',\r\n)\r\n\r\nlibxmacro = shared_library(\r\n    'xmacro',\r\n    lib_xmacro_sources,\r\n    dependencies: [\r\n        libcriterion,\r\n    ],\r\n)\r\n\r\n\r\nsamples = [\r\n    'xmacro_test.c',\r\n]\r\n\r\nforeach sample : samples\r\n    e = executable(\r\n        sample + '.bin',\r\n        sample,\r\n        dependencies: [libcriterion],\r\n        link_with: [libxmacro],\r\n    )\r\n    test('sample / ' + sample, e)\r\nendforeach\r\n\r\n```\r\n\r\n\r\n# \u4f7f\u7528 \r\n\r\n```c\r\n#include 'xmacro.h'\r\n#include <criterion/criterion.h>\r\n#include <criterion/logging.h>\r\n#include <criterion/options.h>\r\n#include <string.h>\r\n\r\nTest(http_mhd, to_str) {\r\n\r\n  {\r\n    const char *tmp = mhd_to_str(HTTP_GET);\r\n    cr_log_info('HTTP_GET %s ', tmp);\r\n    cr_assert(tmp, 'GET');\r\n  }\r\n\r\n  {\r\n    const char *tmp = mhd_to_str(HTTP_CONNECT);\r\n    cr_log_info('HTTP_CONNECT %s ', tmp);\r\n    cr_assert(tmp, 'CONNECT');\r\n  }\r\n}\r\n\r\nTest(http_mhd, from_str) {\r\n  {\r\n    http_method_t tmp = str_to_mhd('GET');\r\n    cr_log_info('GET %d ', tmp);\r\n    cr_assert_eq(tmp, HTTP_GET);\r\n  }\r\n  {\r\n    http_method_t tmp = str_to_mhd('Post');\r\n    cr_log_info('Post %d ', tmp);\r\n    cr_assert_eq(tmp, HTTP_POST);\r\n  }\r\n  {\r\n    http_method_t tmp = str_to_mhd('TRACE');\r\n    cr_log_info('TRACE %d ', tmp);\r\n    cr_assert_eq(tmp, HTTP_TRACE);\r\n  }\r\n}\r\n\r\n```\r\n\r\n# \u7f16\u8bd1\r\n\r\n```\r\nbuild_asan:\r\n  meson setup buildDir -Db_sanitize=address -Db_lundef=false\r\n  meson compile -C buildDir\r\n  ln -sf buildDir/compile_commands.json .\r\n\r\nrun_test:\r\n    ./buildDir/xmacro_test.c.bin --verbos --full-stats\r\n```\r\n\u3002", "top": 0, "createdAt": 1736011974, "style": "", "script": "<script src='https://blog.meekdai.com/Gmeek/plugins/GmeekTOC.js'></script><script src='https://blog.meekdai.com/Gmeek/plugins/lightbox.js'></script>", "head": "", "ogImage": "https://raw.githubusercontent.com/0x1042/0x1042.github.io/master/synthwave_option_4.png", "createdDate": "2025-01-05", "dateLabelColor": "#0969da"}, "P42": {"htmlDir": "docs/post/42.html", "labels": ["zig"], "postTitle": "zig cc \u7f16\u8bd1c\u9879\u76ee", "postUrl": "post/42.html", "postSourceUrl": "https://github.com/0x1042/0x1042.github.io/issues/42", "commentNum": 0, "wordCount": 1834, "description": "# zig cc \u7f16\u8bd1c\u9879\u76ee \r\n\r\n## \u5355\u4e2ac\u6587\u4ef6\r\n\r\n```zig\r\n    const flags = .{\r\n        '-Wall',\r\n        '-Wextra',\r\n        '-Wpedantic',\r\n        '-Werror=return-type',\r\n        '-std=gnu23',\r\n    };\r\n\r\n    exe.addCSourceFile(.{\r\n        .file = std.Build.LazyPath{ .cwd_relative = 'http.c' },\r\n        .flags = &flags,\r\n    });\r\n\r\n    exe.linkLibC();\r\n```\r\n\r\n## \u591a\u4e2ac\u6587\u4ef6\r\n\r\n```zig\r\n    const cfiles = .{\r\n        'http.c',\r\n        'log.c',\r\n        'server.c',\r\n        'main.c',\r\n        'relay.c',\r\n        'socks.c',\r\n    };\r\n\r\n    exe.addCSourceFiles(.{\r\n        .files = &cfiles,\r\n        .flags = &flags,\r\n    });\r\n```\r\n\r\n## \u81ea\u5b9a\u4e49\u76ee\u5f55\u548c\u540e\u7f00\r\n\r\n```zig\r\n\r\n    {\r\n        var sources = std.ArrayList([]const u8).init(b.allocator);\r\n        var dir = try std.fs.cwd().openDir('.', .{ .access_sub_paths = true });\r\n        var walker = try dir.walk(b.allocator);\r\n        defer walker.deinit();\r\n\r\n        const allowed_exts = [_][]const u8{ '.c', '.cpp', '.cxx', '.c++', '.cc' };\r\n\r\n        while (try walker.next()) |entry| {\r\n            const ext = std.fs.path.extension(entry.basename);\r\n            const include_file = for (allowed_exts) |e| {\r\n                if (std.mem.eql(u8, ext, e))\r\n                    break true;\r\n            } else false;\r\n            if (include_file) {\r\n                // we have to clone the path as walker.next() or walker.deinit() will override/kill it\r\n                try sources.append(b.dupe(entry.path));\r\n            }\r\n        }\r\n    }\r\n```\r\n\r\n## todo1 \u5916\u90e8\u5e93 \r\n\r\n## todo2 c++\r\n\r\n\r\n## \u7f16\u8bd1 \r\n\r\n- native \r\n\r\n```zig \r\n\r\nVERBOSE := '--verbose --summary all'\r\nzb_rel:\r\n    zig build {{ VERBOSE }} --release=safe -Doptimize=ReleaseSafe --prefix {{ OUTPUT }}/rel\r\n\r\n```\r\n- \u4ea4\u53c9\r\n\r\n```zig \r\nzb_linux_rel:\r\n    zig build {{ VERBOSE }} -Dtarget=x86_64-linux-gnu -Doptimize=ReleaseSafe --prefix {{ OUTPUT }}/linux/rel\r\n```\r\n\r\n\u3002", "top": 0, "createdAt": 1736016588, "style": "", "script": "<script src='https://blog.meekdai.com/Gmeek/plugins/GmeekTOC.js'></script><script src='https://blog.meekdai.com/Gmeek/plugins/lightbox.js'></script>", "head": "", "ogImage": "https://raw.githubusercontent.com/0x1042/0x1042.github.io/master/synthwave_option_4.png", "createdDate": "2025-01-05", "dateLabelColor": "#0969da"}, "P43": {"htmlDir": "docs/post/43.html", "labels": ["zig"], "postTitle": "zig build misc", "postUrl": "post/43.html", "postSourceUrl": "https://github.com/0x1042/0x1042.github.io/issues/43", "commentNum": 0, "wordCount": 2429, "description": "# \u8de8\u5e73\u53f0\u7f16\u8bd1\n\n```zig\n\nconst targets: []const std.Target.Query = &.{\n    .{ .cpu_arch = .x86_64, .os_tag = .macos },\n    .{ .cpu_arch = .x86_64, .os_tag = .linux, .abi = .gnu },\n    .{ .cpu_arch = .x86_64, .os_tag = .linux, .abi = .musl },\n    .{ .cpu_arch = .x86_64, .os_tag = .windows },\n    .{ .cpu_arch = .aarch64, .os_tag = .macos },\n    .{ .cpu_arch = .aarch64, .os_tag = .linux },\n    .{ .cpu_arch = .aarch64, .os_tag = .windows },\n    .{ .cpu_arch = .mips, .os_tag = .linux, .abi = .musl },\n    .{ .cpu_arch = .mipsel, .os_tag = .linux, .abi = .musl },\n    .{ .cpu_arch = .mips64, .os_tag = .linux, .abi = .musl },\n    .{ .cpu_arch = .mips64el, .os_tag = .linux, .abi = .musl },\n};\n\npub fn build(b: *std.Build) void {\n    const optimize = b.standardOptimizeOption(.{});\n\n    for (targets) |t| {\n        var name: []u8 = undefined;\n        const arch = if (t.cpu_arch) |arch| @tagName(arch) else 'native';\n        const os = if (t.os_tag) |os| @tagName(os) else 'unknown';\n        if (t.abi) |abi| {\n            name = b.fmt('{s}-{s}-{s}', .{ os, arch, @tagName(abi) });\n        } else {\n            name = b.fmt('{s}-{s}', .{ os, arch });\n        }\n\n        const exe = b.addExecutable(.{\n            .name = name,\n            .root_source_file = b.path('src/main.zig'),\n            .target = b.resolveTargetQuery(t),\n            .optimize = optimize,\n        });\n\n        b.installArtifact(exe);\n    }\n}\n\n```\n\n# \u81ea\u5b9a\u4e49\u7f16\u8bd1\u9009\u9879 \n\n\n```zig\n\nfn addOption(b: *std.Build) *std.Build.Step.Options {\n    const version = b.option([]const u8, 'version', 'build version') orelse 'dev';\n    const date = b.option([]const u8, 'date', 'build date') orelse 'unknown';\n\n    const options = b.addOptions();\n    options.addOption([]const u8, 'version', version);\n    options.addOption([]const u8, 'date', date);\n\n    return options;\n}\n\nexe.root_module.addOptions('config', options);\n\n```\n\n\u7f16\u8bd1\u65f6\uff0c\u6307\u5b9a\u9009\u9879\n\n```shell\nzig build -freference-trace --summary all --verbose -Dversion=22c0548 -Ddate=2025-01-18\n```\n\n`addOptions` \u4f1a\u5c06\u9009\u9879\u8f6c\u6362\u6210zig\u4ee3\u7801\uff0c\u540c\u65f6\u53ef\u4ee5\u5728\u9879\u76ee\u4e2d\u76f4\u63a5\u4f9d\u8d56\uff0c\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u529f\u80fd\u6765\u751f\u6210\u4e0e`golang`\u4e2d\u901a\u8fc7 `ldflags -X` \u7f16\u8bd1\u65f6\u751f\u6210\u6784\u5efa\u65e5\u671f/commit\u7b49\u4e00\u6837\u7684\u529f\u80fd\n\n```zig\n// main.zig\n\nconst config = @import('config');\n\nconst version = config.date ++ ' ' ++ config.version;\n\n```\n\n# \u6839\u636e\u7f16\u8bd1\u7c7b\u578b\u63a7\u5236\u65e5\u5fd7\u7ea7\u522b\n\n```zig\npub const level = switch (@import('builtin').mode) {\n    .Debug => std.log.Level.debug,\n    else => std.log.Level.info,\n};\n\npub const std_options = .{\n    .log_level = level,\n    .logFn = logger.logfn,\n};\n```\n\n\n\n\u3002", "top": 0, "createdAt": 1737196353, "style": "", "script": "<script src='https://blog.meekdai.com/Gmeek/plugins/GmeekTOC.js'></script><script src='https://blog.meekdai.com/Gmeek/plugins/lightbox.js'></script>", "head": "", "ogImage": "https://raw.githubusercontent.com/0x1042/0x1042.github.io/master/synthwave_option_4.png", "createdDate": "2025-01-18", "dateLabelColor": "#0969da"}, "P44": {"htmlDir": "docs/post/44.html", "labels": ["c++"], "postTitle": "simd hello world", "postUrl": "post/44.html", "postSourceUrl": "https://github.com/0x1042/0x1042.github.io/issues/44", "commentNum": 0, "wordCount": 4532, "description": "# SIMD Dot Product\n\n## \u5b9e\u73b0\n\n```cpp\n#include <immintrin.h>\n#include <pmmintrin.h>\n#include <x86intrin.h>\n#include <xmmintrin.h>\n\n/**\n * @brief base \u7248\u672c\n *\n * @param a\n * @param b\n * @param dim\n * @return float\n */\nfloat dot(const void *a, const void *b, size_t dim) {\n  float sum = 0;\n  for (unsigned i = 0; i < dim; i++) {\n    sum += ((float *)a)[i] * ((float *)b)[i];\n  }\n  return sum;\n}\n\n/**\n * @brief simd \u7248\u672c\n *\n * @param a\n * @param b\n * @param dim\n * @return float\n */\nfloat dot_simd(const void *a, const void *b, size_t dim) {\n\n  float *va = (float *)a;\n  float *vb = (float *)b;\n\n  size_t qty16 = dim / 16;\n\n  const float *enda = va + 16 * qty16;\n\n  // \u521d\u59cb\u5316\u4e00\u4e2a\u96f6\u5411\u91cf \u957f\u5ea6\u4e3a8\n  __m256 sum = _mm256_set1_ps(0);\n\n  while (va < enda) {\n      // \u5c06va\u7684\u524d8\u4e2a\u5143\u7d20\u52a0\u8f7d\u5230\u5411\u91cfv1\u4e2d\n    __m256 v1 = _mm256_loadu_ps(va);\n    va += 8;\n    // \u5c06vb\u7684\u524d8\u4e2a\u5143\u7d20\u52a0\u8f7d\u5230\u5411\u91cfv2\u4e2d\n    __m256 v2 = _mm256_loadu_ps(vb);\n    vb += 8;\n\n    // \u6267\u884c\u4e58\u6cd5\u548c\u52a0\u6cd5\uff1asum += v1 * v2\n    sum = _mm256_fmadd_ps(v1, v2, sum);\n\n    // \u5c06va\u7684\u524d8\u4e2a\u5143\u7d20\u52a0\u8f7d\u5230\u5411\u91cfv1\u4e2d\n    v1 = _mm256_loadu_ps(va);\n    va += 8;\n    // \u5c06vb\u7684\u524d8\u4e2a\u5143\u7d20\u52a0\u8f7d\u5230\u5411\u91cfv2\u4e2d\n    v2 = _mm256_loadu_ps(vb);\n    vb += 8;\n\n    // \u6267\u884c\u4e58\u6cd5\u548c\u52a0\u6cd5\uff1asum += v1 * v2\n    sum = _mm256_fmadd_ps(v1, v2, sum);\n  }\n\n    // \u4ece256\u4f4d\u5411\u91cf\u4e2d\u63d0\u53d6\u4e24\u4e2a128\u4f4d\u90e8\u5206\n  __m128 low = _mm256_extractf128_ps(sum, 0);// \u4f4e128\u4f4d\n  __m128 hight = _mm256_extractf128_ps(sum, 1); // \u9ad8128\u4f4d\n\n\n // \u5c06\u4e24\u4e2a128\u4f4d\u5411\u91cf\u76f8\u52a0\uff0c\u5f97\u5230\u4e00\u4e2a\u5305\u542b4\u4e2afloat\u7684\u5411\u91cf\n  __m128 sum128 = _mm_add_ps(low, hight);\n\n  // \u8fd9\u65f6sum128\u5305\u542b4\u4e2afloat\u503c\uff1a[a, b, c, d]\n\n  // \u7b2c\u4e00\u6b21hadd\uff1a\u5c06\u76f8\u90bb\u5143\u7d20\u4e24\u4e24\u76f8\u52a0\n  // \u8f93\u5165\uff1a[a, b, c, d]\n  // \u8f93\u51fa\uff1a[a+b, c+d, a+b, c+d]\n  sum128 = _mm_hadd_ps(sum128, sum128);\n\n  // \u7b2c\u4e8c\u6b21hadd\uff1a\u518d\u6b21\u5c06\u76f8\u90bb\u5143\u7d20\u4e24\u4e24\u76f8\u52a0\n  // \u8f93\u5165\uff1a[a+b, c+d, a+b, c+d]\n  // \u8f93\u51fa\uff1a[a+b+c+d, a+b+c+d, a+b+c+d, a+b+c+d]\n  sum128 = _mm_hadd_ps(sum128, sum128);\n\n  // \u5904\u7406\u5269\u4f59\u90e8\u5206\n  float tail_sum = 0.0f;\n  size_t remainder = dim % 16;\n  for (size_t i = 0; i < remainder; ++i) {\n    tail_sum += va[i] * vb[i];\n  }\n\n //_mm_cvtss_f32 \u5c06\u7ed3\u679c\u4eceSIMD\u5bc4\u5b58\u5668\u63d0\u53d6\u5230\u666e\u901a\u6d6e\u70b9\u6570\n  return _mm_cvtss_f32(sum128) + tail_sum;\n}\n\n```\n\n## \u7f16\u8bd1\n\n```meson\nadd_global_arguments('-march=native', language: 'cpp')\nadd_global_arguments('-mavx2', language: 'cpp')\nadd_global_arguments('-mpclmul', language: 'cpp')\nadd_global_arguments('-mbmi', language: 'cpp')\n\ndot_inc = include_directories('.')\n\ndot_src = files(\n    'dot.cc',\n)\n\ndot = library(\n    'dot',\n    dot_src,\n    dependencies: [\n        random_dep,\n    ],\n    include_directories: dot_inc,\n)\n\ndot_dep = declare_dependency(\n    include_directories: dot_inc,\n    link_with: dot,\n)\n```\n\n## unittest\n\n### \u5b9e\u73b0\n\n```c++\n#include 'dot.h'\n#include <gtest/gtest.h>\n\nTEST(check, check1) {\n  constexpr size_t dim = 128;\n\n  const auto &va = random(dim);\n  const auto &vb = random(dim);\n\n  const auto &base = dot(va.data(), vb.data(), dim);\n  const auto &simd = dot_simd(va.data(), vb.data(), dim);\n\n  EXPECT_NE(base, 0);\n  EXPECT_NE(simd, 0);\n  EXPECT_FLOAT_EQ(base, simd);\n}\n\nTEST(check, check2) {\n  constexpr size_t dim = 333;\n\n  const auto &va = random(dim);\n  const auto &vb = random(dim);\n\n  const auto &base = dot(va.data(), vb.data(), dim);\n  const auto &simd = dot_simd(va.data(), vb.data(), dim);\n\n  EXPECT_NE(base, 0);\n  EXPECT_NE(simd, 0);\n  EXPECT_FLOAT_EQ(base, simd);\n}\n\nint main(int argc, char **argv) {\n  testing::InitGoogleTest(&argc, argv);\n  return RUN_ALL_TESTS();\n}\n\n```\n\n### \u7f16\u8bd1\n\n```meson\nexecutable(\n    'ut',\n    'ut.cc',\n    install: true,\n    dependencies: [thread_dep, random_dep, gtest_dep, dot_dep],\n)\n```\n\n## benchmark\n\n### \u5b9e\u73b0\n```c++\n#include 'dot.h'\n#include <benchmark/benchmark.h>\n\nstatic void BM_dot(benchmark::State &state) {\n  constexpr size_t dim = 128;\n\n  const auto &va = random(dim);\n  const auto &vb = random(dim);\n\n  for (auto _ : state) {\n    const auto &simd = dot_simd(va.data(), vb.data(), dim);\n    benchmark::DoNotOptimize(simd);\n  }\n}\n\nBENCHMARK(BM_dot);\n\nint main(int argc, char **argv) {\n  benchmark::Initialize(&argc, argv);\n  benchmark::RunSpecifiedBenchmarks();\n  return 0;\n}\n\n```\n\n### \u7f16\u8bd1\n\n```meson\nexecutable(\n    'bench',\n    'bench.cc',\n    install: true,\n    dependencies: [thread_dep, random_dep, bench_dep, dot_dep],\n)\n```\n\n``` text\n./target/bench --benchmark_min_time=10s\n2025-02-19T01:19:44+08:00\nRunning ./target/bench\nRun on (16 X 2300 MHz CPU s)\nCPU Caches:\n  L1 Data 32 KiB\n  L1 Instruction 32 KiB\n  L2 Unified 256 KiB (x8)\n  L3 Unified 16384 KiB\nLoad Average: 1.89, 2.17, 2.30\n------------------------------------------------------\nBenchmark            Time             CPU   Iterations\n------------------------------------------------------\nBM_dot            94.0 ns         94.0 ns    147363798\nBM_dot_simd       10.3 ns         10.2 ns   1442614248\n```\n\u3002", "top": 0, "createdAt": 1739900527, "style": "", "script": "<script src='https://blog.meekdai.com/Gmeek/plugins/GmeekTOC.js'></script><script src='https://blog.meekdai.com/Gmeek/plugins/lightbox.js'></script>", "head": "", "ogImage": "https://raw.githubusercontent.com/0x1042/0x1042.github.io/master/synthwave_option_4.png", "createdDate": "2025-02-19", "dateLabelColor": "#0969da"}}, "singeListJson": {}, "labelColorDict": {"about": "#32CECB", "c++": "#BE8008", "go": "#7B7AB9", "infra": "#33BE7E", "link": "#6EAD8B", "misc": "#F0A3E9", "ml": "#D4055A", "perf": "#DCCC7B", "protobuf": "#19E33F", "rust": "#6EF5AE", "zig": "#1d76db"}, "ogImage": "https://raw.githubusercontent.com/0x1042/0x1042.github.io/master/synthwave_option_4.png", "primerCSS": "<link href='https://mirrors.sustech.edu.cn/cdnjs/ajax/libs/Primer/21.0.7/primer.css' rel='stylesheet' />", "prevUrl": "/page2.html", "nextUrl": "disabled"}